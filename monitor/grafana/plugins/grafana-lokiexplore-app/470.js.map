{"version":3,"file":"470.js?_cache=3204c8fc47e32152da72","mappings":"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AAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MAAO,CAAC,KAAM,KAAM,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,IAAK,MAAO,CAAC,KAAM,KAAM,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,IAAK,MAAO,CAAC,KAAM,KAAM,CAAC,IAAK,MAAO,CAAC,KAAM,KAAM,CAAC,KAAM,MAAO,CAAC,KAAM,MAAO,CAAC,IAAK,OAAQ,CAAC,MAAO,KAAM,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,IAAK,OAAQ,CAAC,MAAO,KAAM,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,QAAS,CAAC,OAAQ,UAA7/V,GACpxoXA,UAAY,CAAC,CAAC,EAAG,GAAI,GAAI,CAAC,IAAK,IAAK,IACpCA,UAAY,CAAC,CAAC,IAAK,KAAM,MAAO,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,MAAO,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,IACjWA,UAAY,CAAC,CAAC,MAAO,MAAO,GAAI,CAAC,OAAQ,QAAS,GAAI,CAAC,QAAS,QAAS,IACzEA,UAAY,CAAC,CAAC,MAAO,MAAO,IAC5BA,SAAW,CAAC,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,IAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,MAAO,MAAO,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,KAAM,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,KAAM,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,MAAO,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAC/lXA,aAAe,CAAC,CAAC,IAAK,IAAK,IAC3BA,UAAY,CAAC,CAAC,GAAI,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,IAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,MAAO,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAC95FA,cAAglhpklSA,UAAY,CAAC,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,KAAM,MAAO,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,IACjIA,cAAgB,CAAC,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,IAC/JA,UAAY,CAAC,CAAC,GAAI,GAAI,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,OAAQ,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,OAAQ,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,MAAO,CAAC,OAAQ,OAAQ,IAC1pFA,aAAekB,KAAKC,GACpBnB,cAAgB,CAAC,CAAC,GAAI,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,CAAC,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,IAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,OAAQ,OAAQ,IACh/DA,SAAW,CAAC,CAAC,IAAK,IAAK,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,KAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,MAAO,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,OAAQ,OAAQ,CAAC,OAAQ,OAAQ,MAAO,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,KAAM,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAC3jLA,aAAel/FA,UAAY,CAAC,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,MAAO,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,MAAO,MAAO,IACnsLA,cAAgB,CAAC,CAAC,IAAK,IAAK,IAAK,CAAC,KAAM,KAAM,IAC9CA,SAAW,CAAC,CAAC,GAAI,GAAI,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IACllhyCA,UAAY,CAAC,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IACrzCA,SAAW,CAAC,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,IAAK,IAAK,CAAC,IAAK,IAAK,IAAK,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,OAAQ,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,MAAO,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,OAAQ,OAAQ,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,KAAM,CAAC,OAAQ,OAAQ,IAC7nGA,UAAY,CAAC,CAAC,GAAI,KAAM,MAAO,CAAC,KAAM,KAAM,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IACtGA,UAAY,CAAC,CAAC,GAAI,KAAM,MAAO,CAAC,KAAM,KAAM,MAAO,CAAC,KAAM,KAAM,MAAO,CAAC,KAAM,KAAM,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,OAAQ,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,MACrPA,UAAY,CAAC,CAAC,GAAI,GAAI,IAAK,CAAC,IAAK,KAAM,MAAO,CAAC,KAAM,KAAM,MAAO,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,MAAO,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,IAChcA,UAAY,CAAC,CAAC,IAAK,KAAM,MAAO,CAAC,KAAM,KAAM,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IACvGA,UAAY,CAAC,CAAC,IAAK,KAAM,MAAO,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IACxlGA,UAAY,CAAC,CAAC,GAAI,GAAI,IAAK,CAAC,IAAK,KAAM,MAAO,CAAC,KAAM,KAAM,MAAO,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,MAAO,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,OAAQ,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAC3fA,SAAW,CAAC,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,GAAI,CAAC,IAAK,IAAK,IAAK,CAAC,IAAK,KAAM,KAAM,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,IAAK,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,IAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,OAAQ,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,KAAO,IAAK,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,MAAO,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,OAAQ,OAAQ,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,KAAM,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,KAAM,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,KAAM,CAAC,OAAQ,OAAQ,KAAM,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAAK,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,IAC/zHA,UAAY,CAAC,CAAC,GAAI,IAAK,KAAM,CAAC,IAAK,IAAK,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,GAAI,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,KAAM,CAAC,KAAM,KAAM,MAAO,CAAC,KAAM,KAAM,GAAI,CAAC,MAAO,MAAO,OAAQ,CAAC,MAAO,MAAO,KAAM,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,MAAO,MAAO,GAAI,CAAC,OAAQ,OAAQ,OAClSA,UAAY,CAAC,CAAC,GA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","sources":["webpack://grafana-lokiexplore-app/../node_modules/re2js/build/index.esm.js"],"sourcesContent":["/*!\n * re2js\n * RE2JS is the JavaScript port of RE2, a regular expression engine that provides linear time matching\n *\n * @version v1.1.0\n * @author Alexey Vasiliev\n * @homepage https://github.com/le0pard/re2js#readme\n * @repository github:le0pard/re2js\n * @license MIT\n */\n//// Parser flags.\nclass RE2Flags {\n  // Fold case during matching (case-insensitive).\n  static FOLD_CASE = 0x01;\n  // Treat pattern as a literal string instead of a regexp.\n  static LITERAL = 0x02;\n  // Allow character classes like [^a-z] and [[:space:]] to match newline.\n  static CLASS_NL = 0x04;\n  // Allow '.' to match newline.\n  static DOT_NL = 0x08;\n  // Treat ^ and $ as only matching at beginning and end of text, not\n  // around embedded newlines.  (Perl's default).\n  static ONE_LINE = 0x10;\n  // Make repetition operators default to non-greedy.\n  static NON_GREEDY = 0x20;\n  // allow Perl extensions:\n  //   non-capturing parens - (?: )\n  //   non-greedy operators - *? +? ?? {}?\n  //   flag edits - (?i) (?-i) (?i: )\n  //     i - FoldCase\n  //     m - !OneLine\n  //     s - DotNL\n  //     U - NonGreedy\n  //   line ends: \\A \\z\n  //   \\Q and \\E to disable/enable metacharacters\n  //   (?P<name>expr) for named captures\n  // \\C (any byte) is not supported.\n  static PERL_X = 0x40;\n  // Allow \\p{Han}, \\P{Han} for Unicode group and negation.\n  static UNICODE_GROUPS = 0x80;\n  // Regexp END_TEXT was $, not \\z.  Internal use only.\n  static WAS_DOLLAR = 0x100;\n  static MATCH_NL = (() => RE2Flags.CLASS_NL | RE2Flags.DOT_NL)();\n  // As close to Perl as possible.\n  static PERL = (() => RE2Flags.CLASS_NL | RE2Flags.ONE_LINE | RE2Flags.PERL_X | RE2Flags.UNICODE_GROUPS)();\n  // POSIX syntax.\n  static POSIX = 0;\n  //// Anchors\n  static UNANCHORED = 0;\n  static ANCHOR_START = 1;\n  static ANCHOR_BOTH = 2;\n}\n\n/**\n * Various constants and helper for unicode codepoints.\n */\nclass Codepoint {\n  // codePointAt(0)\n  static CODES = (() => new Map([['\\x07', 7], ['\\b', 8], ['\\t', 9], ['\\n', 10], ['\\v', 11], ['\\f', 12], ['\\r', 13], [' ', 32], ['\"', 34], ['$', 36], ['&', 38], ['(', 40], [')', 41], ['*', 42], ['+', 43], ['-', 45], ['.', 46], ['0', 48], ['1', 49], ['2', 50], ['3', 51], ['4', 52], ['5', 53], ['6', 54], ['7', 55], ['8', 56], ['9', 57], [':', 58], ['<', 60], ['>', 62], ['?', 63], ['A', 65], ['B', 66], ['C', 67], ['F', 70], ['P', 80], ['Q', 81], ['U', 85], ['Z', 90], ['[', 91], ['\\\\', 92], [']', 93], ['^', 94], ['_', 95], ['a', 97], ['b', 98], ['f', 102], ['i', 105], ['m', 109], ['n', 110], ['r', 114], ['s', 115], ['t', 116], ['v', 118], ['x', 120], ['z', 122], ['{', 123], ['|', 124], ['}', 125]]))();\n\n  // convert unicode codepoint to upper case codepoint\n  // return same codepoint, if cannot do it (or codepoint not have upper variation)\n  static toUpperCase(codepoint) {\n    const s = String.fromCodePoint(codepoint).toUpperCase();\n    if (s.length > 1) {\n      return codepoint;\n    }\n    const sOrigin = String.fromCodePoint(s.codePointAt(0)).toLowerCase();\n    if (sOrigin.length > 1 || sOrigin.codePointAt(0) !== codepoint) {\n      return codepoint;\n    }\n    return s.codePointAt(0);\n  }\n\n  // convert unicode codepoint to lower case codepoint\n  // return same codepoint, if cannot do it (or codepoint not have lower variation)\n  static toLowerCase(codepoint) {\n    const s = String.fromCodePoint(codepoint).toLowerCase();\n    if (s.length > 1) {\n      return codepoint;\n    }\n    const sOrigin = String.fromCodePoint(s.codePointAt(0)).toUpperCase();\n    if (sOrigin.length > 1 || sOrigin.codePointAt(0) !== codepoint) {\n      return codepoint;\n    }\n    return s.codePointAt(0);\n  }\n}\n\n// GENERATED BY tools/scripts/genUnicodeTable.js; DO NOT EDIT.\n// yarn node ./tools/scripts/genUnicodeTable.js > src/UnicodeTables.js\n\nclass UnicodeTables {\n  static CASE_ORBIT = (() => new Map([[75, 107], [107, 8490], [8490, 75], [83, 115], [115, 383], [383, 83], [181, 924], [924, 956], [956, 181], [197, 229], [229, 8491], [8491, 197], [452, 453], [453, 454], [454, 452], [455, 456], [456, 457], [457, 455], [458, 459], [459, 460], [460, 458], [497, 498], [498, 499], [499, 497], [837, 921], [921, 953], [953, 8126], [8126, 837], [914, 946], [946, 976], [976, 914], [917, 949], [949, 1013], [1013, 917], [920, 952], [952, 977], [977, 1012], [1012, 920], [922, 954], [954, 1008], [1008, 922], [928, 960], [960, 982], [982, 928], [929, 961], [961, 1009], [1009, 929], [931, 962], [962, 963], [963, 931], [934, 966], [966, 981], [981, 934], [937, 969], [969, 8486], [8486, 937], [1042, 1074], [1074, 7296], [7296, 1042], [1044, 1076], [1076, 7297], [7297, 1044], [1054, 1086], [1086, 7298], [7298, 1054], [1057, 1089], [1089, 7299], [7299, 1057], [1058, 1090], [1090, 7300], [7300, 7301], [7301, 1058], [1066, 1098], [1098, 7302], [7302, 1066], [1122, 1123], [1123, 7303], [7303, 1122], [7304, 42570], [42570, 42571], [42571, 7304], [7305, 7306], [7306, 7305], [7776, 7777], [7777, 7835], [7835, 7776], [223, 7838], [7838, 223], [8064, 8072], [8072, 8064], [8065, 8073], [8073, 8065], [8066, 8074], [8074, 8066], [8067, 8075], [8075, 8067], [8068, 8076], [8076, 8068], [8069, 8077], [8077, 8069], [8070, 8078], [8078, 8070], [8071, 8079], [8079, 8071], [8080, 8088], [8088, 8080], [8081, 8089], [8089, 8081], [8082, 8090], [8090, 8082], [8083, 8091], [8091, 8083], [8084, 8092], [8092, 8084], [8085, 8093], [8093, 8085], [8086, 8094], [8094, 8086], [8087, 8095], [8095, 8087], [8096, 8104], [8104, 8096], [8097, 8105], [8105, 8097], [8098, 8106], [8106, 8098], [8099, 8107], [8107, 8099], [8100, 8108], [8108, 8100], [8101, 8109], [8109, 8101], [8102, 8110], [8110, 8102], [8103, 8111], [8111, 8103], [8115, 8124], [8124, 8115], [8131, 8140], [8140, 8131], [912, 8147], [8147, 912], [944, 8163], [8163, 944], [8179, 8188], [8188, 8179], [612, 42955], [42955, 612], [42956, 42957], [42957, 42956], [42970, 42971], [42971, 42970], [411, 42972], [42972, 411], [64261, 64262], [64262, 64261], [66560, 66600], [66600, 66560], [66561, 66601], [66601, 66561], [66562, 66602], [66602, 66562], [66563, 66603], [66603, 66563], [66564, 66604], [66604, 66564], [66565, 66605], [66605, 66565], [66566, 66606], [66606, 66566], [66567, 66607], [66607, 66567], [66568, 66608], [66608, 66568], [66569, 66609], [66609, 66569], [66570, 66610], [66610, 66570], [66571, 66611], [66611, 66571], [66572, 66612], [66612, 66572], [66573, 66613], [66613, 66573], [66574, 66614], [66614, 66574], [66575, 66615], [66615, 66575], [66576, 66616], [66616, 66576], [66577, 66617], [66617, 66577], [66578, 66618], [66618, 66578], [66579, 66619], [66619, 66579], [66580, 66620], [66620, 66580], [66581, 66621], [66621, 66581], [66582, 66622], [66622, 66582], [66583, 66623], [66623, 66583], [66584, 66624], [66624, 66584], [66585, 66625], [66625, 66585], [66586, 66626], [66626, 66586], [66587, 66627], [66627, 66587], [66588, 66628], [66628, 66588], [66589, 66629], [66629, 66589], [66590, 66630], [66630, 66590], [66591, 66631], [66631, 66591], [66592, 66632], [66632, 66592], [66593, 66633], [66633, 66593], [66594, 66634], [66634, 66594], [66595, 66635], [66635, 66595], [66596, 66636], [66636, 66596], [66597, 66637], [66637, 66597], [66598, 66638], [66638, 66598], [66599, 66639], [66639, 66599], [66736, 66776], [66776, 66736], [66737, 66777], [66777, 66737], [66738, 66778], [66778, 66738], [66739, 66779], [66779, 66739], [66740, 66780], [66780, 66740], [66741, 66781], [66781, 66741], [66742, 66782], [66782, 66742], [66743, 66783], [66783, 66743], [66744, 66784], [66784, 66744], [66745, 66785], [66785, 66745], [66746, 66786], [66786, 66746], [66747, 66787], [66787, 66747], [66748, 66788], [66788, 66748], [66749, 66789], [66789, 66749], [66750, 66790], [66790, 66750], [66751, 66791], [66791, 66751], [66752, 66792], [66792, 66752], [66753, 66793], [66793, 66753], [66754, 66794], [66794, 66754], [66755, 66795], [66795, 66755], [66756, 66796], [66796, 66756], [66757, 66797], [66797, 66757], [66758, 66798], [66798, 66758], [66759, 66799], [66799, 66759], [66760, 66800], [66800, 66760], [66761, 66801], [66801, 66761], [66762, 66802], [66802, 66762], [66763, 66803], [66803, 66763], [66764, 66804], [66804, 66764], [66765, 66805], [66805, 66765], [66766, 66806], [66806, 66766], [66767, 66807], [66807, 66767], [66768, 66808], [66808, 66768], [66769, 66809], [66809, 66769], [66770, 66810], [66810, 66770], [66771, 66811], [66811, 66771], [66928, 66967], [66967, 66928], [66929, 66968], [66968, 66929], [66930, 66969], [66969, 66930], [66931, 66970], [66970, 66931], [66932, 66971], [66971, 66932], [66933, 66972], [66972, 66933], [66934, 66973], [66973, 66934], [66935, 66974], [66974, 66935], [66936, 66975], [66975, 66936], [66937, 66976], [66976, 66937], [66938, 66977], [66977, 66938], [66940, 66979], [66979, 66940], [66941, 66980], [66980, 66941], [66942, 66981], [66981, 66942], [66943, 66982], [66982, 66943], [66944, 66983], [66983, 66944], [66945, 66984], [66984, 66945], [66946, 66985], [66985, 66946], [66947, 66986], [66986, 66947], [66948, 66987], [66987, 66948], [66949, 66988], [66988, 66949], [66950, 66989], [66989, 66950], [66951, 66990], [66990, 66951], [66952, 66991], [66991, 66952], [66953, 66992], [66992, 66953], [66954, 66993], [66993, 66954], [66956, 66995], [66995, 66956], [66957, 66996], [66996, 66957], [66958, 66997], [66997, 66958], [66959, 66998], [66998, 66959], [66960, 66999], [66999, 66960], [66961, 67000], [67000, 66961], [66962, 67001], [67001, 66962], [66964, 67003], [67003, 66964], [66965, 67004], [67004, 66965], [68736, 68800], [68800, 68736], [68737, 68801], [68801, 68737], [68738, 68802], [68802, 68738], [68739, 68803], [68803, 68739], [68740, 68804], [68804, 68740], [68741, 68805], [68805, 68741], [68742, 68806], [68806, 68742], [68743, 68807], [68807, 68743], [68744, 68808], [68808, 68744], [68745, 68809], [68809, 68745], [68746, 68810], [68810, 68746], [68747, 68811], [68811, 68747], [68748, 68812], [68812, 68748], [68749, 68813], [68813, 68749], [68750, 68814], [68814, 68750], [68751, 68815], [68815, 68751], [68752, 68816], [68816, 68752], [68753, 68817], [68817, 68753], [68754, 68818], [68818, 68754], [68755, 68819], [68819, 68755], [68756, 68820], [68820, 68756], [68757, 68821], [68821, 68757], [68758, 68822], [68822, 68758], [68759, 68823], [68823, 68759], [68760, 68824], [68824, 68760], [68761, 68825], [68825, 68761], [68762, 68826], [68826, 68762], [68763, 68827], [68827, 68763], [68764, 68828], [68828, 68764], [68765, 68829], [68829, 68765], [68766, 68830], [68830, 68766], [68767, 68831], [68831, 68767], [68768, 68832], [68832, 68768], [68769, 68833], [68833, 68769], [68770, 68834], [68834, 68770], [68771, 68835], [68835, 68771], [68772, 68836], [68836, 68772], [68773, 68837], [68837, 68773], [68774, 68838], [68838, 68774], [68775, 68839], [68839, 68775], [68776, 68840], [68840, 68776], [68777, 68841], [68841, 68777], [68778, 68842], [68842, 68778], [68779, 68843], [68843, 68779], [68780, 68844], [68844, 68780], [68781, 68845], [68845, 68781], [68782, 68846], [68846, 68782], [68783, 68847], [68847, 68783], [68784, 68848], [68848, 68784], [68785, 68849], [68849, 68785], [68786, 68850], [68850, 68786], [68944, 68976], [68976, 68944], [68945, 68977], [68977, 68945], [68946, 68978], [68978, 68946], [68947, 68979], [68979, 68947], [68948, 68980], [68980, 68948], [68949, 68981], [68981, 68949], [68950, 68982], [68982, 68950], [68951, 68983], [68983, 68951], [68952, 68984], [68984, 68952], [68953, 68985], [68985, 68953], [68954, 68986], [68986, 68954], [68955, 68987], [68987, 68955], [68956, 68988], [68988, 68956], [68957, 68989], [68989, 68957], [68958, 68990], [68990, 68958], [68959, 68991], [68991, 68959], [68960, 68992], [68992, 68960], [68961, 68993], [68993, 68961], [68962, 68994], [68994, 68962], [68963, 68995], [68995, 68963], [68964, 68996], [68996, 68964], [68965, 68997], [68997, 68965], [71840, 71872], [71872, 71840], [71841, 71873], [71873, 71841], [71842, 71874], [71874, 71842], [71843, 71875], [71875, 71843], [71844, 71876], [71876, 71844], [71845, 71877], [71877, 71845], [71846, 71878], [71878, 71846], [71847, 71879], [71879, 71847], [71848, 71880], [71880, 71848], [71849, 71881], [71881, 71849], [71850, 71882], [71882, 71850], [71851, 71883], [71883, 71851], [71852, 71884], [71884, 71852], [71853, 71885], [71885, 71853], [71854, 71886], [71886, 71854], [71855, 71887], [71887, 71855], [71856, 71888], [71888, 71856], [71857, 71889], [71889, 71857], [71858, 71890], [71890, 71858], [71859, 71891], [71891, 71859], [71860, 71892], [71892, 71860], [71861, 71893], [71893, 71861], [71862, 71894], [71894, 71862], [71863, 71895], [71895, 71863], [71864, 71896], [71896, 71864], [71865, 71897], [71897, 71865], [71866, 71898], [71898, 71866], [71867, 71899], [71899, 71867], [71868, 71900], [71900, 71868], [71869, 71901], [71901, 71869], [71870, 71902], [71902, 71870], [71871, 71903], [71903, 71871], [93760, 93792], [93792, 93760], [93761, 93793], [93793, 93761], [93762, 93794], [93794, 93762], [93763, 93795], [93795, 93763], [93764, 93796], [93796, 93764], [93765, 93797], [93797, 93765], [93766, 93798], [93798, 93766], [93767, 93799], [93799, 93767], [93768, 93800], [93800, 93768], [93769, 93801], [93801, 93769], [93770, 93802], [93802, 93770], [93771, 93803], [93803, 93771], [93772, 93804], [93804, 93772], [93773, 93805], [93805, 93773], [93774, 93806], [93806, 93774], [93775, 93807], [93807, 93775], [93776, 93808], [93808, 93776], [93777, 93809], [93809, 93777], [93778, 93810], [93810, 93778], [93779, 93811], [93811, 93779], [93780, 93812], [93812, 93780], [93781, 93813], [93813, 93781], [93782, 93814], [93814, 93782], [93783, 93815], [93815, 93783], [93784, 93816], [93816, 93784], [93785, 93817], [93817, 93785], [93786, 93818], [93818, 93786], [93787, 93819], [93819, 93787], [93788, 93820], [93820, 93788], [93789, 93821], [93821, 93789], [93790, 93822], [93822, 93790], [93791, 93823], [93823, 93791], [125184, 125218], [125218, 125184], [125185, 125219], [125219, 125185], [125186, 125220], [125220, 125186], [125187, 125221], [125221, 125187], [125188, 125222], [125222, 125188], [125189, 125223], [125223, 125189], [125190, 125224], [125224, 125190], [125191, 125225], [125225, 125191], [125192, 125226], [125226, 125192], [125193, 125227], [125227, 125193], [125194, 125228], [125228, 125194], [125195, 125229], [125229, 125195], [125196, 125230], [125230, 125196], [125197, 125231], [125231, 125197], [125198, 125232], [125232, 125198], [125199, 125233], [125233, 125199], [125200, 125234], [125234, 125200], [125201, 125235], [125235, 125201], [125202, 125236], [125236, 125202], [125203, 125237], [125237, 125203], [125204, 125238], [125238, 125204], [125205, 125239], [125239, 125205], [125206, 125240], [125240, 125206], [125207, 125241], [125241, 125207], [125208, 125242], [125242, 125208], [125209, 125243], [125243, 125209], [125210, 125244], [125244, 125210], [125211, 125245], [125245, 125211], [125212, 125246], [125246, 125212], [125213, 125247], [125247, 125213], [125214, 125248], [125248, 125214], [125215, 125249], [125249, 125215], [125216, 125250], [125250, 125216], [125217, 125251], [125251, 125217]]))();\n  static C = [[0, 31, 1], [127, 159, 1], [173, 888, 715], [889, 896, 7], [897, 899, 1], [907, 909, 2], [930, 1328, 398], [1367, 1368, 1], [1419, 1420, 1], [1424, 1480, 56], [1481, 1487, 1], [1515, 1518, 1], [1525, 1541, 1], [1564, 1757, 193], [1806, 1807, 1], [1867, 1868, 1], [1970, 1983, 1], [2043, 2044, 1], [2094, 2095, 1], [2111, 2140, 29], [2141, 2143, 2], [2155, 2159, 1], [2191, 2198, 1], [2274, 2436, 162], [2445, 2446, 1], [2449, 2450, 1], [2473, 2481, 8], [2483, 2485, 1], [2490, 2491, 1], [2501, 2502, 1], [2505, 2506, 1], [2511, 2518, 1], [2520, 2523, 1], [2526, 2532, 6], [2533, 2559, 26], [2560, 2564, 4], [2571, 2574, 1], [2577, 2578, 1], [2601, 2609, 8], [2612, 2618, 3], [2619, 2621, 2], [2627, 2630, 1], [2633, 2634, 1], [2638, 2640, 1], [2642, 2648, 1], [2653, 2655, 2], [2656, 2661, 1], [2679, 2688, 1], [2692, 2702, 10], [2706, 2729, 23], [2737, 2740, 3], [2746, 2747, 1], [2758, 2766, 4], [2767, 2769, 2], [2770, 2783, 1], [2788, 2789, 1], [2802, 2808, 1], [2816, 2820, 4], [2829, 2830, 1], [2833, 2834, 1], [2857, 2865, 8], [2868, 2874, 6], [2875, 2885, 10], [2886, 2889, 3], [2890, 2894, 4], [2895, 2900, 1], [2904, 2907, 1], [2910, 2916, 6], [2917, 2936, 19], [2937, 2945, 1], [2948, 2955, 7], [2956, 2957, 1], [2961, 2966, 5], [2967, 2968, 1], [2971, 2973, 2], [2976, 2978, 1], [2981, 2983, 1], [2987, 2989, 1], [3002, 3005, 1], [3011, 3013, 1], [3017, 3022, 5], [3023, 3025, 2], [3026, 3030, 1], [3032, 3045, 1], [3067, 3071, 1], [3085, 3089, 4], [3113, 3130, 17], [3131, 3141, 10], [3145, 3150, 5], [3151, 3156, 1], [3159, 3163, 4], [3164, 3166, 2], [3167, 3172, 5], [3173, 3184, 11], [3185, 3190, 1], [3213, 3217, 4], [3241, 3252, 11], [3258, 3259, 1], [3269, 3273, 4], [3278, 3284, 1], [3287, 3292, 1], [3295, 3300, 5], [3301, 3312, 11], [3316, 3327, 1], [3341, 3345, 4], [3397, 3401, 4], [3408, 3411, 1], [3428, 3429, 1], [3456, 3460, 4], [3479, 3481, 1], [3506, 3516, 10], [3518, 3519, 1], [3527, 3529, 1], [3531, 3534, 1], [3541, 3543, 2], [3552, 3557, 1], [3568, 3569, 1], [3573, 3584, 1], [3643, 3646, 1], [3676, 3712, 1], [3715, 3717, 2], [3723, 3748, 25], [3750, 3774, 24], [3775, 3781, 6], [3783, 3791, 8], [3802, 3803, 1], [3808, 3839, 1], [3912, 3949, 37], [3950, 3952, 1], [3992, 4029, 37], [4045, 4059, 14], [4060, 4095, 1], [4294, 4296, 2], [4297, 4300, 1], [4302, 4303, 1], [4681, 4686, 5], [4687, 4695, 8], [4697, 4702, 5], [4703, 4745, 42], [4750, 4751, 1], [4785, 4790, 5], [4791, 4799, 8], [4801, 4806, 5], [4807, 4823, 16], [4881, 4886, 5], [4887, 4955, 68], [4956, 4989, 33], [4990, 4991, 1], [5018, 5023, 1], [5110, 5111, 1], [5118, 5119, 1], [5789, 5791, 1], [5881, 5887, 1], [5910, 5918, 1], [5943, 5951, 1], [5972, 5983, 1], [5997, 6001, 4], [6004, 6015, 1], [6110, 6111, 1], [6122, 6127, 1], [6138, 6143, 1], [6158, 6170, 12], [6171, 6175, 1], [6265, 6271, 1], [6315, 6319, 1], [6390, 6399, 1], [6431, 6444, 13], [6445, 6447, 1], [6460, 6463, 1], [6465, 6467, 1], [6510, 6511, 1], [6517, 6527, 1], [6572, 6575, 1], [6602, 6607, 1], [6619, 6621, 1], [6684, 6685, 1], [6751, 6781, 30], [6782, 6794, 12], [6795, 6799, 1], [6810, 6815, 1], [6830, 6831, 1], [6863, 6911, 1], [6989, 7156, 167], [7157, 7163, 1], [7224, 7226, 1], [7242, 7244, 1], [7307, 7311, 1], [7355, 7356, 1], [7368, 7375, 1], [7419, 7423, 1], [7958, 7959, 1], [7966, 7967, 1], [8006, 8007, 1], [8014, 8015, 1], [8024, 8030, 2], [8062, 8063, 1], [8117, 8133, 16], [8148, 8149, 1], [8156, 8176, 20], [8177, 8181, 4], [8191, 8203, 12], [8204, 8207, 1], [8234, 8238, 1], [8288, 8303, 1], [8306, 8307, 1], [8335, 8349, 14], [8350, 8351, 1], [8385, 8399, 1], [8433, 8447, 1], [8588, 8591, 1], [9258, 9279, 1], [9291, 9311, 1], [11124, 11125, 1], [11158, 11508, 350], [11509, 11512, 1], [11558, 11560, 2], [11561, 11564, 1], [11566, 11567, 1], [11624, 11630, 1], [11633, 11646, 1], [11671, 11679, 1], [11687, 11743, 8], [11870, 11903, 1], [11930, 12020, 90], [12021, 12031, 1], [12246, 12271, 1], [12352, 12439, 87], [12440, 12544, 104], [12545, 12548, 1], [12592, 12687, 95], [12774, 12782, 1], [12831, 42125, 29294], [42126, 42127, 1], [42183, 42191, 1], [42540, 42559, 1], [42744, 42751, 1], [42958, 42959, 1], [42962, 42964, 2], [42973, 42993, 1], [43053, 43055, 1], [43066, 43071, 1], [43128, 43135, 1], [43206, 43213, 1], [43226, 43231, 1], [43348, 43358, 1], [43389, 43391, 1], [43470, 43482, 12], [43483, 43485, 1], [43519, 43575, 56], [43576, 43583, 1], [43598, 43599, 1], [43610, 43611, 1], [43715, 43738, 1], [43767, 43776, 1], [43783, 43784, 1], [43791, 43792, 1], [43799, 43807, 1], [43815, 43823, 8], [43884, 43887, 1], [44014, 44015, 1], [44026, 44031, 1], [55204, 55215, 1], [55239, 55242, 1], [55292, 63743, 1], [64110, 64111, 1], [64218, 64255, 1], [64263, 64274, 1], [64280, 64284, 1], [64311, 64317, 6], [64319, 64325, 3], [64451, 64466, 1], [64912, 64913, 1], [64968, 64974, 1], [64976, 65007, 1], [65050, 65055, 1], [65107, 65127, 20], [65132, 65135, 1], [65141, 65277, 136], [65278, 65280, 1], [65471, 65473, 1], [65480, 65481, 1], [65488, 65489, 1], [65496, 65497, 1], [65501, 65503, 1], [65511, 65519, 8], [65520, 65531, 1], [65534, 65535, 1], [65548, 65575, 27], [65595, 65598, 3], [65614, 65615, 1], [65630, 65663, 1], [65787, 65791, 1], [65795, 65798, 1], [65844, 65846, 1], [65935, 65949, 14], [65950, 65951, 1], [65953, 65999, 1], [66046, 66175, 1], [66205, 66207, 1], [66257, 66271, 1], [66300, 66303, 1], [66340, 66348, 1], [66379, 66383, 1], [66427, 66431, 1], [66462, 66500, 38], [66501, 66503, 1], [66518, 66559, 1], [66718, 66719, 1], [66730, 66735, 1], [66772, 66775, 1], [66812, 66815, 1], [66856, 66863, 1], [66916, 66926, 1], [66939, 66955, 16], [66963, 66966, 3], [66978, 66994, 16], [67002, 67005, 3], [67006, 67007, 1], [67060, 67071, 1], [67383, 67391, 1], [67414, 67423, 1], [67432, 67455, 1], [67462, 67505, 43], [67515, 67583, 1], [67590, 67591, 1], [67593, 67638, 45], [67641, 67643, 1], [67645, 67646, 1], [67670, 67743, 73], [67744, 67750, 1], [67760, 67807, 1], [67827, 67830, 3], [67831, 67834, 1], [67868, 67870, 1], [67898, 67902, 1], [67904, 67967, 1], [68024, 68027, 1], [68048, 68049, 1], [68100, 68103, 3], [68104, 68107, 1], [68116, 68120, 4], [68150, 68151, 1], [68155, 68158, 1], [68169, 68175, 1], [68185, 68191, 1], [68256, 68287, 1], [68327, 68330, 1], [68343, 68351, 1], [68406, 68408, 1], [68438, 68439, 1], [68467, 68471, 1], [68498, 68504, 1], [68509, 68520, 1], [68528, 68607, 1], [68681, 68735, 1], [68787, 68799, 1], [68851, 68857, 1], [68904, 68911, 1], [68922, 68927, 1], [68966, 68968, 1], [68998, 69005, 1], [69008, 69215, 1], [69247, 69290, 43], [69294, 69295, 1], [69298, 69313, 1], [69317, 69371, 1], [69416, 69423, 1], [69466, 69487, 1], [69514, 69551, 1], [69580, 69599, 1], [69623, 69631, 1], [69710, 69713, 1], [69750, 69758, 1], [69821, 69827, 6], [69828, 69839, 1], [69865, 69871, 1], [69882, 69887, 1], [69941, 69960, 19], [69961, 69967, 1], [70007, 70015, 1], [70112, 70133, 21], [70134, 70143, 1], [70162, 70210, 48], [70211, 70271, 1], [70279, 70281, 2], [70286, 70302, 16], [70314, 70319, 1], [70379, 70383, 1], [70394, 70399, 1], [70404, 70413, 9], [70414, 70417, 3], [70418, 70441, 23], [70449, 70452, 3], [70458, 70469, 11], [70470, 70473, 3], [70474, 70478, 4], [70479, 70481, 2], [70482, 70486, 1], [70488, 70492, 1], [70500, 70501, 1], [70509, 70511, 1], [70517, 70527, 1], [70538, 70540, 2], [70541, 70543, 2], [70582, 70593, 11], [70595, 70596, 1], [70598, 70603, 5], [70614, 70617, 3], [70618, 70624, 1], [70627, 70655, 1], [70748, 70754, 6], [70755, 70783, 1], [70856, 70863, 1], [70874, 71039, 1], [71094, 71095, 1], [71134, 71167, 1], [71237, 71247, 1], [71258, 71263, 1], [71277, 71295, 1], [71354, 71359, 1], [71370, 71375, 1], [71396, 71423, 1], [71451, 71452, 1], [71468, 71471, 1], [71495, 71679, 1], [71740, 71839, 1], [71923, 71934, 1], [71943, 71944, 1], [71946, 71947, 1], [71956, 71959, 3], [71990, 71993, 3], [71994, 72007, 13], [72008, 72015, 1], [72026, 72095, 1], [72104, 72105, 1], [72152, 72153, 1], [72165, 72191, 1], [72264, 72271, 1], [72355, 72367, 1], [72441, 72447, 1], [72458, 72639, 1], [72674, 72687, 1], [72698, 72703, 1], [72713, 72759, 46], [72774, 72783, 1], [72813, 72815, 1], [72848, 72849, 1], [72872, 72887, 15], [72888, 72959, 1], [72967, 72970, 3], [73015, 73017, 1], [73019, 73022, 3], [73032, 73039, 1], [73050, 73055, 1], [73062, 73065, 3], [73103, 73106, 3], [73113, 73119, 1], [73130, 73439, 1], [73465, 73471, 1], [73489, 73531, 42], [73532, 73533, 1], [73563, 73647, 1], [73649, 73663, 1], [73714, 73726, 1], [74650, 74751, 1], [74863, 74869, 6], [74870, 74879, 1], [75076, 77711, 1], [77811, 77823, 1], [78896, 78911, 1], [78934, 78943, 1], [82939, 82943, 1], [83527, 90367, 1], [90426, 92159, 1], [92729, 92735, 1], [92767, 92778, 11], [92779, 92781, 1], [92863, 92874, 11], [92875, 92879, 1], [92910, 92911, 1], [92918, 92927, 1], [92998, 93007, 1], [93018, 93026, 8], [93048, 93052, 1], [93072, 93503, 1], [93562, 93759, 1], [93851, 93951, 1], [94027, 94030, 1], [94088, 94094, 1], [94112, 94175, 1], [94181, 94191, 1], [94194, 94207, 1], [100344, 100351, 1], [101590, 101630, 1], [101641, 110575, 1], [110580, 110588, 8], [110591, 110883, 292], [110884, 110897, 1], [110899, 110927, 1], [110931, 110932, 1], [110934, 110947, 1], [110952, 110959, 1], [111356, 113663, 1], [113771, 113775, 1], [113789, 113791, 1], [113801, 113807, 1], [113818, 113819, 1], [113824, 117759, 1], [118010, 118015, 1], [118452, 118527, 1], [118574, 118575, 1], [118599, 118607, 1], [118724, 118783, 1], [119030, 119039, 1], [119079, 119080, 1], [119155, 119162, 1], [119275, 119295, 1], [119366, 119487, 1], [119508, 119519, 1], [119540, 119551, 1], [119639, 119647, 1], [119673, 119807, 1], [119893, 119965, 72], [119968, 119969, 1], [119971, 119972, 1], [119975, 119976, 1], [119981, 119994, 13], [119996, 120004, 8], [120070, 120075, 5], [120076, 120085, 9], [120093, 120122, 29], [120127, 120133, 6], [120135, 120137, 1], [120145, 120486, 341], [120487, 120780, 293], [120781, 121484, 703], [121485, 121498, 1], [121504, 121520, 16], [121521, 122623, 1], [122655, 122660, 1], [122667, 122879, 1], [122887, 122905, 18], [122906, 122914, 8], [122917, 122923, 6], [122924, 122927, 1], [122990, 123022, 1], [123024, 123135, 1], [123181, 123183, 1], [123198, 123199, 1], [123210, 123213, 1], [123216, 123535, 1], [123567, 123583, 1], [123642, 123646, 1], [123648, 124111, 1], [124154, 124367, 1], [124411, 124414, 1], [124416, 124895, 1], [124903, 124908, 5], [124911, 124927, 16], [125125, 125126, 1], [125143, 125183, 1], [125260, 125263, 1], [125274, 125277, 1], [125280, 126064, 1], [126133, 126208, 1], [126270, 126463, 1], [126468, 126496, 28], [126499, 126501, 2], [126502, 126504, 2], [126515, 126520, 5], [126522, 126524, 2], [126525, 126529, 1], [126531, 126534, 1], [126536, 126540, 2], [126544, 126547, 3], [126549, 126550, 1], [126552, 126560, 2], [126563, 126565, 2], [126566, 126571, 5], [126579, 126589, 5], [126591, 126602, 11], [126620, 126624, 1], [126628, 126634, 6], [126652, 126703, 1], [126706, 126975, 1], [127020, 127023, 1], [127124, 127135, 1], [127151, 127152, 1], [127168, 127184, 16], [127222, 127231, 1], [127406, 127461, 1], [127491, 127503, 1], [127548, 127551, 1], [127561, 127567, 1], [127570, 127583, 1], [127590, 127743, 1], [128728, 128731, 1], [128749, 128751, 1], [128765, 128767, 1], [128887, 128890, 1], [128986, 128991, 1], [129004, 129007, 1], [129009, 129023, 1], [129036, 129039, 1], [129096, 129103, 1], [129114, 129119, 1], [129160, 129167, 1], [129198, 129199, 1], [129212, 129215, 1], [129218, 129279, 1], [129620, 129631, 1], [129646, 129647, 1], [129661, 129663, 1], [129674, 129678, 1], [129735, 129741, 1], [129757, 129758, 1], [129770, 129775, 1], [129785, 129791, 1], [129939, 130042, 103], [130043, 131071, 1], [173792, 173823, 1], [177978, 177983, 1], [178206, 178207, 1], [183970, 183983, 1], [191457, 191471, 1], [192094, 194559, 1], [195102, 196607, 1], [201547, 201551, 1], [205744, 917759, 1], [918000, 1114111, 1]];\n  static Cc = [[0, 31, 1], [127, 159, 1]];\n  static Cf = [[173, 1536, 1363], [1537, 1541, 1], [1564, 1757, 193], [1807, 2192, 385], [2193, 2274, 81], [6158, 8203, 2045], [8204, 8207, 1], [8234, 8238, 1], [8288, 8292, 1], [8294, 8303, 1], [65279, 65529, 250], [65530, 65531, 1], [69821, 69837, 16], [78896, 78911, 1], [113824, 113827, 1], [119155, 119162, 1], [917505, 917536, 31], [917537, 917631, 1]];\n  static Co = [[57344, 63743, 1], [983040, 1048573, 1], [1048576, 1114109, 1]];\n  static Cs = [[55296, 57343, 1]];\n  static L = [[65, 90, 1], [97, 122, 1], [170, 181, 11], [186, 192, 6], [193, 214, 1], [216, 246, 1], [248, 705, 1], [710, 721, 1], [736, 740, 1], [748, 750, 2], [880, 884, 1], [886, 887, 1], [890, 893, 1], [895, 902, 7], [904, 906, 1], [908, 910, 2], [911, 929, 1], [931, 1013, 1], [1015, 1153, 1], [1162, 1327, 1], [1329, 1366, 1], [1369, 1376, 7], [1377, 1416, 1], [1488, 1514, 1], [1519, 1522, 1], [1568, 1610, 1], [1646, 1647, 1], [1649, 1747, 1], [1749, 1765, 16], [1766, 1774, 8], [1775, 1786, 11], [1787, 1788, 1], [1791, 1808, 17], [1810, 1839, 1], [1869, 1957, 1], [1969, 1994, 25], [1995, 2026, 1], [2036, 2037, 1], [2042, 2048, 6], [2049, 2069, 1], [2074, 2084, 10], [2088, 2112, 24], [2113, 2136, 1], [2144, 2154, 1], [2160, 2183, 1], [2185, 2190, 1], [2208, 2249, 1], [2308, 2361, 1], [2365, 2384, 19], [2392, 2401, 1], [2417, 2432, 1], [2437, 2444, 1], [2447, 2448, 1], [2451, 2472, 1], [2474, 2480, 1], [2482, 2486, 4], [2487, 2489, 1], [2493, 2510, 17], [2524, 2525, 1], [2527, 2529, 1], [2544, 2545, 1], [2556, 2565, 9], [2566, 2570, 1], [2575, 2576, 1], [2579, 2600, 1], [2602, 2608, 1], [2610, 2611, 1], [2613, 2614, 1], [2616, 2617, 1], [2649, 2652, 1], [2654, 2674, 20], [2675, 2676, 1], [2693, 2701, 1], [2703, 2705, 1], [2707, 2728, 1], [2730, 2736, 1], [2738, 2739, 1], [2741, 2745, 1], [2749, 2768, 19], [2784, 2785, 1], [2809, 2821, 12], [2822, 2828, 1], [2831, 2832, 1], [2835, 2856, 1], [2858, 2864, 1], [2866, 2867, 1], [2869, 2873, 1], [2877, 2908, 31], [2909, 2911, 2], [2912, 2913, 1], [2929, 2947, 18], [2949, 2954, 1], [2958, 2960, 1], [2962, 2965, 1], [2969, 2970, 1], [2972, 2974, 2], [2975, 2979, 4], [2980, 2984, 4], [2985, 2986, 1], [2990, 3001, 1], [3024, 3077, 53], [3078, 3084, 1], [3086, 3088, 1], [3090, 3112, 1], [3114, 3129, 1], [3133, 3160, 27], [3161, 3162, 1], [3165, 3168, 3], [3169, 3200, 31], [3205, 3212, 1], [3214, 3216, 1], [3218, 3240, 1], [3242, 3251, 1], [3253, 3257, 1], [3261, 3293, 32], [3294, 3296, 2], [3297, 3313, 16], [3314, 3332, 18], [3333, 3340, 1], [3342, 3344, 1], [3346, 3386, 1], [3389, 3406, 17], [3412, 3414, 1], [3423, 3425, 1], [3450, 3455, 1], [3461, 3478, 1], [3482, 3505, 1], [3507, 3515, 1], [3517, 3520, 3], [3521, 3526, 1], [3585, 3632, 1], [3634, 3635, 1], [3648, 3654, 1], [3713, 3714, 1], [3716, 3718, 2], [3719, 3722, 1], [3724, 3747, 1], [3749, 3751, 2], [3752, 3760, 1], [3762, 3763, 1], [3773, 3776, 3], [3777, 3780, 1], [3782, 3804, 22], [3805, 3807, 1], [3840, 3904, 64], [3905, 3911, 1], [3913, 3948, 1], [3976, 3980, 1], [4096, 4138, 1], [4159, 4176, 17], [4177, 4181, 1], [4186, 4189, 1], [4193, 4197, 4], [4198, 4206, 8], [4207, 4208, 1], [4213, 4225, 1], [4238, 4256, 18], [4257, 4293, 1], [4295, 4301, 6], [4304, 4346, 1], [4348, 4680, 1], [4682, 4685, 1], [4688, 4694, 1], [4696, 4698, 2], [4699, 4701, 1], [4704, 4744, 1], [4746, 4749, 1], [4752, 4784, 1], [4786, 4789, 1], [4792, 4798, 1], [4800, 4802, 2], [4803, 4805, 1], [4808, 4822, 1], [4824, 4880, 1], [4882, 4885, 1], [4888, 4954, 1], [4992, 5007, 1], [5024, 5109, 1], [5112, 5117, 1], [5121, 5740, 1], [5743, 5759, 1], [5761, 5786, 1], [5792, 5866, 1], [5873, 5880, 1], [5888, 5905, 1], [5919, 5937, 1], [5952, 5969, 1], [5984, 5996, 1], [5998, 6000, 1], [6016, 6067, 1], [6103, 6108, 5], [6176, 6264, 1], [6272, 6276, 1], [6279, 6312, 1], [6314, 6320, 6], [6321, 6389, 1], [6400, 6430, 1], [6480, 6509, 1], [6512, 6516, 1], [6528, 6571, 1], [6576, 6601, 1], [6656, 6678, 1], [6688, 6740, 1], [6823, 6917, 94], [6918, 6963, 1], [6981, 6988, 1], [7043, 7072, 1], [7086, 7087, 1], [7098, 7141, 1], [7168, 7203, 1], [7245, 7247, 1], [7258, 7293, 1], [7296, 7306, 1], [7312, 7354, 1], [7357, 7359, 1], [7401, 7404, 1], [7406, 7411, 1], [7413, 7414, 1], [7418, 7424, 6], [7425, 7615, 1], [7680, 7957, 1], [7960, 7965, 1], [7968, 8005, 1], [8008, 8013, 1], [8016, 8023, 1], [8025, 8031, 2], [8032, 8061, 1], [8064, 8116, 1], [8118, 8124, 1], [8126, 8130, 4], [8131, 8132, 1], [8134, 8140, 1], [8144, 8147, 1], [8150, 8155, 1], [8160, 8172, 1], [8178, 8180, 1], [8182, 8188, 1], [8305, 8319, 14], [8336, 8348, 1], [8450, 8455, 5], [8458, 8467, 1], [8469, 8473, 4], [8474, 8477, 1], [8484, 8490, 2], [8491, 8493, 1], [8495, 8505, 1], [8508, 8511, 1], [8517, 8521, 1], [8526, 8579, 53], [8580, 11264, 2684], [11265, 11492, 1], [11499, 11502, 1], [11506, 11507, 1], [11520, 11557, 1], [11559, 11565, 6], [11568, 11623, 1], [11631, 11648, 17], [11649, 11670, 1], [11680, 11686, 1], [11688, 11694, 1], [11696, 11702, 1], [11704, 11710, 1], [11712, 11718, 1], [11720, 11726, 1], [11728, 11734, 1], [11736, 11742, 1], [11823, 12293, 470], [12294, 12337, 43], [12338, 12341, 1], [12347, 12348, 1], [12353, 12438, 1], [12445, 12447, 1], [12449, 12538, 1], [12540, 12543, 1], [12549, 12591, 1], [12593, 12686, 1], [12704, 12735, 1], [12784, 12799, 1], [13312, 19903, 1], [19968, 42124, 1], [42192, 42237, 1], [42240, 42508, 1], [42512, 42527, 1], [42538, 42539, 1], [42560, 42606, 1], [42623, 42653, 1], [42656, 42725, 1], [42775, 42783, 1], [42786, 42888, 1], [42891, 42957, 1], [42960, 42961, 1], [42963, 42965, 2], [42966, 42972, 1], [42994, 43009, 1], [43011, 43013, 1], [43015, 43018, 1], [43020, 43042, 1], [43072, 43123, 1], [43138, 43187, 1], [43250, 43255, 1], [43259, 43261, 2], [43262, 43274, 12], [43275, 43301, 1], [43312, 43334, 1], [43360, 43388, 1], [43396, 43442, 1], [43471, 43488, 17], [43489, 43492, 1], [43494, 43503, 1], [43514, 43518, 1], [43520, 43560, 1], [43584, 43586, 1], [43588, 43595, 1], [43616, 43638, 1], [43642, 43646, 4], [43647, 43695, 1], [43697, 43701, 4], [43702, 43705, 3], [43706, 43709, 1], [43712, 43714, 2], [43739, 43741, 1], [43744, 43754, 1], [43762, 43764, 1], [43777, 43782, 1], [43785, 43790, 1], [43793, 43798, 1], [43808, 43814, 1], [43816, 43822, 1], [43824, 43866, 1], [43868, 43881, 1], [43888, 44002, 1], [44032, 55203, 1], [55216, 55238, 1], [55243, 55291, 1], [63744, 64109, 1], [64112, 64217, 1], [64256, 64262, 1], [64275, 64279, 1], [64285, 64287, 2], [64288, 64296, 1], [64298, 64310, 1], [64312, 64316, 1], [64318, 64320, 2], [64321, 64323, 2], [64324, 64326, 2], [64327, 64433, 1], [64467, 64829, 1], [64848, 64911, 1], [64914, 64967, 1], [65008, 65019, 1], [65136, 65140, 1], [65142, 65276, 1], [65313, 65338, 1], [65345, 65370, 1], [65382, 65470, 1], [65474, 65479, 1], [65482, 65487, 1], [65490, 65495, 1], [65498, 65500, 1], [65536, 65547, 1], [65549, 65574, 1], [65576, 65594, 1], [65596, 65597, 1], [65599, 65613, 1], [65616, 65629, 1], [65664, 65786, 1], [66176, 66204, 1], [66208, 66256, 1], [66304, 66335, 1], [66349, 66368, 1], [66370, 66377, 1], [66384, 66421, 1], [66432, 66461, 1], [66464, 66499, 1], [66504, 66511, 1], [66560, 66717, 1], [66736, 66771, 1], [66776, 66811, 1], [66816, 66855, 1], [66864, 66915, 1], [66928, 66938, 1], [66940, 66954, 1], [66956, 66962, 1], [66964, 66965, 1], [66967, 66977, 1], [66979, 66993, 1], [66995, 67001, 1], [67003, 67004, 1], [67008, 67059, 1], [67072, 67382, 1], [67392, 67413, 1], [67424, 67431, 1], [67456, 67461, 1], [67463, 67504, 1], [67506, 67514, 1], [67584, 67589, 1], [67592, 67594, 2], [67595, 67637, 1], [67639, 67640, 1], [67644, 67647, 3], [67648, 67669, 1], [67680, 67702, 1], [67712, 67742, 1], [67808, 67826, 1], [67828, 67829, 1], [67840, 67861, 1], [67872, 67897, 1], [67968, 68023, 1], [68030, 68031, 1], [68096, 68112, 16], [68113, 68115, 1], [68117, 68119, 1], [68121, 68149, 1], [68192, 68220, 1], [68224, 68252, 1], [68288, 68295, 1], [68297, 68324, 1], [68352, 68405, 1], [68416, 68437, 1], [68448, 68466, 1], [68480, 68497, 1], [68608, 68680, 1], [68736, 68786, 1], [68800, 68850, 1], [68864, 68899, 1], [68938, 68965, 1], [68975, 68997, 1], [69248, 69289, 1], [69296, 69297, 1], [69314, 69316, 1], [69376, 69404, 1], [69415, 69424, 9], [69425, 69445, 1], [69488, 69505, 1], [69552, 69572, 1], [69600, 69622, 1], [69635, 69687, 1], [69745, 69746, 1], [69749, 69763, 14], [69764, 69807, 1], [69840, 69864, 1], [69891, 69926, 1], [69956, 69959, 3], [69968, 70002, 1], [70006, 70019, 13], [70020, 70066, 1], [70081, 70084, 1], [70106, 70108, 2], [70144, 70161, 1], [70163, 70187, 1], [70207, 70208, 1], [70272, 70278, 1], [70280, 70282, 2], [70283, 70285, 1], [70287, 70301, 1], [70303, 70312, 1], [70320, 70366, 1], [70405, 70412, 1], [70415, 70416, 1], [70419, 70440, 1], [70442, 70448, 1], [70450, 70451, 1], [70453, 70457, 1], [70461, 70480, 19], [70493, 70497, 1], [70528, 70537, 1], [70539, 70542, 3], [70544, 70581, 1], [70583, 70609, 26], [70611, 70656, 45], [70657, 70708, 1], [70727, 70730, 1], [70751, 70753, 1], [70784, 70831, 1], [70852, 70853, 1], [70855, 71040, 185], [71041, 71086, 1], [71128, 71131, 1], [71168, 71215, 1], [71236, 71296, 60], [71297, 71338, 1], [71352, 71424, 72], [71425, 71450, 1], [71488, 71494, 1], [71680, 71723, 1], [71840, 71903, 1], [71935, 71942, 1], [71945, 71948, 3], [71949, 71955, 1], [71957, 71958, 1], [71960, 71983, 1], [71999, 72001, 2], [72096, 72103, 1], [72106, 72144, 1], [72161, 72163, 2], [72192, 72203, 11], [72204, 72242, 1], [72250, 72272, 22], [72284, 72329, 1], [72349, 72368, 19], [72369, 72440, 1], [72640, 72672, 1], [72704, 72712, 1], [72714, 72750, 1], [72768, 72818, 50], [72819, 72847, 1], [72960, 72966, 1], [72968, 72969, 1], [72971, 73008, 1], [73030, 73056, 26], [73057, 73061, 1], [73063, 73064, 1], [73066, 73097, 1], [73112, 73440, 328], [73441, 73458, 1], [73474, 73476, 2], [73477, 73488, 1], [73490, 73523, 1], [73648, 73728, 80], [73729, 74649, 1], [74880, 75075, 1], [77712, 77808, 1], [77824, 78895, 1], [78913, 78918, 1], [78944, 82938, 1], [82944, 83526, 1], [90368, 90397, 1], [92160, 92728, 1], [92736, 92766, 1], [92784, 92862, 1], [92880, 92909, 1], [92928, 92975, 1], [92992, 92995, 1], [93027, 93047, 1], [93053, 93071, 1], [93504, 93548, 1], [93760, 93823, 1], [93952, 94026, 1], [94032, 94099, 67], [94100, 94111, 1], [94176, 94177, 1], [94179, 94208, 29], [94209, 100343, 1], [100352, 101589, 1], [101631, 101640, 1], [110576, 110579, 1], [110581, 110587, 1], [110589, 110590, 1], [110592, 110882, 1], [110898, 110928, 30], [110929, 110930, 1], [110933, 110948, 15], [110949, 110951, 1], [110960, 111355, 1], [113664, 113770, 1], [113776, 113788, 1], [113792, 113800, 1], [113808, 113817, 1], [119808, 119892, 1], [119894, 119964, 1], [119966, 119967, 1], [119970, 119973, 3], [119974, 119977, 3], [119978, 119980, 1], [119982, 119993, 1], [119995, 119997, 2], [119998, 120003, 1], [120005, 120069, 1], [120071, 120074, 1], [120077, 120084, 1], [120086, 120092, 1], [120094, 120121, 1], [120123, 120126, 1], [120128, 120132, 1], [120134, 120138, 4], [120139, 120144, 1], [120146, 120485, 1], [120488, 120512, 1], [120514, 120538, 1], [120540, 120570, 1], [120572, 120596, 1], [120598, 120628, 1], [120630, 120654, 1], [120656, 120686, 1], [120688, 120712, 1], [120714, 120744, 1], [120746, 120770, 1], [120772, 120779, 1], [122624, 122654, 1], [122661, 122666, 1], [122928, 122989, 1], [123136, 123180, 1], [123191, 123197, 1], [123214, 123536, 322], [123537, 123565, 1], [123584, 123627, 1], [124112, 124139, 1], [124368, 124397, 1], [124400, 124896, 496], [124897, 124902, 1], [124904, 124907, 1], [124909, 124910, 1], [124912, 124926, 1], [124928, 125124, 1], [125184, 125251, 1], [125259, 126464, 1205], [126465, 126467, 1], [126469, 126495, 1], [126497, 126498, 1], [126500, 126503, 3], [126505, 126514, 1], [126516, 126519, 1], [126521, 126523, 2], [126530, 126535, 5], [126537, 126541, 2], [126542, 126543, 1], [126545, 126546, 1], [126548, 126551, 3], [126553, 126561, 2], [126562, 126564, 2], [126567, 126570, 1], [126572, 126578, 1], [126580, 126583, 1], [126585, 126588, 1], [126590, 126592, 2], [126593, 126601, 1], [126603, 126619, 1], [126625, 126627, 1], [126629, 126633, 1], [126635, 126651, 1], [131072, 173791, 1], [173824, 177977, 1], [177984, 178205, 1], [178208, 183969, 1], [183984, 191456, 1], [191472, 192093, 1], [194560, 195101, 1], [196608, 201546, 1], [201552, 205743, 1]];\n  static foldL = [[837, 837, 1]];\n  static Ll = [[97, 122, 1], [181, 223, 42], [224, 246, 1], [248, 255, 1], [257, 311, 2], [312, 328, 2], [329, 375, 2], [378, 382, 2], [383, 384, 1], [387, 389, 2], [392, 396, 4], [397, 402, 5], [405, 409, 4], [410, 411, 1], [414, 417, 3], [419, 421, 2], [424, 426, 2], [427, 429, 2], [432, 436, 4], [438, 441, 3], [442, 445, 3], [446, 447, 1], [454, 460, 3], [462, 476, 2], [477, 495, 2], [496, 499, 3], [501, 505, 4], [507, 563, 2], [564, 569, 1], [572, 575, 3], [576, 578, 2], [583, 591, 2], [592, 659, 1], [661, 687, 1], [881, 883, 2], [887, 891, 4], [892, 893, 1], [912, 940, 28], [941, 974, 1], [976, 977, 1], [981, 983, 1], [985, 1007, 2], [1008, 1011, 1], [1013, 1019, 3], [1020, 1072, 52], [1073, 1119, 1], [1121, 1153, 2], [1163, 1215, 2], [1218, 1230, 2], [1231, 1327, 2], [1376, 1416, 1], [4304, 4346, 1], [4349, 4351, 1], [5112, 5117, 1], [7296, 7304, 1], [7306, 7424, 118], [7425, 7467, 1], [7531, 7543, 1], [7545, 7578, 1], [7681, 7829, 2], [7830, 7837, 1], [7839, 7935, 2], [7936, 7943, 1], [7952, 7957, 1], [7968, 7975, 1], [7984, 7991, 1], [8000, 8005, 1], [8016, 8023, 1], [8032, 8039, 1], [8048, 8061, 1], [8064, 8071, 1], [8080, 8087, 1], [8096, 8103, 1], [8112, 8116, 1], [8118, 8119, 1], [8126, 8130, 4], [8131, 8132, 1], [8134, 8135, 1], [8144, 8147, 1], [8150, 8151, 1], [8160, 8167, 1], [8178, 8180, 1], [8182, 8183, 1], [8458, 8462, 4], [8463, 8467, 4], [8495, 8505, 5], [8508, 8509, 1], [8518, 8521, 1], [8526, 8580, 54], [11312, 11359, 1], [11361, 11365, 4], [11366, 11372, 2], [11377, 11379, 2], [11380, 11382, 2], [11383, 11387, 1], [11393, 11491, 2], [11492, 11500, 8], [11502, 11507, 5], [11520, 11557, 1], [11559, 11565, 6], [42561, 42605, 2], [42625, 42651, 2], [42787, 42799, 2], [42800, 42801, 1], [42803, 42865, 2], [42866, 42872, 1], [42874, 42876, 2], [42879, 42887, 2], [42892, 42894, 2], [42897, 42899, 2], [42900, 42901, 1], [42903, 42921, 2], [42927, 42933, 6], [42935, 42947, 2], [42952, 42954, 2], [42957, 42961, 4], [42963, 42971, 2], [42998, 43002, 4], [43824, 43866, 1], [43872, 43880, 1], [43888, 43967, 1], [64256, 64262, 1], [64275, 64279, 1], [65345, 65370, 1], [66600, 66639, 1], [66776, 66811, 1], [66967, 66977, 1], [66979, 66993, 1], [66995, 67001, 1], [67003, 67004, 1], [68800, 68850, 1], [68976, 68997, 1], [71872, 71903, 1], [93792, 93823, 1], [119834, 119859, 1], [119886, 119892, 1], [119894, 119911, 1], [119938, 119963, 1], [119990, 119993, 1], [119995, 119997, 2], [119998, 120003, 1], [120005, 120015, 1], [120042, 120067, 1], [120094, 120119, 1], [120146, 120171, 1], [120198, 120223, 1], [120250, 120275, 1], [120302, 120327, 1], [120354, 120379, 1], [120406, 120431, 1], [120458, 120485, 1], [120514, 120538, 1], [120540, 120545, 1], [120572, 120596, 1], [120598, 120603, 1], [120630, 120654, 1], [120656, 120661, 1], [120688, 120712, 1], [120714, 120719, 1], [120746, 120770, 1], [120772, 120777, 1], [120779, 122624, 1845], [122625, 122633, 1], [122635, 122654, 1], [122661, 122666, 1], [125218, 125251, 1]];\n  static foldLl = [[65, 90, 1], [192, 214, 1], [216, 222, 1], [256, 302, 2], [306, 310, 2], [313, 327, 2], [330, 376, 2], [377, 381, 2], [385, 386, 1], [388, 390, 2], [391, 393, 2], [394, 395, 1], [398, 401, 1], [403, 404, 1], [406, 408, 1], [412, 413, 1], [415, 416, 1], [418, 422, 2], [423, 425, 2], [428, 430, 2], [431, 433, 2], [434, 435, 1], [437, 439, 2], [440, 444, 4], [452, 453, 1], [455, 456, 1], [458, 459, 1], [461, 475, 2], [478, 494, 2], [497, 498, 1], [500, 502, 2], [503, 504, 1], [506, 562, 2], [570, 571, 1], [573, 574, 1], [577, 579, 2], [580, 582, 1], [584, 590, 2], [837, 880, 43], [882, 886, 4], [895, 902, 7], [904, 906, 1], [908, 910, 2], [911, 913, 2], [914, 929, 1], [931, 939, 1], [975, 984, 9], [986, 1006, 2], [1012, 1015, 3], [1017, 1018, 1], [1021, 1071, 1], [1120, 1152, 2], [1162, 1216, 2], [1217, 1229, 2], [1232, 1326, 2], [1329, 1366, 1], [4256, 4293, 1], [4295, 4301, 6], [5024, 5109, 1], [7305, 7312, 7], [7313, 7354, 1], [7357, 7359, 1], [7680, 7828, 2], [7838, 7934, 2], [7944, 7951, 1], [7960, 7965, 1], [7976, 7983, 1], [7992, 7999, 1], [8008, 8013, 1], [8025, 8031, 2], [8040, 8047, 1], [8072, 8079, 1], [8088, 8095, 1], [8104, 8111, 1], [8120, 8124, 1], [8136, 8140, 1], [8152, 8155, 1], [8168, 8172, 1], [8184, 8188, 1], [8486, 8490, 4], [8491, 8498, 7], [8579, 11264, 2685], [11265, 11311, 1], [11360, 11362, 2], [11363, 11364, 1], [11367, 11373, 2], [11374, 11376, 1], [11378, 11381, 3], [11390, 11392, 1], [11394, 11490, 2], [11499, 11501, 2], [11506, 42560, 31054], [42562, 42604, 2], [42624, 42650, 2], [42786, 42798, 2], [42802, 42862, 2], [42873, 42877, 2], [42878, 42886, 2], [42891, 42893, 2], [42896, 42898, 2], [42902, 42922, 2], [42923, 42926, 1], [42928, 42932, 1], [42934, 42948, 2], [42949, 42951, 1], [42953, 42955, 2], [42956, 42960, 4], [42966, 42972, 2], [42997, 65313, 22316], [65314, 65338, 1], [66560, 66599, 1], [66736, 66771, 1], [66928, 66938, 1], [66940, 66954, 1], [66956, 66962, 1], [66964, 66965, 1], [68736, 68786, 1], [68944, 68965, 1], [71840, 71871, 1], [93760, 93791, 1], [125184, 125217, 1]];\n  static Lm = [[688, 705, 1], [710, 721, 1], [736, 740, 1], [748, 750, 2], [884, 890, 6], [1369, 1600, 231], [1765, 1766, 1], [2036, 2037, 1], [2042, 2074, 32], [2084, 2088, 4], [2249, 2417, 168], [3654, 3782, 128], [4348, 6103, 1755], [6211, 6823, 612], [7288, 7293, 1], [7468, 7530, 1], [7544, 7579, 35], [7580, 7615, 1], [8305, 8319, 14], [8336, 8348, 1], [11388, 11389, 1], [11631, 11823, 192], [12293, 12337, 44], [12338, 12341, 1], [12347, 12445, 98], [12446, 12540, 94], [12541, 12542, 1], [40981, 42232, 1251], [42233, 42237, 1], [42508, 42623, 115], [42652, 42653, 1], [42775, 42783, 1], [42864, 42888, 24], [42994, 42996, 1], [43000, 43001, 1], [43471, 43494, 23], [43632, 43741, 109], [43763, 43764, 1], [43868, 43871, 1], [43881, 65392, 21511], [65438, 65439, 1], [67456, 67461, 1], [67463, 67504, 1], [67506, 67514, 1], [68942, 68975, 33], [92992, 92995, 1], [93504, 93506, 1], [93547, 93548, 1], [94099, 94111, 1], [94176, 94177, 1], [94179, 110576, 16397], [110577, 110579, 1], [110581, 110587, 1], [110589, 110590, 1], [122928, 122989, 1], [123191, 123197, 1], [124139, 125259, 1120]];\n  static Lo = [[170, 186, 16], [443, 448, 5], [449, 451, 1], [660, 1488, 828], [1489, 1514, 1], [1519, 1522, 1], [1568, 1599, 1], [1601, 1610, 1], [1646, 1647, 1], [1649, 1747, 1], [1749, 1774, 25], [1775, 1786, 11], [1787, 1788, 1], [1791, 1808, 17], [1810, 1839, 1], [1869, 1957, 1], [1969, 1994, 25], [1995, 2026, 1], [2048, 2069, 1], [2112, 2136, 1], [2144, 2154, 1], [2160, 2183, 1], [2185, 2190, 1], [2208, 2248, 1], [2308, 2361, 1], [2365, 2384, 19], [2392, 2401, 1], [2418, 2432, 1], [2437, 2444, 1], [2447, 2448, 1], [2451, 2472, 1], [2474, 2480, 1], [2482, 2486, 4], [2487, 2489, 1], [2493, 2510, 17], [2524, 2525, 1], [2527, 2529, 1], [2544, 2545, 1], [2556, 2565, 9], [2566, 2570, 1], [2575, 2576, 1], [2579, 2600, 1], [2602, 2608, 1], [2610, 2611, 1], [2613, 2614, 1], [2616, 2617, 1], [2649, 2652, 1], [2654, 2674, 20], [2675, 2676, 1], [2693, 2701, 1], [2703, 2705, 1], [2707, 2728, 1], [2730, 2736, 1], [2738, 2739, 1], [2741, 2745, 1], [2749, 2768, 19], [2784, 2785, 1], [2809, 2821, 12], [2822, 2828, 1], [2831, 2832, 1], [2835, 2856, 1], [2858, 2864, 1], [2866, 2867, 1], [2869, 2873, 1], [2877, 2908, 31], [2909, 2911, 2], [2912, 2913, 1], [2929, 2947, 18], [2949, 2954, 1], [2958, 2960, 1], [2962, 2965, 1], [2969, 2970, 1], [2972, 2974, 2], [2975, 2979, 4], [2980, 2984, 4], [2985, 2986, 1], [2990, 3001, 1], [3024, 3077, 53], [3078, 3084, 1], [3086, 3088, 1], [3090, 3112, 1], [3114, 3129, 1], [3133, 3160, 27], [3161, 3162, 1], [3165, 3168, 3], [3169, 3200, 31], [3205, 3212, 1], [3214, 3216, 1], [3218, 3240, 1], [3242, 3251, 1], [3253, 3257, 1], [3261, 3293, 32], [3294, 3296, 2], [3297, 3313, 16], [3314, 3332, 18], [3333, 3340, 1], [3342, 3344, 1], [3346, 3386, 1], [3389, 3406, 17], [3412, 3414, 1], [3423, 3425, 1], [3450, 3455, 1], [3461, 3478, 1], [3482, 3505, 1], [3507, 3515, 1], [3517, 3520, 3], [3521, 3526, 1], [3585, 3632, 1], [3634, 3635, 1], [3648, 3653, 1], [3713, 3714, 1], [3716, 3718, 2], [3719, 3722, 1], [3724, 3747, 1], [3749, 3751, 2], [3752, 3760, 1], [3762, 3763, 1], [3773, 3776, 3], [3777, 3780, 1], [3804, 3807, 1], [3840, 3904, 64], [3905, 3911, 1], [3913, 3948, 1], [3976, 3980, 1], [4096, 4138, 1], [4159, 4176, 17], [4177, 4181, 1], [4186, 4189, 1], [4193, 4197, 4], [4198, 4206, 8], [4207, 4208, 1], [4213, 4225, 1], [4238, 4352, 114], [4353, 4680, 1], [4682, 4685, 1], [4688, 4694, 1], [4696, 4698, 2], [4699, 4701, 1], [4704, 4744, 1], [4746, 4749, 1], [4752, 4784, 1], [4786, 4789, 1], [4792, 4798, 1], [4800, 4802, 2], [4803, 4805, 1], [4808, 4822, 1], [4824, 4880, 1], [4882, 4885, 1], [4888, 4954, 1], [4992, 5007, 1], [5121, 5740, 1], [5743, 5759, 1], [5761, 5786, 1], [5792, 5866, 1], [5873, 5880, 1], [5888, 5905, 1], [5919, 5937, 1], [5952, 5969, 1], [5984, 5996, 1], [5998, 6000, 1], [6016, 6067, 1], [6108, 6176, 68], [6177, 6210, 1], [6212, 6264, 1], [6272, 6276, 1], [6279, 6312, 1], [6314, 6320, 6], [6321, 6389, 1], [6400, 6430, 1], [6480, 6509, 1], [6512, 6516, 1], [6528, 6571, 1], [6576, 6601, 1], [6656, 6678, 1], [6688, 6740, 1], [6917, 6963, 1], [6981, 6988, 1], [7043, 7072, 1], [7086, 7087, 1], [7098, 7141, 1], [7168, 7203, 1], [7245, 7247, 1], [7258, 7287, 1], [7401, 7404, 1], [7406, 7411, 1], [7413, 7414, 1], [7418, 8501, 1083], [8502, 8504, 1], [11568, 11623, 1], [11648, 11670, 1], [11680, 11686, 1], [11688, 11694, 1], [11696, 11702, 1], [11704, 11710, 1], [11712, 11718, 1], [11720, 11726, 1], [11728, 11734, 1], [11736, 11742, 1], [12294, 12348, 54], [12353, 12438, 1], [12447, 12449, 2], [12450, 12538, 1], [12543, 12549, 6], [12550, 12591, 1], [12593, 12686, 1], [12704, 12735, 1], [12784, 12799, 1], [13312, 19903, 1], [19968, 40980, 1], [40982, 42124, 1], [42192, 42231, 1], [42240, 42507, 1], [42512, 42527, 1], [42538, 42539, 1], [42606, 42656, 50], [42657, 42725, 1], [42895, 42999, 104], [43003, 43009, 1], [43011, 43013, 1], [43015, 43018, 1], [43020, 43042, 1], [43072, 43123, 1], [43138, 43187, 1], [43250, 43255, 1], [43259, 43261, 2], [43262, 43274, 12], [43275, 43301, 1], [43312, 43334, 1], [43360, 43388, 1], [43396, 43442, 1], [43488, 43492, 1], [43495, 43503, 1], [43514, 43518, 1], [43520, 43560, 1], [43584, 43586, 1], [43588, 43595, 1], [43616, 43631, 1], [43633, 43638, 1], [43642, 43646, 4], [43647, 43695, 1], [43697, 43701, 4], [43702, 43705, 3], [43706, 43709, 1], [43712, 43714, 2], [43739, 43740, 1], [43744, 43754, 1], [43762, 43777, 15], [43778, 43782, 1], [43785, 43790, 1], [43793, 43798, 1], [43808, 43814, 1], [43816, 43822, 1], [43968, 44002, 1], [44032, 55203, 1], [55216, 55238, 1], [55243, 55291, 1], [63744, 64109, 1], [64112, 64217, 1], [64285, 64287, 2], [64288, 64296, 1], [64298, 64310, 1], [64312, 64316, 1], [64318, 64320, 2], [64321, 64323, 2], [64324, 64326, 2], [64327, 64433, 1], [64467, 64829, 1], [64848, 64911, 1], [64914, 64967, 1], [65008, 65019, 1], [65136, 65140, 1], [65142, 65276, 1], [65382, 65391, 1], [65393, 65437, 1], [65440, 65470, 1], [65474, 65479, 1], [65482, 65487, 1], [65490, 65495, 1], [65498, 65500, 1], [65536, 65547, 1], [65549, 65574, 1], [65576, 65594, 1], [65596, 65597, 1], [65599, 65613, 1], [65616, 65629, 1], [65664, 65786, 1], [66176, 66204, 1], [66208, 66256, 1], [66304, 66335, 1], [66349, 66368, 1], [66370, 66377, 1], [66384, 66421, 1], [66432, 66461, 1], [66464, 66499, 1], [66504, 66511, 1], [66640, 66717, 1], [66816, 66855, 1], [66864, 66915, 1], [67008, 67059, 1], [67072, 67382, 1], [67392, 67413, 1], [67424, 67431, 1], [67584, 67589, 1], [67592, 67594, 2], [67595, 67637, 1], [67639, 67640, 1], [67644, 67647, 3], [67648, 67669, 1], [67680, 67702, 1], [67712, 67742, 1], [67808, 67826, 1], [67828, 67829, 1], [67840, 67861, 1], [67872, 67897, 1], [67968, 68023, 1], [68030, 68031, 1], [68096, 68112, 16], [68113, 68115, 1], [68117, 68119, 1], [68121, 68149, 1], [68192, 68220, 1], [68224, 68252, 1], [68288, 68295, 1], [68297, 68324, 1], [68352, 68405, 1], [68416, 68437, 1], [68448, 68466, 1], [68480, 68497, 1], [68608, 68680, 1], [68864, 68899, 1], [68938, 68941, 1], [68943, 69248, 305], [69249, 69289, 1], [69296, 69297, 1], [69314, 69316, 1], [69376, 69404, 1], [69415, 69424, 9], [69425, 69445, 1], [69488, 69505, 1], [69552, 69572, 1], [69600, 69622, 1], [69635, 69687, 1], [69745, 69746, 1], [69749, 69763, 14], [69764, 69807, 1], [69840, 69864, 1], [69891, 69926, 1], [69956, 69959, 3], [69968, 70002, 1], [70006, 70019, 13], [70020, 70066, 1], [70081, 70084, 1], [70106, 70108, 2], [70144, 70161, 1], [70163, 70187, 1], [70207, 70208, 1], [70272, 70278, 1], [70280, 70282, 2], [70283, 70285, 1], [70287, 70301, 1], [70303, 70312, 1], [70320, 70366, 1], [70405, 70412, 1], [70415, 70416, 1], [70419, 70440, 1], [70442, 70448, 1], [70450, 70451, 1], [70453, 70457, 1], [70461, 70480, 19], [70493, 70497, 1], [70528, 70537, 1], [70539, 70542, 3], [70544, 70581, 1], [70583, 70609, 26], [70611, 70656, 45], [70657, 70708, 1], [70727, 70730, 1], [70751, 70753, 1], [70784, 70831, 1], [70852, 70853, 1], [70855, 71040, 185], [71041, 71086, 1], [71128, 71131, 1], [71168, 71215, 1], [71236, 71296, 60], [71297, 71338, 1], [71352, 71424, 72], [71425, 71450, 1], [71488, 71494, 1], [71680, 71723, 1], [71935, 71942, 1], [71945, 71948, 3], [71949, 71955, 1], [71957, 71958, 1], [71960, 71983, 1], [71999, 72001, 2], [72096, 72103, 1], [72106, 72144, 1], [72161, 72163, 2], [72192, 72203, 11], [72204, 72242, 1], [72250, 72272, 22], [72284, 72329, 1], [72349, 72368, 19], [72369, 72440, 1], [72640, 72672, 1], [72704, 72712, 1], [72714, 72750, 1], [72768, 72818, 50], [72819, 72847, 1], [72960, 72966, 1], [72968, 72969, 1], [72971, 73008, 1], [73030, 73056, 26], [73057, 73061, 1], [73063, 73064, 1], [73066, 73097, 1], [73112, 73440, 328], [73441, 73458, 1], [73474, 73476, 2], [73477, 73488, 1], [73490, 73523, 1], [73648, 73728, 80], [73729, 74649, 1], [74880, 75075, 1], [77712, 77808, 1], [77824, 78895, 1], [78913, 78918, 1], [78944, 82938, 1], [82944, 83526, 1], [90368, 90397, 1], [92160, 92728, 1], [92736, 92766, 1], [92784, 92862, 1], [92880, 92909, 1], [92928, 92975, 1], [93027, 93047, 1], [93053, 93071, 1], [93507, 93546, 1], [93952, 94026, 1], [94032, 94208, 176], [94209, 100343, 1], [100352, 101589, 1], [101631, 101640, 1], [110592, 110882, 1], [110898, 110928, 30], [110929, 110930, 1], [110933, 110948, 15], [110949, 110951, 1], [110960, 111355, 1], [113664, 113770, 1], [113776, 113788, 1], [113792, 113800, 1], [113808, 113817, 1], [122634, 123136, 502], [123137, 123180, 1], [123214, 123536, 322], [123537, 123565, 1], [123584, 123627, 1], [124112, 124138, 1], [124368, 124397, 1], [124400, 124896, 496], [124897, 124902, 1], [124904, 124907, 1], [124909, 124910, 1], [124912, 124926, 1], [124928, 125124, 1], [126464, 126467, 1], [126469, 126495, 1], [126497, 126498, 1], [126500, 126503, 3], [126505, 126514, 1], [126516, 126519, 1], [126521, 126523, 2], [126530, 126535, 5], [126537, 126541, 2], [126542, 126543, 1], [126545, 126546, 1], [126548, 126551, 3], [126553, 126561, 2], [126562, 126564, 2], [126567, 126570, 1], [126572, 126578, 1], [126580, 126583, 1], [126585, 126588, 1], [126590, 126592, 2], [126593, 126601, 1], [126603, 126619, 1], [126625, 126627, 1], [126629, 126633, 1], [126635, 126651, 1], [131072, 173791, 1], [173824, 177977, 1], [177984, 178205, 1], [178208, 183969, 1], [183984, 191456, 1], [191472, 192093, 1], [194560, 195101, 1], [196608, 201546, 1], [201552, 205743, 1]];\n  static Lt = [[453, 459, 3], [498, 8072, 7574], [8073, 8079, 1], [8088, 8095, 1], [8104, 8111, 1], [8124, 8140, 16], [8188, 8188, 1]];\n  static foldLt = [[452, 454, 2], [455, 457, 2], [458, 460, 2], [497, 499, 2], [8064, 8071, 1], [8080, 8087, 1], [8096, 8103, 1], [8115, 8131, 16], [8179, 8179, 1]];\n  static Lu = [[65, 90, 1], [192, 214, 1], [216, 222, 1], [256, 310, 2], [313, 327, 2], [330, 376, 2], [377, 381, 2], [385, 386, 1], [388, 390, 2], [391, 393, 2], [394, 395, 1], [398, 401, 1], [403, 404, 1], [406, 408, 1], [412, 413, 1], [415, 416, 1], [418, 422, 2], [423, 425, 2], [428, 430, 2], [431, 433, 2], [434, 435, 1], [437, 439, 2], [440, 444, 4], [452, 461, 3], [463, 475, 2], [478, 494, 2], [497, 500, 3], [502, 504, 1], [506, 562, 2], [570, 571, 1], [573, 574, 1], [577, 579, 2], [580, 582, 1], [584, 590, 2], [880, 882, 2], [886, 895, 9], [902, 904, 2], [905, 906, 1], [908, 910, 2], [911, 913, 2], [914, 929, 1], [931, 939, 1], [975, 978, 3], [979, 980, 1], [984, 1006, 2], [1012, 1015, 3], [1017, 1018, 1], [1021, 1071, 1], [1120, 1152, 2], [1162, 1216, 2], [1217, 1229, 2], [1232, 1326, 2], [1329, 1366, 1], [4256, 4293, 1], [4295, 4301, 6], [5024, 5109, 1], [7305, 7312, 7], [7313, 7354, 1], [7357, 7359, 1], [7680, 7828, 2], [7838, 7934, 2], [7944, 7951, 1], [7960, 7965, 1], [7976, 7983, 1], [7992, 7999, 1], [8008, 8013, 1], [8025, 8031, 2], [8040, 8047, 1], [8120, 8123, 1], [8136, 8139, 1], [8152, 8155, 1], [8168, 8172, 1], [8184, 8187, 1], [8450, 8455, 5], [8459, 8461, 1], [8464, 8466, 1], [8469, 8473, 4], [8474, 8477, 1], [8484, 8490, 2], [8491, 8493, 1], [8496, 8499, 1], [8510, 8511, 1], [8517, 8579, 62], [11264, 11311, 1], [11360, 11362, 2], [11363, 11364, 1], [11367, 11373, 2], [11374, 11376, 1], [11378, 11381, 3], [11390, 11392, 1], [11394, 11490, 2], [11499, 11501, 2], [11506, 42560, 31054], [42562, 42604, 2], [42624, 42650, 2], [42786, 42798, 2], [42802, 42862, 2], [42873, 42877, 2], [42878, 42886, 2], [42891, 42893, 2], [42896, 42898, 2], [42902, 42922, 2], [42923, 42926, 1], [42928, 42932, 1], [42934, 42948, 2], [42949, 42951, 1], [42953, 42955, 2], [42956, 42960, 4], [42966, 42972, 2], [42997, 65313, 22316], [65314, 65338, 1], [66560, 66599, 1], [66736, 66771, 1], [66928, 66938, 1], [66940, 66954, 1], [66956, 66962, 1], [66964, 66965, 1], [68736, 68786, 1], [68944, 68965, 1], [71840, 71871, 1], [93760, 93791, 1], [119808, 119833, 1], [119860, 119885, 1], [119912, 119937, 1], [119964, 119966, 2], [119967, 119973, 3], [119974, 119977, 3], [119978, 119980, 1], [119982, 119989, 1], [120016, 120041, 1], [120068, 120069, 1], [120071, 120074, 1], [120077, 120084, 1], [120086, 120092, 1], [120120, 120121, 1], [120123, 120126, 1], [120128, 120132, 1], [120134, 120138, 4], [120139, 120144, 1], [120172, 120197, 1], [120224, 120249, 1], [120276, 120301, 1], [120328, 120353, 1], [120380, 120405, 1], [120432, 120457, 1], [120488, 120512, 1], [120546, 120570, 1], [120604, 120628, 1], [120662, 120686, 1], [120720, 120744, 1], [120778, 125184, 4406], [125185, 125217, 1]];\n  static Upper = this.Lu;\n  static foldLu = [[97, 122, 1], [181, 223, 42], [224, 246, 1], [248, 255, 1], [257, 303, 2], [307, 311, 2], [314, 328, 2], [331, 375, 2], [378, 382, 2], [383, 384, 1], [387, 389, 2], [392, 396, 4], [402, 405, 3], [409, 411, 1], [414, 417, 3], [419, 421, 2], [424, 429, 5], [432, 436, 4], [438, 441, 3], [445, 447, 2], [453, 454, 1], [456, 457, 1], [459, 460, 1], [462, 476, 2], [477, 495, 2], [498, 499, 1], [501, 505, 4], [507, 543, 2], [547, 563, 2], [572, 575, 3], [576, 578, 2], [583, 591, 2], [592, 596, 1], [598, 599, 1], [601, 603, 2], [604, 608, 4], [609, 611, 2], [612, 614, 1], [616, 620, 1], [623, 625, 2], [626, 629, 3], [637, 640, 3], [642, 643, 1], [647, 652, 1], [658, 669, 11], [670, 837, 167], [881, 883, 2], [887, 891, 4], [892, 893, 1], [940, 943, 1], [945, 974, 1], [976, 977, 1], [981, 983, 1], [985, 1007, 2], [1008, 1011, 1], [1013, 1019, 3], [1072, 1119, 1], [1121, 1153, 2], [1163, 1215, 2], [1218, 1230, 2], [1231, 1327, 2], [1377, 1414, 1], [4304, 4346, 1], [4349, 4351, 1], [5112, 5117, 1], [7296, 7304, 1], [7306, 7545, 239], [7549, 7566, 17], [7681, 7829, 2], [7835, 7841, 6], [7843, 7935, 2], [7936, 7943, 1], [7952, 7957, 1], [7968, 7975, 1], [7984, 7991, 1], [8000, 8005, 1], [8017, 8023, 2], [8032, 8039, 1], [8048, 8061, 1], [8112, 8113, 1], [8126, 8144, 18], [8145, 8160, 15], [8161, 8165, 4], [8526, 8580, 54], [11312, 11359, 1], [11361, 11365, 4], [11366, 11372, 2], [11379, 11382, 3], [11393, 11491, 2], [11500, 11502, 2], [11507, 11520, 13], [11521, 11557, 1], [11559, 11565, 6], [42561, 42605, 2], [42625, 42651, 2], [42787, 42799, 2], [42803, 42863, 2], [42874, 42876, 2], [42879, 42887, 2], [42892, 42897, 5], [42899, 42900, 1], [42903, 42921, 2], [42933, 42947, 2], [42952, 42954, 2], [42957, 42961, 4], [42967, 42971, 2], [42998, 43859, 861], [43888, 43967, 1], [65345, 65370, 1], [66600, 66639, 1], [66776, 66811, 1], [66967, 66977, 1], [66979, 66993, 1], [66995, 67001, 1], [67003, 67004, 1], [68800, 68850, 1], [68976, 68997, 1], [71872, 71903, 1], [93792, 93823, 1], [125218, 125251, 1]];\n  static M = [[768, 879, 1], [1155, 1161, 1], [1425, 1469, 1], [1471, 1473, 2], [1474, 1476, 2], [1477, 1479, 2], [1552, 1562, 1], [1611, 1631, 1], [1648, 1750, 102], [1751, 1756, 1], [1759, 1764, 1], [1767, 1768, 1], [1770, 1773, 1], [1809, 1840, 31], [1841, 1866, 1], [1958, 1968, 1], [2027, 2035, 1], [2045, 2070, 25], [2071, 2073, 1], [2075, 2083, 1], [2085, 2087, 1], [2089, 2093, 1], [2137, 2139, 1], [2199, 2207, 1], [2250, 2273, 1], [2275, 2307, 1], [2362, 2364, 1], [2366, 2383, 1], [2385, 2391, 1], [2402, 2403, 1], [2433, 2435, 1], [2492, 2494, 2], [2495, 2500, 1], [2503, 2504, 1], [2507, 2509, 1], [2519, 2530, 11], [2531, 2558, 27], [2561, 2563, 1], [2620, 2622, 2], [2623, 2626, 1], [2631, 2632, 1], [2635, 2637, 1], [2641, 2672, 31], [2673, 2677, 4], [2689, 2691, 1], [2748, 2750, 2], [2751, 2757, 1], [2759, 2761, 1], [2763, 2765, 1], [2786, 2787, 1], [2810, 2815, 1], [2817, 2819, 1], [2876, 2878, 2], [2879, 2884, 1], [2887, 2888, 1], [2891, 2893, 1], [2901, 2903, 1], [2914, 2915, 1], [2946, 3006, 60], [3007, 3010, 1], [3014, 3016, 1], [3018, 3021, 1], [3031, 3072, 41], [3073, 3076, 1], [3132, 3134, 2], [3135, 3140, 1], [3142, 3144, 1], [3146, 3149, 1], [3157, 3158, 1], [3170, 3171, 1], [3201, 3203, 1], [3260, 3262, 2], [3263, 3268, 1], [3270, 3272, 1], [3274, 3277, 1], [3285, 3286, 1], [3298, 3299, 1], [3315, 3328, 13], [3329, 3331, 1], [3387, 3388, 1], [3390, 3396, 1], [3398, 3400, 1], [3402, 3405, 1], [3415, 3426, 11], [3427, 3457, 30], [3458, 3459, 1], [3530, 3535, 5], [3536, 3540, 1], [3542, 3544, 2], [3545, 3551, 1], [3570, 3571, 1], [3633, 3636, 3], [3637, 3642, 1], [3655, 3662, 1], [3761, 3764, 3], [3765, 3772, 1], [3784, 3790, 1], [3864, 3865, 1], [3893, 3897, 2], [3902, 3903, 1], [3953, 3972, 1], [3974, 3975, 1], [3981, 3991, 1], [3993, 4028, 1], [4038, 4139, 101], [4140, 4158, 1], [4182, 4185, 1], [4190, 4192, 1], [4194, 4196, 1], [4199, 4205, 1], [4209, 4212, 1], [4226, 4237, 1], [4239, 4250, 11], [4251, 4253, 1], [4957, 4959, 1], [5906, 5909, 1], [5938, 5940, 1], [5970, 5971, 1], [6002, 6003, 1], [6068, 6099, 1], [6109, 6155, 46], [6156, 6157, 1], [6159, 6277, 118], [6278, 6313, 35], [6432, 6443, 1], [6448, 6459, 1], [6679, 6683, 1], [6741, 6750, 1], [6752, 6780, 1], [6783, 6832, 49], [6833, 6862, 1], [6912, 6916, 1], [6964, 6980, 1], [7019, 7027, 1], [7040, 7042, 1], [7073, 7085, 1], [7142, 7155, 1], [7204, 7223, 1], [7376, 7378, 1], [7380, 7400, 1], [7405, 7412, 7], [7415, 7417, 1], [7616, 7679, 1], [8400, 8432, 1], [11503, 11505, 1], [11647, 11744, 97], [11745, 11775, 1], [12330, 12335, 1], [12441, 12442, 1], [42607, 42610, 1], [42612, 42621, 1], [42654, 42655, 1], [42736, 42737, 1], [43010, 43014, 4], [43019, 43043, 24], [43044, 43047, 1], [43052, 43136, 84], [43137, 43188, 51], [43189, 43205, 1], [43232, 43249, 1], [43263, 43302, 39], [43303, 43309, 1], [43335, 43347, 1], [43392, 43395, 1], [43443, 43456, 1], [43493, 43561, 68], [43562, 43574, 1], [43587, 43596, 9], [43597, 43643, 46], [43644, 43645, 1], [43696, 43698, 2], [43699, 43700, 1], [43703, 43704, 1], [43710, 43711, 1], [43713, 43755, 42], [43756, 43759, 1], [43765, 43766, 1], [44003, 44010, 1], [44012, 44013, 1], [64286, 65024, 738], [65025, 65039, 1], [65056, 65071, 1], [66045, 66272, 227], [66422, 66426, 1], [68097, 68099, 1], [68101, 68102, 1], [68108, 68111, 1], [68152, 68154, 1], [68159, 68325, 166], [68326, 68900, 574], [68901, 68903, 1], [68969, 68973, 1], [69291, 69292, 1], [69372, 69375, 1], [69446, 69456, 1], [69506, 69509, 1], [69632, 69634, 1], [69688, 69702, 1], [69744, 69747, 3], [69748, 69759, 11], [69760, 69762, 1], [69808, 69818, 1], [69826, 69888, 62], [69889, 69890, 1], [69927, 69940, 1], [69957, 69958, 1], [70003, 70016, 13], [70017, 70018, 1], [70067, 70080, 1], [70089, 70092, 1], [70094, 70095, 1], [70188, 70199, 1], [70206, 70209, 3], [70367, 70378, 1], [70400, 70403, 1], [70459, 70460, 1], [70462, 70468, 1], [70471, 70472, 1], [70475, 70477, 1], [70487, 70498, 11], [70499, 70502, 3], [70503, 70508, 1], [70512, 70516, 1], [70584, 70592, 1], [70594, 70597, 3], [70599, 70602, 1], [70604, 70608, 1], [70610, 70625, 15], [70626, 70709, 83], [70710, 70726, 1], [70750, 70832, 82], [70833, 70851, 1], [71087, 71093, 1], [71096, 71104, 1], [71132, 71133, 1], [71216, 71232, 1], [71339, 71351, 1], [71453, 71467, 1], [71724, 71738, 1], [71984, 71989, 1], [71991, 71992, 1], [71995, 71998, 1], [72000, 72002, 2], [72003, 72145, 142], [72146, 72151, 1], [72154, 72160, 1], [72164, 72193, 29], [72194, 72202, 1], [72243, 72249, 1], [72251, 72254, 1], [72263, 72273, 10], [72274, 72283, 1], [72330, 72345, 1], [72751, 72758, 1], [72760, 72767, 1], [72850, 72871, 1], [72873, 72886, 1], [73009, 73014, 1], [73018, 73020, 2], [73021, 73023, 2], [73024, 73029, 1], [73031, 73098, 67], [73099, 73102, 1], [73104, 73105, 1], [73107, 73111, 1], [73459, 73462, 1], [73472, 73473, 1], [73475, 73524, 49], [73525, 73530, 1], [73534, 73538, 1], [73562, 78912, 5350], [78919, 78933, 1], [90398, 90415, 1], [92912, 92916, 1], [92976, 92982, 1], [94031, 94033, 2], [94034, 94087, 1], [94095, 94098, 1], [94180, 94192, 12], [94193, 113821, 19628], [113822, 118528, 4706], [118529, 118573, 1], [118576, 118598, 1], [119141, 119145, 1], [119149, 119154, 1], [119163, 119170, 1], [119173, 119179, 1], [119210, 119213, 1], [119362, 119364, 1], [121344, 121398, 1], [121403, 121452, 1], [121461, 121476, 15], [121499, 121503, 1], [121505, 121519, 1], [122880, 122886, 1], [122888, 122904, 1], [122907, 122913, 1], [122915, 122916, 1], [122918, 122922, 1], [123023, 123184, 161], [123185, 123190, 1], [123566, 123628, 62], [123629, 123631, 1], [124140, 124143, 1], [124398, 124399, 1], [125136, 125142, 1], [125252, 125258, 1], [917760, 917999, 1]];\n  static foldM = [[921, 953, 32], [8126, 8126, 1]];\n  static Mc = [[2307, 2363, 56], [2366, 2368, 1], [2377, 2380, 1], [2382, 2383, 1], [2434, 2435, 1], [2494, 2496, 1], [2503, 2504, 1], [2507, 2508, 1], [2519, 2563, 44], [2622, 2624, 1], [2691, 2750, 59], [2751, 2752, 1], [2761, 2763, 2], [2764, 2818, 54], [2819, 2878, 59], [2880, 2887, 7], [2888, 2891, 3], [2892, 2903, 11], [3006, 3007, 1], [3009, 3010, 1], [3014, 3016, 1], [3018, 3020, 1], [3031, 3073, 42], [3074, 3075, 1], [3137, 3140, 1], [3202, 3203, 1], [3262, 3264, 2], [3265, 3268, 1], [3271, 3272, 1], [3274, 3275, 1], [3285, 3286, 1], [3315, 3330, 15], [3331, 3390, 59], [3391, 3392, 1], [3398, 3400, 1], [3402, 3404, 1], [3415, 3458, 43], [3459, 3535, 76], [3536, 3537, 1], [3544, 3551, 1], [3570, 3571, 1], [3902, 3903, 1], [3967, 4139, 172], [4140, 4145, 5], [4152, 4155, 3], [4156, 4182, 26], [4183, 4194, 11], [4195, 4196, 1], [4199, 4205, 1], [4227, 4228, 1], [4231, 4236, 1], [4239, 4250, 11], [4251, 4252, 1], [5909, 5940, 31], [6070, 6078, 8], [6079, 6085, 1], [6087, 6088, 1], [6435, 6438, 1], [6441, 6443, 1], [6448, 6449, 1], [6451, 6456, 1], [6681, 6682, 1], [6741, 6743, 2], [6753, 6755, 2], [6756, 6765, 9], [6766, 6770, 1], [6916, 6965, 49], [6971, 6973, 2], [6974, 6977, 1], [6979, 6980, 1], [7042, 7073, 31], [7078, 7079, 1], [7082, 7143, 61], [7146, 7148, 1], [7150, 7154, 4], [7155, 7204, 49], [7205, 7211, 1], [7220, 7221, 1], [7393, 7415, 22], [12334, 12335, 1], [43043, 43044, 1], [43047, 43136, 89], [43137, 43188, 51], [43189, 43203, 1], [43346, 43347, 1], [43395, 43444, 49], [43445, 43450, 5], [43451, 43454, 3], [43455, 43456, 1], [43567, 43568, 1], [43571, 43572, 1], [43597, 43643, 46], [43645, 43755, 110], [43758, 43759, 1], [43765, 44003, 238], [44004, 44006, 2], [44007, 44009, 2], [44010, 44012, 2], [69632, 69634, 2], [69762, 69808, 46], [69809, 69810, 1], [69815, 69816, 1], [69932, 69957, 25], [69958, 70018, 60], [70067, 70069, 1], [70079, 70080, 1], [70094, 70188, 94], [70189, 70190, 1], [70194, 70195, 1], [70197, 70368, 171], [70369, 70370, 1], [70402, 70403, 1], [70462, 70463, 1], [70465, 70468, 1], [70471, 70472, 1], [70475, 70477, 1], [70487, 70498, 11], [70499, 70584, 85], [70585, 70586, 1], [70594, 70597, 3], [70599, 70602, 1], [70604, 70605, 1], [70607, 70709, 102], [70710, 70711, 1], [70720, 70721, 1], [70725, 70832, 107], [70833, 70834, 1], [70841, 70843, 2], [70844, 70846, 1], [70849, 71087, 238], [71088, 71089, 1], [71096, 71099, 1], [71102, 71216, 114], [71217, 71218, 1], [71227, 71228, 1], [71230, 71340, 110], [71342, 71343, 1], [71350, 71454, 104], [71456, 71457, 1], [71462, 71724, 262], [71725, 71726, 1], [71736, 71984, 248], [71985, 71989, 1], [71991, 71992, 1], [71997, 72000, 3], [72002, 72145, 143], [72146, 72147, 1], [72156, 72159, 1], [72164, 72249, 85], [72279, 72280, 1], [72343, 72751, 408], [72766, 72873, 107], [72881, 72884, 3], [73098, 73102, 1], [73107, 73108, 1], [73110, 73461, 351], [73462, 73475, 13], [73524, 73525, 1], [73534, 73535, 1], [73537, 90410, 16873], [90411, 90412, 1], [94033, 94087, 1], [94192, 94193, 1], [119141, 119142, 1], [119149, 119154, 1]];\n  static Me = [[1160, 1161, 1], [6846, 8413, 1567], [8414, 8416, 1], [8418, 8420, 1], [42608, 42610, 1]];\n  static Mn = [[768, 879, 1], [1155, 1159, 1], [1425, 1469, 1], [1471, 1473, 2], [1474, 1476, 2], [1477, 1479, 2], [1552, 1562, 1], [1611, 1631, 1], [1648, 1750, 102], [1751, 1756, 1], [1759, 1764, 1], [1767, 1768, 1], [1770, 1773, 1], [1809, 1840, 31], [1841, 1866, 1], [1958, 1968, 1], [2027, 2035, 1], [2045, 2070, 25], [2071, 2073, 1], [2075, 2083, 1], [2085, 2087, 1], [2089, 2093, 1], [2137, 2139, 1], [2199, 2207, 1], [2250, 2273, 1], [2275, 2306, 1], [2362, 2364, 2], [2369, 2376, 1], [2381, 2385, 4], [2386, 2391, 1], [2402, 2403, 1], [2433, 2492, 59], [2497, 2500, 1], [2509, 2530, 21], [2531, 2558, 27], [2561, 2562, 1], [2620, 2625, 5], [2626, 2631, 5], [2632, 2635, 3], [2636, 2637, 1], [2641, 2672, 31], [2673, 2677, 4], [2689, 2690, 1], [2748, 2753, 5], [2754, 2757, 1], [2759, 2760, 1], [2765, 2786, 21], [2787, 2810, 23], [2811, 2815, 1], [2817, 2876, 59], [2879, 2881, 2], [2882, 2884, 1], [2893, 2901, 8], [2902, 2914, 12], [2915, 2946, 31], [3008, 3021, 13], [3072, 3076, 4], [3132, 3134, 2], [3135, 3136, 1], [3142, 3144, 1], [3146, 3149, 1], [3157, 3158, 1], [3170, 3171, 1], [3201, 3260, 59], [3263, 3270, 7], [3276, 3277, 1], [3298, 3299, 1], [3328, 3329, 1], [3387, 3388, 1], [3393, 3396, 1], [3405, 3426, 21], [3427, 3457, 30], [3530, 3538, 8], [3539, 3540, 1], [3542, 3633, 91], [3636, 3642, 1], [3655, 3662, 1], [3761, 3764, 3], [3765, 3772, 1], [3784, 3790, 1], [3864, 3865, 1], [3893, 3897, 2], [3953, 3966, 1], [3968, 3972, 1], [3974, 3975, 1], [3981, 3991, 1], [3993, 4028, 1], [4038, 4141, 103], [4142, 4144, 1], [4146, 4151, 1], [4153, 4154, 1], [4157, 4158, 1], [4184, 4185, 1], [4190, 4192, 1], [4209, 4212, 1], [4226, 4229, 3], [4230, 4237, 7], [4253, 4957, 704], [4958, 4959, 1], [5906, 5908, 1], [5938, 5939, 1], [5970, 5971, 1], [6002, 6003, 1], [6068, 6069, 1], [6071, 6077, 1], [6086, 6089, 3], [6090, 6099, 1], [6109, 6155, 46], [6156, 6157, 1], [6159, 6277, 118], [6278, 6313, 35], [6432, 6434, 1], [6439, 6440, 1], [6450, 6457, 7], [6458, 6459, 1], [6679, 6680, 1], [6683, 6742, 59], [6744, 6750, 1], [6752, 6754, 2], [6757, 6764, 1], [6771, 6780, 1], [6783, 6832, 49], [6833, 6845, 1], [6847, 6862, 1], [6912, 6915, 1], [6964, 6966, 2], [6967, 6970, 1], [6972, 6978, 6], [7019, 7027, 1], [7040, 7041, 1], [7074, 7077, 1], [7080, 7081, 1], [7083, 7085, 1], [7142, 7144, 2], [7145, 7149, 4], [7151, 7153, 1], [7212, 7219, 1], [7222, 7223, 1], [7376, 7378, 1], [7380, 7392, 1], [7394, 7400, 1], [7405, 7412, 7], [7416, 7417, 1], [7616, 7679, 1], [8400, 8412, 1], [8417, 8421, 4], [8422, 8432, 1], [11503, 11505, 1], [11647, 11744, 97], [11745, 11775, 1], [12330, 12333, 1], [12441, 12442, 1], [42607, 42612, 5], [42613, 42621, 1], [42654, 42655, 1], [42736, 42737, 1], [43010, 43014, 4], [43019, 43045, 26], [43046, 43052, 6], [43204, 43205, 1], [43232, 43249, 1], [43263, 43302, 39], [43303, 43309, 1], [43335, 43345, 1], [43392, 43394, 1], [43443, 43446, 3], [43447, 43449, 1], [43452, 43453, 1], [43493, 43561, 68], [43562, 43566, 1], [43569, 43570, 1], [43573, 43574, 1], [43587, 43596, 9], [43644, 43696, 52], [43698, 43700, 1], [43703, 43704, 1], [43710, 43711, 1], [43713, 43756, 43], [43757, 43766, 9], [44005, 44008, 3], [44013, 64286, 20273], [65024, 65039, 1], [65056, 65071, 1], [66045, 66272, 227], [66422, 66426, 1], [68097, 68099, 1], [68101, 68102, 1], [68108, 68111, 1], [68152, 68154, 1], [68159, 68325, 166], [68326, 68900, 574], [68901, 68903, 1], [68969, 68973, 1], [69291, 69292, 1], [69372, 69375, 1], [69446, 69456, 1], [69506, 69509, 1], [69633, 69688, 55], [69689, 69702, 1], [69744, 69747, 3], [69748, 69759, 11], [69760, 69761, 1], [69811, 69814, 1], [69817, 69818, 1], [69826, 69888, 62], [69889, 69890, 1], [69927, 69931, 1], [69933, 69940, 1], [70003, 70016, 13], [70017, 70070, 53], [70071, 70078, 1], [70089, 70092, 1], [70095, 70191, 96], [70192, 70193, 1], [70196, 70198, 2], [70199, 70206, 7], [70209, 70367, 158], [70371, 70378, 1], [70400, 70401, 1], [70459, 70460, 1], [70464, 70502, 38], [70503, 70508, 1], [70512, 70516, 1], [70587, 70592, 1], [70606, 70610, 2], [70625, 70626, 1], [70712, 70719, 1], [70722, 70724, 1], [70726, 70750, 24], [70835, 70840, 1], [70842, 70847, 5], [70848, 70850, 2], [70851, 71090, 239], [71091, 71093, 1], [71100, 71101, 1], [71103, 71104, 1], [71132, 71133, 1], [71219, 71226, 1], [71229, 71231, 2], [71232, 71339, 107], [71341, 71344, 3], [71345, 71349, 1], [71351, 71453, 102], [71455, 71458, 3], [71459, 71461, 1], [71463, 71467, 1], [71727, 71735, 1], [71737, 71738, 1], [71995, 71996, 1], [71998, 72003, 5], [72148, 72151, 1], [72154, 72155, 1], [72160, 72193, 33], [72194, 72202, 1], [72243, 72248, 1], [72251, 72254, 1], [72263, 72273, 10], [72274, 72278, 1], [72281, 72283, 1], [72330, 72342, 1], [72344, 72345, 1], [72752, 72758, 1], [72760, 72765, 1], [72767, 72850, 83], [72851, 72871, 1], [72874, 72880, 1], [72882, 72883, 1], [72885, 72886, 1], [73009, 73014, 1], [73018, 73020, 2], [73021, 73023, 2], [73024, 73029, 1], [73031, 73104, 73], [73105, 73109, 4], [73111, 73459, 348], [73460, 73472, 12], [73473, 73526, 53], [73527, 73530, 1], [73536, 73538, 2], [73562, 78912, 5350], [78919, 78933, 1], [90398, 90409, 1], [90413, 90415, 1], [92912, 92916, 1], [92976, 92982, 1], [94031, 94095, 64], [94096, 94098, 1], [94180, 113821, 19641], [113822, 118528, 4706], [118529, 118573, 1], [118576, 118598, 1], [119143, 119145, 1], [119163, 119170, 1], [119173, 119179, 1], [119210, 119213, 1], [119362, 119364, 1], [121344, 121398, 1], [121403, 121452, 1], [121461, 121476, 15], [121499, 121503, 1], [121505, 121519, 1], [122880, 122886, 1], [122888, 122904, 1], [122907, 122913, 1], [122915, 122916, 1], [122918, 122922, 1], [123023, 123184, 161], [123185, 123190, 1], [123566, 123628, 62], [123629, 123631, 1], [124140, 124143, 1], [124398, 124399, 1], [125136, 125142, 1], [125252, 125258, 1], [917760, 917999, 1]];\n  static foldMn = [[921, 953, 32], [8126, 8126, 1]];\n  static N = [[48, 57, 1], [178, 179, 1], [185, 188, 3], [189, 190, 1], [1632, 1641, 1], [1776, 1785, 1], [1984, 1993, 1], [2406, 2415, 1], [2534, 2543, 1], [2548, 2553, 1], [2662, 2671, 1], [2790, 2799, 1], [2918, 2927, 1], [2930, 2935, 1], [3046, 3058, 1], [3174, 3183, 1], [3192, 3198, 1], [3302, 3311, 1], [3416, 3422, 1], [3430, 3448, 1], [3558, 3567, 1], [3664, 3673, 1], [3792, 3801, 1], [3872, 3891, 1], [4160, 4169, 1], [4240, 4249, 1], [4969, 4988, 1], [5870, 5872, 1], [6112, 6121, 1], [6128, 6137, 1], [6160, 6169, 1], [6470, 6479, 1], [6608, 6618, 1], [6784, 6793, 1], [6800, 6809, 1], [6992, 7001, 1], [7088, 7097, 1], [7232, 7241, 1], [7248, 7257, 1], [8304, 8308, 4], [8309, 8313, 1], [8320, 8329, 1], [8528, 8578, 1], [8581, 8585, 1], [9312, 9371, 1], [9450, 9471, 1], [10102, 10131, 1], [11517, 12295, 778], [12321, 12329, 1], [12344, 12346, 1], [12690, 12693, 1], [12832, 12841, 1], [12872, 12879, 1], [12881, 12895, 1], [12928, 12937, 1], [12977, 12991, 1], [42528, 42537, 1], [42726, 42735, 1], [43056, 43061, 1], [43216, 43225, 1], [43264, 43273, 1], [43472, 43481, 1], [43504, 43513, 1], [43600, 43609, 1], [44016, 44025, 1], [65296, 65305, 1], [65799, 65843, 1], [65856, 65912, 1], [65930, 65931, 1], [66273, 66299, 1], [66336, 66339, 1], [66369, 66378, 9], [66513, 66517, 1], [66720, 66729, 1], [67672, 67679, 1], [67705, 67711, 1], [67751, 67759, 1], [67835, 67839, 1], [67862, 67867, 1], [68028, 68029, 1], [68032, 68047, 1], [68050, 68095, 1], [68160, 68168, 1], [68221, 68222, 1], [68253, 68255, 1], [68331, 68335, 1], [68440, 68447, 1], [68472, 68479, 1], [68521, 68527, 1], [68858, 68863, 1], [68912, 68921, 1], [68928, 68937, 1], [69216, 69246, 1], [69405, 69414, 1], [69457, 69460, 1], [69573, 69579, 1], [69714, 69743, 1], [69872, 69881, 1], [69942, 69951, 1], [70096, 70105, 1], [70113, 70132, 1], [70384, 70393, 1], [70736, 70745, 1], [70864, 70873, 1], [71248, 71257, 1], [71360, 71369, 1], [71376, 71395, 1], [71472, 71483, 1], [71904, 71922, 1], [72016, 72025, 1], [72688, 72697, 1], [72784, 72812, 1], [73040, 73049, 1], [73120, 73129, 1], [73552, 73561, 1], [73664, 73684, 1], [74752, 74862, 1], [90416, 90425, 1], [92768, 92777, 1], [92864, 92873, 1], [93008, 93017, 1], [93019, 93025, 1], [93552, 93561, 1], [93824, 93846, 1], [118000, 118009, 1], [119488, 119507, 1], [119520, 119539, 1], [119648, 119672, 1], [120782, 120831, 1], [123200, 123209, 1], [123632, 123641, 1], [124144, 124153, 1], [124401, 124410, 1], [125127, 125135, 1], [125264, 125273, 1], [126065, 126123, 1], [126125, 126127, 1], [126129, 126132, 1], [126209, 126253, 1], [126255, 126269, 1], [127232, 127244, 1], [130032, 130041, 1]];\n  static Nd = [[48, 57, 1], [1632, 1641, 1], [1776, 1785, 1], [1984, 1993, 1], [2406, 2415, 1], [2534, 2543, 1], [2662, 2671, 1], [2790, 2799, 1], [2918, 2927, 1], [3046, 3055, 1], [3174, 3183, 1], [3302, 3311, 1], [3430, 3439, 1], [3558, 3567, 1], [3664, 3673, 1], [3792, 3801, 1], [3872, 3881, 1], [4160, 4169, 1], [4240, 4249, 1], [6112, 6121, 1], [6160, 6169, 1], [6470, 6479, 1], [6608, 6617, 1], [6784, 6793, 1], [6800, 6809, 1], [6992, 7001, 1], [7088, 7097, 1], [7232, 7241, 1], [7248, 7257, 1], [42528, 42537, 1], [43216, 43225, 1], [43264, 43273, 1], [43472, 43481, 1], [43504, 43513, 1], [43600, 43609, 1], [44016, 44025, 1], [65296, 65305, 1], [66720, 66729, 1], [68912, 68921, 1], [68928, 68937, 1], [69734, 69743, 1], [69872, 69881, 1], [69942, 69951, 1], [70096, 70105, 1], [70384, 70393, 1], [70736, 70745, 1], [70864, 70873, 1], [71248, 71257, 1], [71360, 71369, 1], [71376, 71395, 1], [71472, 71481, 1], [71904, 71913, 1], [72016, 72025, 1], [72688, 72697, 1], [72784, 72793, 1], [73040, 73049, 1], [73120, 73129, 1], [73552, 73561, 1], [90416, 90425, 1], [92768, 92777, 1], [92864, 92873, 1], [93008, 93017, 1], [93552, 93561, 1], [118000, 118009, 1], [120782, 120831, 1], [123200, 123209, 1], [123632, 123641, 1], [124144, 124153, 1], [124401, 124410, 1], [125264, 125273, 1], [130032, 130041, 1]];\n  static Nl = [[5870, 5872, 1], [8544, 8578, 1], [8581, 8584, 1], [12295, 12321, 26], [12322, 12329, 1], [12344, 12346, 1], [42726, 42735, 1], [65856, 65908, 1], [66369, 66378, 9], [66513, 66517, 1], [74752, 74862, 1]];\n  static No = [[178, 179, 1], [185, 188, 3], [189, 190, 1], [2548, 2553, 1], [2930, 2935, 1], [3056, 3058, 1], [3192, 3198, 1], [3416, 3422, 1], [3440, 3448, 1], [3882, 3891, 1], [4969, 4988, 1], [6128, 6137, 1], [6618, 8304, 1686], [8308, 8313, 1], [8320, 8329, 1], [8528, 8543, 1], [8585, 9312, 727], [9313, 9371, 1], [9450, 9471, 1], [10102, 10131, 1], [11517, 12690, 1173], [12691, 12693, 1], [12832, 12841, 1], [12872, 12879, 1], [12881, 12895, 1], [12928, 12937, 1], [12977, 12991, 1], [43056, 43061, 1], [65799, 65843, 1], [65909, 65912, 1], [65930, 65931, 1], [66273, 66299, 1], [66336, 66339, 1], [67672, 67679, 1], [67705, 67711, 1], [67751, 67759, 1], [67835, 67839, 1], [67862, 67867, 1], [68028, 68029, 1], [68032, 68047, 1], [68050, 68095, 1], [68160, 68168, 1], [68221, 68222, 1], [68253, 68255, 1], [68331, 68335, 1], [68440, 68447, 1], [68472, 68479, 1], [68521, 68527, 1], [68858, 68863, 1], [69216, 69246, 1], [69405, 69414, 1], [69457, 69460, 1], [69573, 69579, 1], [69714, 69733, 1], [70113, 70132, 1], [71482, 71483, 1], [71914, 71922, 1], [72794, 72812, 1], [73664, 73684, 1], [93019, 93025, 1], [93824, 93846, 1], [119488, 119507, 1], [119520, 119539, 1], [119648, 119672, 1], [125127, 125135, 1], [126065, 126123, 1], [126125, 126127, 1], [126129, 126132, 1], [126209, 126253, 1], [126255, 126269, 1], [127232, 127244, 1]];\n  static P = [[33, 35, 1], [37, 42, 1], [44, 47, 1], [58, 59, 1], [63, 64, 1], [91, 93, 1], [95, 123, 28], [125, 161, 36], [167, 171, 4], [182, 183, 1], [187, 191, 4], [894, 903, 9], [1370, 1375, 1], [1417, 1418, 1], [1470, 1472, 2], [1475, 1478, 3], [1523, 1524, 1], [1545, 1546, 1], [1548, 1549, 1], [1563, 1565, 2], [1566, 1567, 1], [1642, 1645, 1], [1748, 1792, 44], [1793, 1805, 1], [2039, 2041, 1], [2096, 2110, 1], [2142, 2404, 262], [2405, 2416, 11], [2557, 2678, 121], [2800, 3191, 391], [3204, 3572, 368], [3663, 3674, 11], [3675, 3844, 169], [3845, 3858, 1], [3860, 3898, 38], [3899, 3901, 1], [3973, 4048, 75], [4049, 4052, 1], [4057, 4058, 1], [4170, 4175, 1], [4347, 4960, 613], [4961, 4968, 1], [5120, 5742, 622], [5787, 5788, 1], [5867, 5869, 1], [5941, 5942, 1], [6100, 6102, 1], [6104, 6106, 1], [6144, 6154, 1], [6468, 6469, 1], [6686, 6687, 1], [6816, 6822, 1], [6824, 6829, 1], [6990, 6991, 1], [7002, 7008, 1], [7037, 7039, 1], [7164, 7167, 1], [7227, 7231, 1], [7294, 7295, 1], [7360, 7367, 1], [7379, 8208, 829], [8209, 8231, 1], [8240, 8259, 1], [8261, 8273, 1], [8275, 8286, 1], [8317, 8318, 1], [8333, 8334, 1], [8968, 8971, 1], [9001, 9002, 1], [10088, 10101, 1], [10181, 10182, 1], [10214, 10223, 1], [10627, 10648, 1], [10712, 10715, 1], [10748, 10749, 1], [11513, 11516, 1], [11518, 11519, 1], [11632, 11776, 144], [11777, 11822, 1], [11824, 11855, 1], [11858, 11869, 1], [12289, 12291, 1], [12296, 12305, 1], [12308, 12319, 1], [12336, 12349, 13], [12448, 12539, 91], [42238, 42239, 1], [42509, 42511, 1], [42611, 42622, 11], [42738, 42743, 1], [43124, 43127, 1], [43214, 43215, 1], [43256, 43258, 1], [43260, 43310, 50], [43311, 43359, 48], [43457, 43469, 1], [43486, 43487, 1], [43612, 43615, 1], [43742, 43743, 1], [43760, 43761, 1], [44011, 64830, 20819], [64831, 65040, 209], [65041, 65049, 1], [65072, 65106, 1], [65108, 65121, 1], [65123, 65128, 5], [65130, 65131, 1], [65281, 65283, 1], [65285, 65290, 1], [65292, 65295, 1], [65306, 65307, 1], [65311, 65312, 1], [65339, 65341, 1], [65343, 65371, 28], [65373, 65375, 2], [65376, 65381, 1], [65792, 65794, 1], [66463, 66512, 49], [66927, 67671, 744], [67871, 67903, 32], [68176, 68184, 1], [68223, 68336, 113], [68337, 68342, 1], [68409, 68415, 1], [68505, 68508, 1], [68974, 69293, 319], [69461, 69465, 1], [69510, 69513, 1], [69703, 69709, 1], [69819, 69820, 1], [69822, 69825, 1], [69952, 69955, 1], [70004, 70005, 1], [70085, 70088, 1], [70093, 70107, 14], [70109, 70111, 1], [70200, 70205, 1], [70313, 70612, 299], [70613, 70615, 2], [70616, 70731, 115], [70732, 70735, 1], [70746, 70747, 1], [70749, 70854, 105], [71105, 71127, 1], [71233, 71235, 1], [71264, 71276, 1], [71353, 71484, 131], [71485, 71486, 1], [71739, 72004, 265], [72005, 72006, 1], [72162, 72255, 93], [72256, 72262, 1], [72346, 72348, 1], [72350, 72354, 1], [72448, 72457, 1], [72673, 72769, 96], [72770, 72773, 1], [72816, 72817, 1], [73463, 73464, 1], [73539, 73551, 1], [73727, 74864, 1137], [74865, 74868, 1], [77809, 77810, 1], [92782, 92783, 1], [92917, 92983, 66], [92984, 92987, 1], [92996, 93549, 553], [93550, 93551, 1], [93847, 93850, 1], [94178, 113823, 19645], [121479, 121483, 1], [124415, 125278, 863], [125279, 125279, 1]];\n  static Pc = [[95, 8255, 8160], [8256, 8276, 20], [65075, 65076, 1], [65101, 65103, 1], [65343, 65343, 1]];\n  static Pd = [[45, 1418, 1373], [1470, 5120, 3650], [6150, 8208, 2058], [8209, 8213, 1], [11799, 11802, 3], [11834, 11835, 1], [11840, 11869, 29], [12316, 12336, 20], [12448, 65073, 52625], [65074, 65112, 38], [65123, 65293, 170], [68974, 69293, 319]];\n  static Pe = [[41, 93, 52], [125, 3899, 3774], [3901, 5788, 1887], [8262, 8318, 56], [8334, 8969, 635], [8971, 9002, 31], [10089, 10101, 2], [10182, 10215, 33], [10217, 10223, 2], [10628, 10648, 2], [10713, 10715, 2], [10749, 11811, 1062], [11813, 11817, 2], [11862, 11868, 2], [12297, 12305, 2], [12309, 12315, 2], [12318, 12319, 1], [64830, 65048, 218], [65078, 65092, 2], [65096, 65114, 18], [65116, 65118, 2], [65289, 65341, 52], [65373, 65379, 3]];\n  static Pf = [[187, 8217, 8030], [8221, 8250, 29], [11779, 11781, 2], [11786, 11789, 3], [11805, 11809, 4]];\n  static Pi = [[171, 8216, 8045], [8219, 8220, 1], [8223, 8249, 26], [11778, 11780, 2], [11785, 11788, 3], [11804, 11808, 4]];\n  static Po = [[33, 35, 1], [37, 39, 1], [42, 46, 2], [47, 58, 11], [59, 63, 4], [64, 92, 28], [161, 167, 6], [182, 183, 1], [191, 894, 703], [903, 1370, 467], [1371, 1375, 1], [1417, 1472, 55], [1475, 1478, 3], [1523, 1524, 1], [1545, 1546, 1], [1548, 1549, 1], [1563, 1565, 2], [1566, 1567, 1], [1642, 1645, 1], [1748, 1792, 44], [1793, 1805, 1], [2039, 2041, 1], [2096, 2110, 1], [2142, 2404, 262], [2405, 2416, 11], [2557, 2678, 121], [2800, 3191, 391], [3204, 3572, 368], [3663, 3674, 11], [3675, 3844, 169], [3845, 3858, 1], [3860, 3973, 113], [4048, 4052, 1], [4057, 4058, 1], [4170, 4175, 1], [4347, 4960, 613], [4961, 4968, 1], [5742, 5867, 125], [5868, 5869, 1], [5941, 5942, 1], [6100, 6102, 1], [6104, 6106, 1], [6144, 6149, 1], [6151, 6154, 1], [6468, 6469, 1], [6686, 6687, 1], [6816, 6822, 1], [6824, 6829, 1], [6990, 6991, 1], [7002, 7008, 1], [7037, 7039, 1], [7164, 7167, 1], [7227, 7231, 1], [7294, 7295, 1], [7360, 7367, 1], [7379, 8214, 835], [8215, 8224, 9], [8225, 8231, 1], [8240, 8248, 1], [8251, 8254, 1], [8257, 8259, 1], [8263, 8273, 1], [8275, 8277, 2], [8278, 8286, 1], [11513, 11516, 1], [11518, 11519, 1], [11632, 11776, 144], [11777, 11782, 5], [11783, 11784, 1], [11787, 11790, 3], [11791, 11798, 1], [11800, 11801, 1], [11803, 11806, 3], [11807, 11818, 11], [11819, 11822, 1], [11824, 11833, 1], [11836, 11839, 1], [11841, 11843, 2], [11844, 11855, 1], [11858, 11860, 1], [12289, 12291, 1], [12349, 12539, 190], [42238, 42239, 1], [42509, 42511, 1], [42611, 42622, 11], [42738, 42743, 1], [43124, 43127, 1], [43214, 43215, 1], [43256, 43258, 1], [43260, 43310, 50], [43311, 43359, 48], [43457, 43469, 1], [43486, 43487, 1], [43612, 43615, 1], [43742, 43743, 1], [43760, 43761, 1], [44011, 65040, 21029], [65041, 65046, 1], [65049, 65072, 23], [65093, 65094, 1], [65097, 65100, 1], [65104, 65106, 1], [65108, 65111, 1], [65119, 65121, 1], [65128, 65130, 2], [65131, 65281, 150], [65282, 65283, 1], [65285, 65287, 1], [65290, 65294, 2], [65295, 65306, 11], [65307, 65311, 4], [65312, 65340, 28], [65377, 65380, 3], [65381, 65792, 411], [65793, 65794, 1], [66463, 66512, 49], [66927, 67671, 744], [67871, 67903, 32], [68176, 68184, 1], [68223, 68336, 113], [68337, 68342, 1], [68409, 68415, 1], [68505, 68508, 1], [69461, 69465, 1], [69510, 69513, 1], [69703, 69709, 1], [69819, 69820, 1], [69822, 69825, 1], [69952, 69955, 1], [70004, 70005, 1], [70085, 70088, 1], [70093, 70107, 14], [70109, 70111, 1], [70200, 70205, 1], [70313, 70612, 299], [70613, 70615, 2], [70616, 70731, 115], [70732, 70735, 1], [70746, 70747, 1], [70749, 70854, 105], [71105, 71127, 1], [71233, 71235, 1], [71264, 71276, 1], [71353, 71484, 131], [71485, 71486, 1], [71739, 72004, 265], [72005, 72006, 1], [72162, 72255, 93], [72256, 72262, 1], [72346, 72348, 1], [72350, 72354, 1], [72448, 72457, 1], [72673, 72769, 96], [72770, 72773, 1], [72816, 72817, 1], [73463, 73464, 1], [73539, 73551, 1], [73727, 74864, 1137], [74865, 74868, 1], [77809, 77810, 1], [92782, 92783, 1], [92917, 92983, 66], [92984, 92987, 1], [92996, 93549, 553], [93550, 93551, 1], [93847, 93850, 1], [94178, 113823, 19645], [121479, 121483, 1], [124415, 125278, 863], [125279, 125279, 1]];\n  static Ps = [[40, 91, 51], [123, 3898, 3775], [3900, 5787, 1887], [8218, 8222, 4], [8261, 8317, 56], [8333, 8968, 635], [8970, 9001, 31], [10088, 10100, 2], [10181, 10214, 33], [10216, 10222, 2], [10627, 10647, 2], [10712, 10714, 2], [10748, 11810, 1062], [11812, 11816, 2], [11842, 11861, 19], [11863, 11867, 2], [12296, 12304, 2], [12308, 12314, 2], [12317, 64831, 52514], [65047, 65077, 30], [65079, 65091, 2], [65095, 65113, 18], [65115, 65117, 2], [65288, 65339, 51], [65371, 65375, 4], [65378, 65378, 1]];\n  static S = [[36, 43, 7], [60, 62, 1], [94, 96, 2], [124, 126, 2], [162, 166, 1], [168, 169, 1], [172, 174, 2], [175, 177, 1], [180, 184, 4], [215, 247, 32], [706, 709, 1], [722, 735, 1], [741, 747, 1], [749, 751, 2], [752, 767, 1], [885, 900, 15], [901, 1014, 113], [1154, 1421, 267], [1422, 1423, 1], [1542, 1544, 1], [1547, 1550, 3], [1551, 1758, 207], [1769, 1789, 20], [1790, 2038, 248], [2046, 2047, 1], [2184, 2546, 362], [2547, 2554, 7], [2555, 2801, 246], [2928, 3059, 131], [3060, 3066, 1], [3199, 3407, 208], [3449, 3647, 198], [3841, 3843, 1], [3859, 3861, 2], [3862, 3863, 1], [3866, 3871, 1], [3892, 3896, 2], [4030, 4037, 1], [4039, 4044, 1], [4046, 4047, 1], [4053, 4056, 1], [4254, 4255, 1], [5008, 5017, 1], [5741, 6107, 366], [6464, 6622, 158], [6623, 6655, 1], [7009, 7018, 1], [7028, 7036, 1], [8125, 8127, 2], [8128, 8129, 1], [8141, 8143, 1], [8157, 8159, 1], [8173, 8175, 1], [8189, 8190, 1], [8260, 8274, 14], [8314, 8316, 1], [8330, 8332, 1], [8352, 8384, 1], [8448, 8449, 1], [8451, 8454, 1], [8456, 8457, 1], [8468, 8470, 2], [8471, 8472, 1], [8478, 8483, 1], [8485, 8489, 2], [8494, 8506, 12], [8507, 8512, 5], [8513, 8516, 1], [8522, 8525, 1], [8527, 8586, 59], [8587, 8592, 5], [8593, 8967, 1], [8972, 9000, 1], [9003, 9257, 1], [9280, 9290, 1], [9372, 9449, 1], [9472, 10087, 1], [10132, 10180, 1], [10183, 10213, 1], [10224, 10626, 1], [10649, 10711, 1], [10716, 10747, 1], [10750, 11123, 1], [11126, 11157, 1], [11159, 11263, 1], [11493, 11498, 1], [11856, 11857, 1], [11904, 11929, 1], [11931, 12019, 1], [12032, 12245, 1], [12272, 12287, 1], [12292, 12306, 14], [12307, 12320, 13], [12342, 12343, 1], [12350, 12351, 1], [12443, 12444, 1], [12688, 12689, 1], [12694, 12703, 1], [12736, 12773, 1], [12783, 12800, 17], [12801, 12830, 1], [12842, 12871, 1], [12880, 12896, 16], [12897, 12927, 1], [12938, 12976, 1], [12992, 13311, 1], [19904, 19967, 1], [42128, 42182, 1], [42752, 42774, 1], [42784, 42785, 1], [42889, 42890, 1], [43048, 43051, 1], [43062, 43065, 1], [43639, 43641, 1], [43867, 43882, 15], [43883, 64297, 20414], [64434, 64450, 1], [64832, 64847, 1], [64975, 65020, 45], [65021, 65023, 1], [65122, 65124, 2], [65125, 65126, 1], [65129, 65284, 155], [65291, 65308, 17], [65309, 65310, 1], [65342, 65344, 2], [65372, 65374, 2], [65504, 65510, 1], [65512, 65518, 1], [65532, 65533, 1], [65847, 65855, 1], [65913, 65929, 1], [65932, 65934, 1], [65936, 65948, 1], [65952, 66000, 48], [66001, 66044, 1], [67703, 67704, 1], [68296, 69006, 710], [69007, 71487, 2480], [73685, 73713, 1], [92988, 92991, 1], [92997, 113820, 20823], [117760, 117999, 1], [118016, 118451, 1], [118608, 118723, 1], [118784, 119029, 1], [119040, 119078, 1], [119081, 119140, 1], [119146, 119148, 1], [119171, 119172, 1], [119180, 119209, 1], [119214, 119274, 1], [119296, 119361, 1], [119365, 119552, 187], [119553, 119638, 1], [120513, 120539, 26], [120571, 120597, 26], [120629, 120655, 26], [120687, 120713, 26], [120745, 120771, 26], [120832, 121343, 1], [121399, 121402, 1], [121453, 121460, 1], [121462, 121475, 1], [121477, 121478, 1], [123215, 123647, 432], [126124, 126128, 4], [126254, 126704, 450], [126705, 126976, 271], [126977, 127019, 1], [127024, 127123, 1], [127136, 127150, 1], [127153, 127167, 1], [127169, 127183, 1], [127185, 127221, 1], [127245, 127405, 1], [127462, 127490, 1], [127504, 127547, 1], [127552, 127560, 1], [127568, 127569, 1], [127584, 127589, 1], [127744, 128727, 1], [128732, 128748, 1], [128752, 128764, 1], [128768, 128886, 1], [128891, 128985, 1], [128992, 129003, 1], [129008, 129024, 16], [129025, 129035, 1], [129040, 129095, 1], [129104, 129113, 1], [129120, 129159, 1], [129168, 129197, 1], [129200, 129211, 1], [129216, 129217, 1], [129280, 129619, 1], [129632, 129645, 1], [129648, 129660, 1], [129664, 129673, 1], [129679, 129734, 1], [129742, 129756, 1], [129759, 129769, 1], [129776, 129784, 1], [129792, 129938, 1], [129940, 130031, 1]];\n  static Sc = [[36, 162, 126], [163, 165, 1], [1423, 1547, 124], [2046, 2047, 1], [2546, 2547, 1], [2555, 2801, 246], [3065, 3647, 582], [6107, 8352, 2245], [8353, 8384, 1], [43064, 65020, 21956], [65129, 65284, 155], [65504, 65505, 1], [65509, 65510, 1], [73693, 73696, 1], [123647, 126128, 2481]];\n  static Sk = [[94, 96, 2], [168, 175, 7], [180, 184, 4], [706, 709, 1], [722, 735, 1], [741, 747, 1], [749, 751, 2], [752, 767, 1], [885, 900, 15], [901, 2184, 1283], [8125, 8127, 2], [8128, 8129, 1], [8141, 8143, 1], [8157, 8159, 1], [8173, 8175, 1], [8189, 8190, 1], [12443, 12444, 1], [42752, 42774, 1], [42784, 42785, 1], [42889, 42890, 1], [43867, 43882, 15], [43883, 64434, 20551], [64435, 64450, 1], [65342, 65344, 2], [65507, 127995, 62488], [127996, 127999, 1]];\n  static Sm = [[43, 60, 17], [61, 62, 1], [124, 126, 2], [172, 177, 5], [215, 247, 32], [1014, 1542, 528], [1543, 1544, 1], [8260, 8274, 14], [8314, 8316, 1], [8330, 8332, 1], [8472, 8512, 40], [8513, 8516, 1], [8523, 8592, 69], [8593, 8596, 1], [8602, 8603, 1], [8608, 8614, 3], [8622, 8654, 32], [8655, 8658, 3], [8660, 8692, 32], [8693, 8959, 1], [8992, 8993, 1], [9084, 9115, 31], [9116, 9139, 1], [9180, 9185, 1], [9655, 9665, 10], [9720, 9727, 1], [9839, 10176, 337], [10177, 10180, 1], [10183, 10213, 1], [10224, 10239, 1], [10496, 10626, 1], [10649, 10711, 1], [10716, 10747, 1], [10750, 11007, 1], [11056, 11076, 1], [11079, 11084, 1], [64297, 65122, 825], [65124, 65126, 1], [65291, 65308, 17], [65309, 65310, 1], [65372, 65374, 2], [65506, 65513, 7], [65514, 65516, 1], [69006, 69007, 1], [120513, 120539, 26], [120571, 120597, 26], [120629, 120655, 26], [120687, 120713, 26], [120745, 120771, 26], [126704, 126705, 1]];\n  static So = [[166, 169, 3], [174, 176, 2], [1154, 1421, 267], [1422, 1550, 128], [1551, 1758, 207], [1769, 1789, 20], [1790, 2038, 248], [2554, 2928, 374], [3059, 3064, 1], [3066, 3199, 133], [3407, 3449, 42], [3841, 3843, 1], [3859, 3861, 2], [3862, 3863, 1], [3866, 3871, 1], [3892, 3896, 2], [4030, 4037, 1], [4039, 4044, 1], [4046, 4047, 1], [4053, 4056, 1], [4254, 4255, 1], [5008, 5017, 1], [5741, 6464, 723], [6622, 6655, 1], [7009, 7018, 1], [7028, 7036, 1], [8448, 8449, 1], [8451, 8454, 1], [8456, 8457, 1], [8468, 8470, 2], [8471, 8478, 7], [8479, 8483, 1], [8485, 8489, 2], [8494, 8506, 12], [8507, 8522, 15], [8524, 8525, 1], [8527, 8586, 59], [8587, 8597, 10], [8598, 8601, 1], [8604, 8607, 1], [8609, 8610, 1], [8612, 8613, 1], [8615, 8621, 1], [8623, 8653, 1], [8656, 8657, 1], [8659, 8661, 2], [8662, 8691, 1], [8960, 8967, 1], [8972, 8991, 1], [8994, 9000, 1], [9003, 9083, 1], [9085, 9114, 1], [9140, 9179, 1], [9186, 9257, 1], [9280, 9290, 1], [9372, 9449, 1], [9472, 9654, 1], [9656, 9664, 1], [9666, 9719, 1], [9728, 9838, 1], [9840, 10087, 1], [10132, 10175, 1], [10240, 10495, 1], [11008, 11055, 1], [11077, 11078, 1], [11085, 11123, 1], [11126, 11157, 1], [11159, 11263, 1], [11493, 11498, 1], [11856, 11857, 1], [11904, 11929, 1], [11931, 12019, 1], [12032, 12245, 1], [12272, 12287, 1], [12292, 12306, 14], [12307, 12320, 13], [12342, 12343, 1], [12350, 12351, 1], [12688, 12689, 1], [12694, 12703, 1], [12736, 12773, 1], [12783, 12800, 17], [12801, 12830, 1], [12842, 12871, 1], [12880, 12896, 16], [12897, 12927, 1], [12938, 12976, 1], [12992, 13311, 1], [19904, 19967, 1], [42128, 42182, 1], [43048, 43051, 1], [43062, 43063, 1], [43065, 43639, 574], [43640, 43641, 1], [64832, 64847, 1], [64975, 65021, 46], [65022, 65023, 1], [65508, 65512, 4], [65517, 65518, 1], [65532, 65533, 1], [65847, 65855, 1], [65913, 65929, 1], [65932, 65934, 1], [65936, 65948, 1], [65952, 66000, 48], [66001, 66044, 1], [67703, 67704, 1], [68296, 71487, 3191], [73685, 73692, 1], [73697, 73713, 1], [92988, 92991, 1], [92997, 113820, 20823], [117760, 117999, 1], [118016, 118451, 1], [118608, 118723, 1], [118784, 119029, 1], [119040, 119078, 1], [119081, 119140, 1], [119146, 119148, 1], [119171, 119172, 1], [119180, 119209, 1], [119214, 119274, 1], [119296, 119361, 1], [119365, 119552, 187], [119553, 119638, 1], [120832, 121343, 1], [121399, 121402, 1], [121453, 121460, 1], [121462, 121475, 1], [121477, 121478, 1], [123215, 126124, 2909], [126254, 126976, 722], [126977, 127019, 1], [127024, 127123, 1], [127136, 127150, 1], [127153, 127167, 1], [127169, 127183, 1], [127185, 127221, 1], [127245, 127405, 1], [127462, 127490, 1], [127504, 127547, 1], [127552, 127560, 1], [127568, 127569, 1], [127584, 127589, 1], [127744, 127994, 1], [128000, 128727, 1], [128732, 128748, 1], [128752, 128764, 1], [128768, 128886, 1], [128891, 128985, 1], [128992, 129003, 1], [129008, 129024, 16], [129025, 129035, 1], [129040, 129095, 1], [129104, 129113, 1], [129120, 129159, 1], [129168, 129197, 1], [129200, 129211, 1], [129216, 129217, 1], [129280, 129619, 1], [129632, 129645, 1], [129648, 129660, 1], [129664, 129673, 1], [129679, 129734, 1], [129742, 129756, 1], [129759, 129769, 1], [129776, 129784, 1], [129792, 129938, 1], [129940, 130031, 1]];\n  static Z = [[32, 160, 128], [5760, 8192, 2432], [8193, 8202, 1], [8232, 8233, 1], [8239, 8287, 48], [12288, 12288, 1]];\n  static Zl = [[8232, 8232, 1]];\n  static Zp = [[8233, 8233, 1]];\n  static Zs = [[32, 160, 128], [5760, 8192, 2432], [8193, 8202, 1], [8239, 8287, 48], [12288, 12288, 1]];\n  static Adlam = [[125184, 125259, 1], [125264, 125273, 1], [125278, 125279, 1]];\n  static Ahom = [[71424, 71450, 1], [71453, 71467, 1], [71472, 71494, 1]];\n  static Anatolian_Hieroglyphs = [[82944, 83526, 1]];\n  static Arabic = [[1536, 1540, 1], [1542, 1547, 1], [1549, 1562, 1], [1564, 1566, 1], [1568, 1599, 1], [1601, 1610, 1], [1622, 1647, 1], [1649, 1756, 1], [1758, 1791, 1], [1872, 1919, 1], [2160, 2190, 1], [2192, 2193, 1], [2199, 2273, 1], [2275, 2303, 1], [64336, 64450, 1], [64467, 64829, 1], [64832, 64911, 1], [64914, 64967, 1], [64975, 65008, 33], [65009, 65023, 1], [65136, 65140, 1], [65142, 65276, 1], [69216, 69246, 1], [69314, 69316, 1], [69372, 69375, 1], [126464, 126467, 1], [126469, 126495, 1], [126497, 126498, 1], [126500, 126503, 3], [126505, 126514, 1], [126516, 126519, 1], [126521, 126523, 2], [126530, 126535, 5], [126537, 126541, 2], [126542, 126543, 1], [126545, 126546, 1], [126548, 126551, 3], [126553, 126561, 2], [126562, 126564, 2], [126567, 126570, 1], [126572, 126578, 1], [126580, 126583, 1], [126585, 126588, 1], [126590, 126592, 2], [126593, 126601, 1], [126603, 126619, 1], [126625, 126627, 1], [126629, 126633, 1], [126635, 126651, 1], [126704, 126705, 1]];\n  static Armenian = [[1329, 1366, 1], [1369, 1418, 1], [1421, 1423, 1], [64275, 64279, 1]];\n  static Avestan = [[68352, 68405, 1], [68409, 68415, 1]];\n  static Balinese = [[6912, 6988, 1], [6990, 7039, 1]];\n  static Bamum = [[42656, 42743, 1], [92160, 92728, 1]];\n  static Bassa_Vah = [[92880, 92909, 1], [92912, 92917, 1]];\n  static Batak = [[7104, 7155, 1], [7164, 7167, 1]];\n  static Bengali = [[2432, 2435, 1], [2437, 2444, 1], [2447, 2448, 1], [2451, 2472, 1], [2474, 2480, 1], [2482, 2486, 4], [2487, 2489, 1], [2492, 2500, 1], [2503, 2504, 1], [2507, 2510, 1], [2519, 2524, 5], [2525, 2527, 2], [2528, 2531, 1], [2534, 2558, 1]];\n  static Bhaiksuki = [[72704, 72712, 1], [72714, 72758, 1], [72760, 72773, 1], [72784, 72812, 1]];\n  static Bopomofo = [[746, 747, 1], [12549, 12591, 1], [12704, 12735, 1]];\n  static Brahmi = [[69632, 69709, 1], [69714, 69749, 1], [69759, 69759, 1]];\n  static Braille = [[10240, 10495, 1]];\n  static Buginese = [[6656, 6683, 1], [6686, 6687, 1]];\n  static Buhid = [[5952, 5971, 1]];\n  static Canadian_Aboriginal = [[5120, 5759, 1], [6320, 6389, 1], [72368, 72383, 1]];\n  static Carian = [[66208, 66256, 1]];\n  static Caucasian_Albanian = [[66864, 66915, 1], [66927, 66927, 1]];\n  static Chakma = [[69888, 69940, 1], [69942, 69959, 1]];\n  static Cham = [[43520, 43574, 1], [43584, 43597, 1], [43600, 43609, 1], [43612, 43615, 1]];\n  static Cherokee = [[5024, 5109, 1], [5112, 5117, 1], [43888, 43967, 1]];\n  static Chorasmian = [[69552, 69579, 1]];\n  static Common = [[0, 64, 1], [91, 96, 1], [123, 169, 1], [171, 185, 1], [187, 191, 1], [215, 247, 32], [697, 735, 1], [741, 745, 1], [748, 767, 1], [884, 894, 10], [901, 903, 2], [1541, 1548, 7], [1563, 1567, 4], [1600, 1757, 157], [2274, 2404, 130], [2405, 3647, 1242], [4053, 4056, 1], [4347, 5867, 1520], [5868, 5869, 1], [5941, 5942, 1], [6146, 6147, 1], [6149, 7379, 1230], [7393, 7401, 8], [7402, 7404, 1], [7406, 7411, 1], [7413, 7415, 1], [7418, 8192, 774], [8193, 8203, 1], [8206, 8292, 1], [8294, 8304, 1], [8308, 8318, 1], [8320, 8334, 1], [8352, 8384, 1], [8448, 8485, 1], [8487, 8489, 1], [8492, 8497, 1], [8499, 8525, 1], [8527, 8543, 1], [8585, 8587, 1], [8592, 9257, 1], [9280, 9290, 1], [9312, 10239, 1], [10496, 11123, 1], [11126, 11157, 1], [11159, 11263, 1], [11776, 11869, 1], [12272, 12292, 1], [12294, 12296, 2], [12297, 12320, 1], [12336, 12343, 1], [12348, 12351, 1], [12443, 12444, 1], [12448, 12539, 91], [12540, 12688, 148], [12689, 12703, 1], [12736, 12773, 1], [12783, 12832, 49], [12833, 12895, 1], [12927, 13007, 1], [13055, 13144, 89], [13145, 13311, 1], [19904, 19967, 1], [42752, 42785, 1], [42888, 42890, 1], [43056, 43065, 1], [43310, 43471, 161], [43867, 43882, 15], [43883, 64830, 20947], [64831, 65040, 209], [65041, 65049, 1], [65072, 65106, 1], [65108, 65126, 1], [65128, 65131, 1], [65279, 65281, 2], [65282, 65312, 1], [65339, 65344, 1], [65371, 65381, 1], [65392, 65438, 46], [65439, 65504, 65], [65505, 65510, 1], [65512, 65518, 1], [65529, 65533, 1], [65792, 65794, 1], [65799, 65843, 1], [65847, 65855, 1], [65936, 65948, 1], [66000, 66044, 1], [66273, 66299, 1], [113824, 113827, 1], [117760, 118009, 1], [118016, 118451, 1], [118608, 118723, 1], [118784, 119029, 1], [119040, 119078, 1], [119081, 119142, 1], [119146, 119162, 1], [119171, 119172, 1], [119180, 119209, 1], [119214, 119274, 1], [119488, 119507, 1], [119520, 119539, 1], [119552, 119638, 1], [119648, 119672, 1], [119808, 119892, 1], [119894, 119964, 1], [119966, 119967, 1], [119970, 119973, 3], [119974, 119977, 3], [119978, 119980, 1], [119982, 119993, 1], [119995, 119997, 2], [119998, 120003, 1], [120005, 120069, 1], [120071, 120074, 1], [120077, 120084, 1], [120086, 120092, 1], [120094, 120121, 1], [120123, 120126, 1], [120128, 120132, 1], [120134, 120138, 4], [120139, 120144, 1], [120146, 120485, 1], [120488, 120779, 1], [120782, 120831, 1], [126065, 126132, 1], [126209, 126269, 1], [126976, 127019, 1], [127024, 127123, 1], [127136, 127150, 1], [127153, 127167, 1], [127169, 127183, 1], [127185, 127221, 1], [127232, 127405, 1], [127462, 127487, 1], [127489, 127490, 1], [127504, 127547, 1], [127552, 127560, 1], [127568, 127569, 1], [127584, 127589, 1], [127744, 128727, 1], [128732, 128748, 1], [128752, 128764, 1], [128768, 128886, 1], [128891, 128985, 1], [128992, 129003, 1], [129008, 129024, 16], [129025, 129035, 1], [129040, 129095, 1], [129104, 129113, 1], [129120, 129159, 1], [129168, 129197, 1], [129200, 129211, 1], [129216, 129217, 1], [129280, 129619, 1], [129632, 129645, 1], [129648, 129660, 1], [129664, 129673, 1], [129679, 129734, 1], [129742, 129756, 1], [129759, 129769, 1], [129776, 129784, 1], [129792, 129938, 1], [129940, 130041, 1], [917505, 917536, 31], [917537, 917631, 1]];\n  static foldCommon = [[924, 956, 32]];\n  static Coptic = [[994, 1007, 1], [11392, 11507, 1], [11513, 11519, 1]];\n  static Cuneiform = [[73728, 74649, 1], [74752, 74862, 1], [74864, 74868, 1], [74880, 75075, 1]];\n  static Cypriot = [[67584, 67589, 1], [67592, 67594, 2], [67595, 67637, 1], [67639, 67640, 1], [67644, 67647, 3]];\n  static Cypro_Minoan = [[77712, 77810, 1]];\n  static Cyrillic = [[1024, 1156, 1], [1159, 1327, 1], [7296, 7306, 1], [7467, 7544, 77], [11744, 11775, 1], [42560, 42655, 1], [65070, 65071, 1], [122928, 122989, 1], [123023, 123023, 1]];\n  static Deseret = [[66560, 66639, 1]];\n  static Devanagari = [[2304, 2384, 1], [2389, 2403, 1], [2406, 2431, 1], [43232, 43263, 1], [72448, 72457, 1]];\n  static Dives_Akuru = [[71936, 71942, 1], [71945, 71948, 3], [71949, 71955, 1], [71957, 71958, 1], [71960, 71989, 1], [71991, 71992, 1], [71995, 72006, 1], [72016, 72025, 1]];\n  static Dogra = [[71680, 71739, 1]];\n  static Duployan = [[113664, 113770, 1], [113776, 113788, 1], [113792, 113800, 1], [113808, 113817, 1], [113820, 113823, 1]];\n  static Egyptian_Hieroglyphs = [[77824, 78933, 1], [78944, 82938, 1]];\n  static Elbasan = [[66816, 66855, 1]];\n  static Elymaic = [[69600, 69622, 1]];\n  static Ethiopic = [[4608, 4680, 1], [4682, 4685, 1], [4688, 4694, 1], [4696, 4698, 2], [4699, 4701, 1], [4704, 4744, 1], [4746, 4749, 1], [4752, 4784, 1], [4786, 4789, 1], [4792, 4798, 1], [4800, 4802, 2], [4803, 4805, 1], [4808, 4822, 1], [4824, 4880, 1], [4882, 4885, 1], [4888, 4954, 1], [4957, 4988, 1], [4992, 5017, 1], [11648, 11670, 1], [11680, 11686, 1], [11688, 11694, 1], [11696, 11702, 1], [11704, 11710, 1], [11712, 11718, 1], [11720, 11726, 1], [11728, 11734, 1], [11736, 11742, 1], [43777, 43782, 1], [43785, 43790, 1], [43793, 43798, 1], [43808, 43814, 1], [43816, 43822, 1], [124896, 124902, 1], [124904, 124907, 1], [124909, 124910, 1], [124912, 124926, 1]];\n  static Garay = [[68928, 68965, 1], [68969, 68997, 1], [69006, 69007, 1]];\n  static Georgian = [[4256, 4293, 1], [4295, 4301, 6], [4304, 4346, 1], [4348, 4351, 1], [7312, 7354, 1], [7357, 7359, 1], [11520, 11557, 1], [11559, 11565, 6]];\n  static Glagolitic = [[11264, 11359, 1], [122880, 122886, 1], [122888, 122904, 1], [122907, 122913, 1], [122915, 122916, 1], [122918, 122922, 1]];\n  static Gothic = [[66352, 66378, 1]];\n  static Grantha = [[70400, 70403, 1], [70405, 70412, 1], [70415, 70416, 1], [70419, 70440, 1], [70442, 70448, 1], [70450, 70451, 1], [70453, 70457, 1], [70460, 70468, 1], [70471, 70472, 1], [70475, 70477, 1], [70480, 70487, 7], [70493, 70499, 1], [70502, 70508, 1], [70512, 70516, 1]];\n  static Greek = [[880, 883, 1], [885, 887, 1], [890, 893, 1], [895, 900, 5], [902, 904, 2], [905, 906, 1], [908, 910, 2], [911, 929, 1], [931, 993, 1], [1008, 1023, 1], [7462, 7466, 1], [7517, 7521, 1], [7526, 7530, 1], [7615, 7936, 321], [7937, 7957, 1], [7960, 7965, 1], [7968, 8005, 1], [8008, 8013, 1], [8016, 8023, 1], [8025, 8031, 2], [8032, 8061, 1], [8064, 8116, 1], [8118, 8132, 1], [8134, 8147, 1], [8150, 8155, 1], [8157, 8175, 1], [8178, 8180, 1], [8182, 8190, 1], [8486, 43877, 35391], [65856, 65934, 1], [65952, 119296, 53344], [119297, 119365, 1]];\n  static foldGreek = [[181, 837, 656]];\n  static Gujarati = [[2689, 2691, 1], [2693, 2701, 1], [2703, 2705, 1], [2707, 2728, 1], [2730, 2736, 1], [2738, 2739, 1], [2741, 2745, 1], [2748, 2757, 1], [2759, 2761, 1], [2763, 2765, 1], [2768, 2784, 16], [2785, 2787, 1], [2790, 2801, 1], [2809, 2815, 1]];\n  static Gunjala_Gondi = [[73056, 73061, 1], [73063, 73064, 1], [73066, 73102, 1], [73104, 73105, 1], [73107, 73112, 1], [73120, 73129, 1]];\n  static Gurmukhi = [[2561, 2563, 1], [2565, 2570, 1], [2575, 2576, 1], [2579, 2600, 1], [2602, 2608, 1], [2610, 2611, 1], [2613, 2614, 1], [2616, 2617, 1], [2620, 2622, 2], [2623, 2626, 1], [2631, 2632, 1], [2635, 2637, 1], [2641, 2649, 8], [2650, 2652, 1], [2654, 2662, 8], [2663, 2678, 1]];\n  static Gurung_Khema = [[90368, 90425, 1]];\n  static Han = [[11904, 11929, 1], [11931, 12019, 1], [12032, 12245, 1], [12293, 12295, 2], [12321, 12329, 1], [12344, 12347, 1], [13312, 19903, 1], [19968, 40959, 1], [63744, 64109, 1], [64112, 64217, 1], [94178, 94179, 1], [94192, 94193, 1], [131072, 173791, 1], [173824, 177977, 1], [177984, 178205, 1], [178208, 183969, 1], [183984, 191456, 1], [191472, 192093, 1], [194560, 195101, 1], [196608, 201546, 1], [201552, 205743, 1]];\n  static Hangul = [[4352, 4607, 1], [12334, 12335, 1], [12593, 12686, 1], [12800, 12830, 1], [12896, 12926, 1], [43360, 43388, 1], [44032, 55203, 1], [55216, 55238, 1], [55243, 55291, 1], [65440, 65470, 1], [65474, 65479, 1], [65482, 65487, 1], [65490, 65495, 1], [65498, 65500, 1]];\n  static Hanifi_Rohingya = [[68864, 68903, 1], [68912, 68921, 1]];\n  static Hanunoo = [[5920, 5940, 1]];\n  static Hatran = [[67808, 67826, 1], [67828, 67829, 1], [67835, 67839, 1]];\n  static Hebrew = [[1425, 1479, 1], [1488, 1514, 1], [1519, 1524, 1], [64285, 64310, 1], [64312, 64316, 1], [64318, 64320, 2], [64321, 64323, 2], [64324, 64326, 2], [64327, 64335, 1]];\n  static Hiragana = [[12353, 12438, 1], [12445, 12447, 1], [110593, 110879, 1], [110898, 110928, 30], [110929, 110930, 1], [127488, 127488, 1]];\n  static Imperial_Aramaic = [[67648, 67669, 1], [67671, 67679, 1]];\n  static Inherited = [[768, 879, 1], [1157, 1158, 1], [1611, 1621, 1], [1648, 2385, 737], [2386, 2388, 1], [6832, 6862, 1], [7376, 7378, 1], [7380, 7392, 1], [7394, 7400, 1], [7405, 7412, 7], [7416, 7417, 1], [7616, 7679, 1], [8204, 8205, 1], [8400, 8432, 1], [12330, 12333, 1], [12441, 12442, 1], [65024, 65039, 1], [65056, 65069, 1], [66045, 66272, 227], [70459, 118528, 48069], [118529, 118573, 1], [118576, 118598, 1], [119143, 119145, 1], [119163, 119170, 1], [119173, 119179, 1], [119210, 119213, 1], [917760, 917999, 1]];\n  static foldInherited = [[921, 953, 32], [8126, 8126, 1]];\n  static Inscriptional_Pahlavi = [[68448, 68466, 1], [68472, 68479, 1]];\n  static Inscriptional_Parthian = [[68416, 68437, 1], [68440, 68447, 1]];\n  static Javanese = [[43392, 43469, 1], [43472, 43481, 1], [43486, 43487, 1]];\n  static Kaithi = [[69760, 69826, 1], [69837, 69837, 1]];\n  static Kannada = [[3200, 3212, 1], [3214, 3216, 1], [3218, 3240, 1], [3242, 3251, 1], [3253, 3257, 1], [3260, 3268, 1], [3270, 3272, 1], [3274, 3277, 1], [3285, 3286, 1], [3293, 3294, 1], [3296, 3299, 1], [3302, 3311, 1], [3313, 3315, 1]];\n  static Katakana = [[12449, 12538, 1], [12541, 12543, 1], [12784, 12799, 1], [13008, 13054, 1], [13056, 13143, 1], [65382, 65391, 1], [65393, 65437, 1], [110576, 110579, 1], [110581, 110587, 1], [110589, 110590, 1], [110592, 110880, 288], [110881, 110882, 1], [110933, 110948, 15], [110949, 110951, 1]];\n  static Kawi = [[73472, 73488, 1], [73490, 73530, 1], [73534, 73562, 1]];\n  static Kayah_Li = [[43264, 43309, 1], [43311, 43311, 1]];\n  static Kharoshthi = [[68096, 68099, 1], [68101, 68102, 1], [68108, 68115, 1], [68117, 68119, 1], [68121, 68149, 1], [68152, 68154, 1], [68159, 68168, 1], [68176, 68184, 1]];\n  static Khitan_Small_Script = [[94180, 101120, 6940], [101121, 101589, 1], [101631, 101631, 1]];\n  static Khmer = [[6016, 6109, 1], [6112, 6121, 1], [6128, 6137, 1], [6624, 6655, 1]];\n  static Khojki = [[70144, 70161, 1], [70163, 70209, 1]];\n  static Khudawadi = [[70320, 70378, 1], [70384, 70393, 1]];\n  static Kirat_Rai = [[93504, 93561, 1]];\n  static Lao = [[3713, 3714, 1], [3716, 3718, 2], [3719, 3722, 1], [3724, 3747, 1], [3749, 3751, 2], [3752, 3773, 1], [3776, 3780, 1], [3782, 3784, 2], [3785, 3790, 1], [3792, 3801, 1], [3804, 3807, 1]];\n  static Latin = [[65, 90, 1], [97, 122, 1], [170, 186, 16], [192, 214, 1], [216, 246, 1], [248, 696, 1], [736, 740, 1], [7424, 7461, 1], [7468, 7516, 1], [7522, 7525, 1], [7531, 7543, 1], [7545, 7614, 1], [7680, 7935, 1], [8305, 8319, 14], [8336, 8348, 1], [8490, 8491, 1], [8498, 8526, 28], [8544, 8584, 1], [11360, 11391, 1], [42786, 42887, 1], [42891, 42957, 1], [42960, 42961, 1], [42963, 42965, 2], [42966, 42972, 1], [42994, 43007, 1], [43824, 43866, 1], [43868, 43876, 1], [43878, 43881, 1], [64256, 64262, 1], [65313, 65338, 1], [65345, 65370, 1], [67456, 67461, 1], [67463, 67504, 1], [67506, 67514, 1], [122624, 122654, 1], [122661, 122666, 1]];\n  static Lepcha = [[7168, 7223, 1], [7227, 7241, 1], [7245, 7247, 1]];\n  static Limbu = [[6400, 6430, 1], [6432, 6443, 1], [6448, 6459, 1], [6464, 6468, 4], [6469, 6479, 1]];\n  static Linear_A = [[67072, 67382, 1], [67392, 67413, 1], [67424, 67431, 1]];\n  static Linear_B = [[65536, 65547, 1], [65549, 65574, 1], [65576, 65594, 1], [65596, 65597, 1], [65599, 65613, 1], [65616, 65629, 1], [65664, 65786, 1]];\n  static Lisu = [[42192, 42239, 1], [73648, 73648, 1]];\n  static Lycian = [[66176, 66204, 1]];\n  static Lydian = [[67872, 67897, 1], [67903, 67903, 1]];\n  static Mahajani = [[69968, 70006, 1]];\n  static Makasar = [[73440, 73464, 1]];\n  static Malayalam = [[3328, 3340, 1], [3342, 3344, 1], [3346, 3396, 1], [3398, 3400, 1], [3402, 3407, 1], [3412, 3427, 1], [3430, 3455, 1]];\n  static Mandaic = [[2112, 2139, 1], [2142, 2142, 1]];\n  static Manichaean = [[68288, 68326, 1], [68331, 68342, 1]];\n  static Marchen = [[72816, 72847, 1], [72850, 72871, 1], [72873, 72886, 1]];\n  static Masaram_Gondi = [[72960, 72966, 1], [72968, 72969, 1], [72971, 73014, 1], [73018, 73020, 2], [73021, 73023, 2], [73024, 73031, 1], [73040, 73049, 1]];\n  static Medefaidrin = [[93760, 93850, 1]];\n  static Meetei_Mayek = [[43744, 43766, 1], [43968, 44013, 1], [44016, 44025, 1]];\n  static Mende_Kikakui = [[124928, 125124, 1], [125127, 125142, 1]];\n  static Meroitic_Cursive = [[68000, 68023, 1], [68028, 68047, 1], [68050, 68095, 1]];\n  static Meroitic_Hieroglyphs = [[67968, 67999, 1]];\n  static Miao = [[93952, 94026, 1], [94031, 94087, 1], [94095, 94111, 1]];\n  static Modi = [[71168, 71236, 1], [71248, 71257, 1]];\n  static Mongolian = [[6144, 6145, 1], [6148, 6150, 2], [6151, 6169, 1], [6176, 6264, 1], [6272, 6314, 1], [71264, 71276, 1]];\n  static Mro = [[92736, 92766, 1], [92768, 92777, 1], [92782, 92783, 1]];\n  static Multani = [[70272, 70278, 1], [70280, 70282, 2], [70283, 70285, 1], [70287, 70301, 1], [70303, 70313, 1]];\n  static Myanmar = [[4096, 4255, 1], [43488, 43518, 1], [43616, 43647, 1], [71376, 71395, 1]];\n  static Nabataean = [[67712, 67742, 1], [67751, 67759, 1]];\n  static Nag_Mundari = [[124112, 124153, 1]];\n  static Nandinagari = [[72096, 72103, 1], [72106, 72151, 1], [72154, 72164, 1]];\n  static New_Tai_Lue = [[6528, 6571, 1], [6576, 6601, 1], [6608, 6618, 1], [6622, 6623, 1]];\n  static Newa = [[70656, 70747, 1], [70749, 70753, 1]];\n  static Nko = [[1984, 2042, 1], [2045, 2047, 1]];\n  static Nushu = [[94177, 110960, 16783], [110961, 111355, 1]];\n  static Nyiakeng_Puachue_Hmong = [[123136, 123180, 1], [123184, 123197, 1], [123200, 123209, 1], [123214, 123215, 1]];\n  static Ogham = [[5760, 5788, 1]];\n  static Ol_Chiki = [[7248, 7295, 1]];\n  static Ol_Onal = [[124368, 124410, 1], [124415, 124415, 1]];\n  static Old_Hungarian = [[68736, 68786, 1], [68800, 68850, 1], [68858, 68863, 1]];\n  static Old_Italic = [[66304, 66339, 1], [66349, 66351, 1]];\n  static Old_North_Arabian = [[68224, 68255, 1]];\n  static Old_Permic = [[66384, 66426, 1]];\n  static Old_Persian = [[66464, 66499, 1], [66504, 66517, 1]];\n  static Old_Sogdian = [[69376, 69415, 1]];\n  static Old_South_Arabian = [[68192, 68223, 1]];\n  static Old_Turkic = [[68608, 68680, 1]];\n  static Old_Uyghur = [[69488, 69513, 1]];\n  static Oriya = [[2817, 2819, 1], [2821, 2828, 1], [2831, 2832, 1], [2835, 2856, 1], [2858, 2864, 1], [2866, 2867, 1], [2869, 2873, 1], [2876, 2884, 1], [2887, 2888, 1], [2891, 2893, 1], [2901, 2903, 1], [2908, 2909, 1], [2911, 2915, 1], [2918, 2935, 1]];\n  static Osage = [[66736, 66771, 1], [66776, 66811, 1]];\n  static Osmanya = [[66688, 66717, 1], [66720, 66729, 1]];\n  static Pahawh_Hmong = [[92928, 92997, 1], [93008, 93017, 1], [93019, 93025, 1], [93027, 93047, 1], [93053, 93071, 1]];\n  static Palmyrene = [[67680, 67711, 1]];\n  static Pau_Cin_Hau = [[72384, 72440, 1]];\n  static Phags_Pa = [[43072, 43127, 1]];\n  static Phoenician = [[67840, 67867, 1], [67871, 67871, 1]];\n  static Psalter_Pahlavi = [[68480, 68497, 1], [68505, 68508, 1], [68521, 68527, 1]];\n  static Rejang = [[43312, 43347, 1], [43359, 43359, 1]];\n  static Runic = [[5792, 5866, 1], [5870, 5880, 1]];\n  static Samaritan = [[2048, 2093, 1], [2096, 2110, 1]];\n  static Saurashtra = [[43136, 43205, 1], [43214, 43225, 1]];\n  static Sharada = [[70016, 70111, 1]];\n  static Shavian = [[66640, 66687, 1]];\n  static Siddham = [[71040, 71093, 1], [71096, 71133, 1]];\n  static SignWriting = [[120832, 121483, 1], [121499, 121503, 1], [121505, 121519, 1]];\n  static Sinhala = [[3457, 3459, 1], [3461, 3478, 1], [3482, 3505, 1], [3507, 3515, 1], [3517, 3520, 3], [3521, 3526, 1], [3530, 3535, 5], [3536, 3540, 1], [3542, 3544, 2], [3545, 3551, 1], [3558, 3567, 1], [3570, 3572, 1], [70113, 70132, 1]];\n  static Sogdian = [[69424, 69465, 1]];\n  static Sora_Sompeng = [[69840, 69864, 1], [69872, 69881, 1]];\n  static Soyombo = [[72272, 72354, 1]];\n  static Sundanese = [[7040, 7103, 1], [7360, 7367, 1]];\n  static Sunuwar = [[72640, 72673, 1], [72688, 72697, 1]];\n  static Syloti_Nagri = [[43008, 43052, 1]];\n  static Syriac = [[1792, 1805, 1], [1807, 1866, 1], [1869, 1871, 1], [2144, 2154, 1]];\n  static Tagalog = [[5888, 5909, 1], [5919, 5919, 1]];\n  static Tagbanwa = [[5984, 5996, 1], [5998, 6000, 1], [6002, 6003, 1]];\n  static Tai_Le = [[6480, 6509, 1], [6512, 6516, 1]];\n  static Tai_Tham = [[6688, 6750, 1], [6752, 6780, 1], [6783, 6793, 1], [6800, 6809, 1], [6816, 6829, 1]];\n  static Tai_Viet = [[43648, 43714, 1], [43739, 43743, 1]];\n  static Takri = [[71296, 71353, 1], [71360, 71369, 1]];\n  static Tamil = [[2946, 2947, 1], [2949, 2954, 1], [2958, 2960, 1], [2962, 2965, 1], [2969, 2970, 1], [2972, 2974, 2], [2975, 2979, 4], [2980, 2984, 4], [2985, 2986, 1], [2990, 3001, 1], [3006, 3010, 1], [3014, 3016, 1], [3018, 3021, 1], [3024, 3031, 7], [3046, 3066, 1], [73664, 73713, 1], [73727, 73727, 1]];\n  static Tangsa = [[92784, 92862, 1], [92864, 92873, 1]];\n  static Tangut = [[94176, 94208, 32], [94209, 100343, 1], [100352, 101119, 1], [101632, 101640, 1]];\n  static Telugu = [[3072, 3084, 1], [3086, 3088, 1], [3090, 3112, 1], [3114, 3129, 1], [3132, 3140, 1], [3142, 3144, 1], [3146, 3149, 1], [3157, 3158, 1], [3160, 3162, 1], [3165, 3168, 3], [3169, 3171, 1], [3174, 3183, 1], [3191, 3199, 1]];\n  static Thaana = [[1920, 1969, 1]];\n  static Thai = [[3585, 3642, 1], [3648, 3675, 1]];\n  static Tibetan = [[3840, 3911, 1], [3913, 3948, 1], [3953, 3991, 1], [3993, 4028, 1], [4030, 4044, 1], [4046, 4052, 1], [4057, 4058, 1]];\n  static Tifinagh = [[11568, 11623, 1], [11631, 11632, 1], [11647, 11647, 1]];\n  static Tirhuta = [[70784, 70855, 1], [70864, 70873, 1]];\n  static Todhri = [[67008, 67059, 1]];\n  static Toto = [[123536, 123566, 1]];\n  static Tulu_Tigalari = [[70528, 70537, 1], [70539, 70542, 3], [70544, 70581, 1], [70583, 70592, 1], [70594, 70597, 3], [70599, 70602, 1], [70604, 70613, 1], [70615, 70616, 1], [70625, 70626, 1]];\n  static Ugaritic = [[66432, 66461, 1], [66463, 66463, 1]];\n  static Vai = [[42240, 42539, 1]];\n  static Vithkuqi = [[66928, 66938, 1], [66940, 66954, 1], [66956, 66962, 1], [66964, 66965, 1], [66967, 66977, 1], [66979, 66993, 1], [66995, 67001, 1], [67003, 67004, 1]];\n  static Wancho = [[123584, 123641, 1], [123647, 123647, 1]];\n  static Warang_Citi = [[71840, 71922, 1], [71935, 71935, 1]];\n  static Yezidi = [[69248, 69289, 1], [69291, 69293, 1], [69296, 69297, 1]];\n  static Yi = [[40960, 42124, 1], [42128, 42182, 1]];\n  static Zanabazar_Square = [[72192, 72263, 1]];\n  static CATEGORIES = (() => new Map([['C', UnicodeTables.C], ['Cc', UnicodeTables.Cc], ['Cf', UnicodeTables.Cf], ['Co', UnicodeTables.Co], ['Cs', UnicodeTables.Cs], ['L', UnicodeTables.L], ['Ll', UnicodeTables.Ll], ['Lm', UnicodeTables.Lm], ['Lo', UnicodeTables.Lo], ['Lt', UnicodeTables.Lt], ['Lu', UnicodeTables.Lu], ['M', UnicodeTables.M], ['Mc', UnicodeTables.Mc], ['Me', UnicodeTables.Me], ['Mn', UnicodeTables.Mn], ['N', UnicodeTables.N], ['Nd', UnicodeTables.Nd], ['Nl', UnicodeTables.Nl], ['No', UnicodeTables.No], ['P', UnicodeTables.P], ['Pc', UnicodeTables.Pc], ['Pd', UnicodeTables.Pd], ['Pe', UnicodeTables.Pe], ['Pf', UnicodeTables.Pf], ['Pi', UnicodeTables.Pi], ['Po', UnicodeTables.Po], ['Ps', UnicodeTables.Ps], ['S', UnicodeTables.S], ['Sc', UnicodeTables.Sc], ['Sk', UnicodeTables.Sk], ['Sm', UnicodeTables.Sm], ['So', UnicodeTables.So], ['Z', UnicodeTables.Z], ['Zl', UnicodeTables.Zl], ['Zp', UnicodeTables.Zp], ['Zs', UnicodeTables.Zs]]))();\n  static SCRIPTS = (() => new Map([['Adlam', UnicodeTables.Adlam], ['Ahom', UnicodeTables.Ahom], ['Anatolian_Hieroglyphs', UnicodeTables.Anatolian_Hieroglyphs], ['Arabic', UnicodeTables.Arabic], ['Armenian', UnicodeTables.Armenian], ['Avestan', UnicodeTables.Avestan], ['Balinese', UnicodeTables.Balinese], ['Bamum', UnicodeTables.Bamum], ['Bassa_Vah', UnicodeTables.Bassa_Vah], ['Batak', UnicodeTables.Batak], ['Bengali', UnicodeTables.Bengali], ['Bhaiksuki', UnicodeTables.Bhaiksuki], ['Bopomofo', UnicodeTables.Bopomofo], ['Brahmi', UnicodeTables.Brahmi], ['Braille', UnicodeTables.Braille], ['Buginese', UnicodeTables.Buginese], ['Buhid', UnicodeTables.Buhid], ['Canadian_Aboriginal', UnicodeTables.Canadian_Aboriginal], ['Carian', UnicodeTables.Carian], ['Caucasian_Albanian', UnicodeTables.Caucasian_Albanian], ['Chakma', UnicodeTables.Chakma], ['Cham', UnicodeTables.Cham], ['Cherokee', UnicodeTables.Cherokee], ['Chorasmian', UnicodeTables.Chorasmian], ['Common', UnicodeTables.Common], ['Coptic', UnicodeTables.Coptic], ['Cuneiform', UnicodeTables.Cuneiform], ['Cypriot', UnicodeTables.Cypriot], ['Cypro_Minoan', UnicodeTables.Cypro_Minoan], ['Cyrillic', UnicodeTables.Cyrillic], ['Deseret', UnicodeTables.Deseret], ['Devanagari', UnicodeTables.Devanagari], ['Dives_Akuru', UnicodeTables.Dives_Akuru], ['Dogra', UnicodeTables.Dogra], ['Duployan', UnicodeTables.Duployan], ['Egyptian_Hieroglyphs', UnicodeTables.Egyptian_Hieroglyphs], ['Elbasan', UnicodeTables.Elbasan], ['Elymaic', UnicodeTables.Elymaic], ['Ethiopic', UnicodeTables.Ethiopic], ['Garay', UnicodeTables.Garay], ['Georgian', UnicodeTables.Georgian], ['Glagolitic', UnicodeTables.Glagolitic], ['Gothic', UnicodeTables.Gothic], ['Grantha', UnicodeTables.Grantha], ['Greek', UnicodeTables.Greek], ['Gujarati', UnicodeTables.Gujarati], ['Gunjala_Gondi', UnicodeTables.Gunjala_Gondi], ['Gurmukhi', UnicodeTables.Gurmukhi], ['Gurung_Khema', UnicodeTables.Gurung_Khema], ['Han', UnicodeTables.Han], ['Hangul', UnicodeTables.Hangul], ['Hanifi_Rohingya', UnicodeTables.Hanifi_Rohingya], ['Hanunoo', UnicodeTables.Hanunoo], ['Hatran', UnicodeTables.Hatran], ['Hebrew', UnicodeTables.Hebrew], ['Hiragana', UnicodeTables.Hiragana], ['Imperial_Aramaic', UnicodeTables.Imperial_Aramaic], ['Inherited', UnicodeTables.Inherited], ['Inscriptional_Pahlavi', UnicodeTables.Inscriptional_Pahlavi], ['Inscriptional_Parthian', UnicodeTables.Inscriptional_Parthian], ['Javanese', UnicodeTables.Javanese], ['Kaithi', UnicodeTables.Kaithi], ['Kannada', UnicodeTables.Kannada], ['Katakana', UnicodeTables.Katakana], ['Kawi', UnicodeTables.Kawi], ['Kayah_Li', UnicodeTables.Kayah_Li], ['Kharoshthi', UnicodeTables.Kharoshthi], ['Khitan_Small_Script', UnicodeTables.Khitan_Small_Script], ['Khmer', UnicodeTables.Khmer], ['Khojki', UnicodeTables.Khojki], ['Khudawadi', UnicodeTables.Khudawadi], ['Kirat_Rai', UnicodeTables.Kirat_Rai], ['Lao', UnicodeTables.Lao], ['Latin', UnicodeTables.Latin], ['Lepcha', UnicodeTables.Lepcha], ['Limbu', UnicodeTables.Limbu], ['Linear_A', UnicodeTables.Linear_A], ['Linear_B', UnicodeTables.Linear_B], ['Lisu', UnicodeTables.Lisu], ['Lycian', UnicodeTables.Lycian], ['Lydian', UnicodeTables.Lydian], ['Mahajani', UnicodeTables.Mahajani], ['Makasar', UnicodeTables.Makasar], ['Malayalam', UnicodeTables.Malayalam], ['Mandaic', UnicodeTables.Mandaic], ['Manichaean', UnicodeTables.Manichaean], ['Marchen', UnicodeTables.Marchen], ['Masaram_Gondi', UnicodeTables.Masaram_Gondi], ['Medefaidrin', UnicodeTables.Medefaidrin], ['Meetei_Mayek', UnicodeTables.Meetei_Mayek], ['Mende_Kikakui', UnicodeTables.Mende_Kikakui], ['Meroitic_Cursive', UnicodeTables.Meroitic_Cursive], ['Meroitic_Hieroglyphs', UnicodeTables.Meroitic_Hieroglyphs], ['Miao', UnicodeTables.Miao], ['Modi', UnicodeTables.Modi], ['Mongolian', UnicodeTables.Mongolian], ['Mro', UnicodeTables.Mro], ['Multani', UnicodeTables.Multani], ['Myanmar', UnicodeTables.Myanmar], ['Nabataean', UnicodeTables.Nabataean], ['Nag_Mundari', UnicodeTables.Nag_Mundari], ['Nandinagari', UnicodeTables.Nandinagari], ['New_Tai_Lue', UnicodeTables.New_Tai_Lue], ['Newa', UnicodeTables.Newa], ['Nko', UnicodeTables.Nko], ['Nushu', UnicodeTables.Nushu], ['Nyiakeng_Puachue_Hmong', UnicodeTables.Nyiakeng_Puachue_Hmong], ['Ogham', UnicodeTables.Ogham], ['Ol_Chiki', UnicodeTables.Ol_Chiki], ['Ol_Onal', UnicodeTables.Ol_Onal], ['Old_Hungarian', UnicodeTables.Old_Hungarian], ['Old_Italic', UnicodeTables.Old_Italic], ['Old_North_Arabian', UnicodeTables.Old_North_Arabian], ['Old_Permic', UnicodeTables.Old_Permic], ['Old_Persian', UnicodeTables.Old_Persian], ['Old_Sogdian', UnicodeTables.Old_Sogdian], ['Old_South_Arabian', UnicodeTables.Old_South_Arabian], ['Old_Turkic', UnicodeTables.Old_Turkic], ['Old_Uyghur', UnicodeTables.Old_Uyghur], ['Oriya', UnicodeTables.Oriya], ['Osage', UnicodeTables.Osage], ['Osmanya', UnicodeTables.Osmanya], ['Pahawh_Hmong', UnicodeTables.Pahawh_Hmong], ['Palmyrene', UnicodeTables.Palmyrene], ['Pau_Cin_Hau', UnicodeTables.Pau_Cin_Hau], ['Phags_Pa', UnicodeTables.Phags_Pa], ['Phoenician', UnicodeTables.Phoenician], ['Psalter_Pahlavi', UnicodeTables.Psalter_Pahlavi], ['Rejang', UnicodeTables.Rejang], ['Runic', UnicodeTables.Runic], ['Samaritan', UnicodeTables.Samaritan], ['Saurashtra', UnicodeTables.Saurashtra], ['Sharada', UnicodeTables.Sharada], ['Shavian', UnicodeTables.Shavian], ['Siddham', UnicodeTables.Siddham], ['SignWriting', UnicodeTables.SignWriting], ['Sinhala', UnicodeTables.Sinhala], ['Sogdian', UnicodeTables.Sogdian], ['Sora_Sompeng', UnicodeTables.Sora_Sompeng], ['Soyombo', UnicodeTables.Soyombo], ['Sundanese', UnicodeTables.Sundanese], ['Sunuwar', UnicodeTables.Sunuwar], ['Syloti_Nagri', UnicodeTables.Syloti_Nagri], ['Syriac', UnicodeTables.Syriac], ['Tagalog', UnicodeTables.Tagalog], ['Tagbanwa', UnicodeTables.Tagbanwa], ['Tai_Le', UnicodeTables.Tai_Le], ['Tai_Tham', UnicodeTables.Tai_Tham], ['Tai_Viet', UnicodeTables.Tai_Viet], ['Takri', UnicodeTables.Takri], ['Tamil', UnicodeTables.Tamil], ['Tangsa', UnicodeTables.Tangsa], ['Tangut', UnicodeTables.Tangut], ['Telugu', UnicodeTables.Telugu], ['Thaana', UnicodeTables.Thaana], ['Thai', UnicodeTables.Thai], ['Tibetan', UnicodeTables.Tibetan], ['Tifinagh', UnicodeTables.Tifinagh], ['Tirhuta', UnicodeTables.Tirhuta], ['Todhri', UnicodeTables.Todhri], ['Toto', UnicodeTables.Toto], ['Tulu_Tigalari', UnicodeTables.Tulu_Tigalari], ['Ugaritic', UnicodeTables.Ugaritic], ['Vai', UnicodeTables.Vai], ['Vithkuqi', UnicodeTables.Vithkuqi], ['Wancho', UnicodeTables.Wancho], ['Warang_Citi', UnicodeTables.Warang_Citi], ['Yezidi', UnicodeTables.Yezidi], ['Yi', UnicodeTables.Yi], ['Zanabazar_Square', UnicodeTables.Zanabazar_Square]]))();\n  static FOLD_CATEGORIES = (() => new Map([['L', UnicodeTables.foldL], ['Ll', UnicodeTables.foldLl], ['Lt', UnicodeTables.foldLt], ['Lu', UnicodeTables.foldLu], ['M', UnicodeTables.foldM], ['Mn', UnicodeTables.foldMn]]))();\n  static FOLD_SCRIPT = (() => new Map([['Common', UnicodeTables.foldCommon], ['Greek', UnicodeTables.foldGreek], ['Inherited', UnicodeTables.foldInherited]]))();\n}\n\n/**\n * Utilities for dealing with Unicode better than JS does.\n */\nclass Unicode {\n  // The highest legal rune value.\n  static MAX_RUNE = 0x10ffff;\n  // The highest legal ASCII value.\n  static MAX_ASCII = 0x7f;\n  // The highest legal Latin-1 value.\n  static MAX_LATIN1 = 0xff;\n  // The highest legal Basic Multilingual Plane (BMP) value.\n  static MAX_BMP = 0xffff;\n  // Minimum and maximum runes involved in folding.\n  // Checked during test.\n  static MIN_FOLD = 0x0041;\n  static MAX_FOLD = 0x1e943;\n\n  // is32 uses binary search to test whether rune is in the specified\n  // slice of 32-bit ranges.\n  static is32(ranges, r) {\n    // binary search over ranges\n    let lo = 0;\n    let hi = ranges.length;\n    while (lo < hi) {\n      let m = lo + Math.floor((hi - lo) / 2);\n      let range = ranges[m];\n      if (range[0] <= r && r <= range[1]) {\n        return (r - range[0]) % range[2] === 0;\n      }\n      if (r < range[0]) {\n        hi = m;\n      } else {\n        lo = m + 1;\n      }\n    }\n    return false;\n  }\n\n  // is tests whether rune is in the specified table of ranges.\n  static is(ranges, r) {\n    // common case: rune is ASCII or Latin-1, so use linear search.\n    if (r <= this.MAX_LATIN1) {\n      for (let range of ranges) {\n        // range = [lo, hi, stride]\n        if (r > range[1]) {\n          continue;\n        }\n        if (r < range[0]) {\n          return false;\n        }\n        return (r - range[0]) % range[2] === 0;\n      }\n      return false;\n    }\n    return ranges.length > 0 && r >= ranges[0][0] && this.is32(ranges, r);\n  }\n\n  // isUpper reports whether the rune is an upper case letter.\n  static isUpper(r) {\n    if (r <= this.MAX_LATIN1) {\n      const s = String.fromCodePoint(r);\n      return s.toUpperCase() === s && s.toLowerCase() !== s;\n    }\n    return this.is(UnicodeTables.Upper, r);\n  }\n\n  // isPrint reports whether the rune is printable (Unicode L/M/N/P/S or ' ').\n  static isPrint(r) {\n    if (r <= this.MAX_LATIN1) {\n      return r >= 0x20 && r < 0x7f || r >= 0xa1 && r !== 0xad;\n    }\n    return this.is(UnicodeTables.L, r) || this.is(UnicodeTables.M, r) || this.is(UnicodeTables.N, r) || this.is(UnicodeTables.P, r) || this.is(UnicodeTables.S, r);\n  }\n\n  // simpleFold iterates over Unicode code points equivalent under\n  // the Unicode-defined simple case folding.  Among the code points\n  // equivalent to rune (including rune itself), SimpleFold returns the\n  // smallest r >= rune if one exists, or else the smallest r >= 0.\n  //\n  // For example:\n  //      SimpleFold('A') = 'a'\n  //      SimpleFold('a') = 'A'\n  //\n  //      SimpleFold('K') = 'k'\n  //      SimpleFold('k') = '\\u212A' (Kelvin symbol, K)\n  //      SimpleFold('\\u212A') = 'K'\n  //\n  //      SimpleFold('1') = '1'\n  //\n  // Derived from Go's unicode.SimpleFold.\n  //\n  static simpleFold(r) {\n    // Consult caseOrbit table for special cases.\n    if (UnicodeTables.CASE_ORBIT.has(r)) {\n      return UnicodeTables.CASE_ORBIT.get(r);\n    }\n\n    // No folding specified.  This is a one- or two-element\n    // equivalence class containing rune and toLower(rune)\n    // and toUpper(rune) if they are different from rune.\n    const l = Codepoint.toLowerCase(r);\n    if (l !== r) {\n      return l;\n    }\n    return Codepoint.toUpperCase(r);\n  }\n\n  // equalsIgnoreCase performs case-insensitive equality comparison\n  // on the given runes |r1| and |r2|, with special consideration\n  // for the likely scenario where both runes are ASCII characters.\n  // If non-ASCII, Unicode case folding will be performed on |r1|\n  // to compare it to |r2|.\n  // -1 is interpreted as the end-of-file mark.\n  static equalsIgnoreCase(r1, r2) {\n    // Runes already match, or one of them is EOF\n    if (r1 < 0 || r2 < 0 || r1 === r2) {\n      return true;\n    }\n\n    // Fast path for the common case where both runes are ASCII characters.\n    // Coerces both runes to lowercase if applicable.\n    if (r1 <= this.MAX_ASCII && r2 <= this.MAX_ASCII) {\n      if (Codepoint.CODES.get('A') <= r1 && r1 <= Codepoint.CODES.get('Z')) {\n        r1 |= 0x20;\n      }\n      if (Codepoint.CODES.get('A') <= r2 && r2 <= Codepoint.CODES.get('Z')) {\n        r2 |= 0x20;\n      }\n      return r1 === r2;\n    }\n\n    // Fall back to full Unicode case folding otherwise.\n    // Invariant: r1 must be non-negative\n    for (let r = this.simpleFold(r1); r !== r1; r = this.simpleFold(r)) {\n      if (r === r2) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Various constants and helper utilities.\n */\nclass Utils {\n  static METACHARACTERS = '\\\\.+*?()|[]{}^$';\n\n  //// EMPTY_* flags\n  static EMPTY_BEGIN_LINE = 0x01;\n  static EMPTY_END_LINE = 0x02;\n  static EMPTY_BEGIN_TEXT = 0x04;\n  static EMPTY_END_TEXT = 0x08;\n  static EMPTY_WORD_BOUNDARY = 0x10;\n  static EMPTY_NO_WORD_BOUNDARY = 0x20;\n  static EMPTY_ALL = (() => -1)();\n  static emptyInts() {\n    return [];\n  }\n\n  // Returns true iff |c| is an ASCII letter or decimal digit.\n  static isalnum(c) {\n    return Codepoint.CODES.get('0') <= c && c <= Codepoint.CODES.get('9') || Codepoint.CODES.get('a') <= c && c <= Codepoint.CODES.get('z') || Codepoint.CODES.get('A') <= c && c <= Codepoint.CODES.get('Z');\n  }\n\n  // If |c| is an ASCII hex digit, returns its value, otherwise -1.\n  static unhex(c) {\n    if (Codepoint.CODES.get('0') <= c && c <= Codepoint.CODES.get('9')) {\n      return c - Codepoint.CODES.get('0');\n    }\n    if (Codepoint.CODES.get('a') <= c && c <= Codepoint.CODES.get('f')) {\n      return c - Codepoint.CODES.get('a') + 10;\n    }\n    if (Codepoint.CODES.get('A') <= c && c <= Codepoint.CODES.get('F')) {\n      return c - Codepoint.CODES.get('A') + 10;\n    }\n    return -1;\n  }\n\n  // Appends a RE2 literal to |out| for rune |rune|,\n  // with regexp metacharacters escaped.\n  static escapeRune(rune) {\n    let out = '';\n    if (Unicode.isPrint(rune)) {\n      if (this.METACHARACTERS.indexOf(String.fromCodePoint(rune)) >= 0) {\n        out += '\\\\';\n      }\n      out += String.fromCodePoint(rune);\n    } else {\n      switch (rune) {\n        case Codepoint.CODES.get('\"'):\n          // '\"'\n          out += '\\\\\"';\n          break;\n        case Codepoint.CODES.get('\\\\'):\n          // '\\\\'\n          out += '\\\\\\\\';\n          break;\n        case Codepoint.CODES.get('\\t'):\n          // '\\t'\n          out += '\\\\t';\n          break;\n        case Codepoint.CODES.get('\\n'):\n          // '\\n'\n          out += '\\\\n';\n          break;\n        case Codepoint.CODES.get('\\r'):\n          // '\\r'\n          out += '\\\\r';\n          break;\n        case Codepoint.CODES.get('\\b'):\n          // '\\b'\n          out += '\\\\b';\n          break;\n        case Codepoint.CODES.get('\\f'):\n          // '\\f'\n          out += '\\\\f';\n          break;\n        default:\n          {\n            let s = rune.toString(16);\n            if (rune < 0x100) {\n              out += '\\\\x';\n              if (s.length === 1) {\n                out += '0';\n              }\n              out += s;\n            } else {\n              out += `\\\\x{${s}}`;\n            }\n            break;\n          }\n      }\n    }\n    return out;\n  }\n\n  // Returns the array of runes in the specified Java UTF-16 string.\n  static stringToRunes(str) {\n    return String(str).split('').map(s => s.codePointAt(0));\n  }\n\n  // Returns the Java UTF-16 string containing the single rune |r|.\n  static runeToString(r) {\n    return String.fromCodePoint(r);\n  }\n\n  // isWordRune reports whether r is consider a ``word character''\n  // during the evaluation of the \\b and \\B zero-width assertions.\n  // These assertions are ASCII-only: the word characters are [A-Za-z0-9_].\n  static isWordRune(r) {\n    return Codepoint.CODES.get('a') <= r && r <= Codepoint.CODES.get('z') || Codepoint.CODES.get('A') <= r && r <= Codepoint.CODES.get('Z') || Codepoint.CODES.get('0') <= r && r <= Codepoint.CODES.get('9') || r === Codepoint.CODES.get('_');\n  }\n\n  // emptyOpContext returns the zero-width assertions satisfied at the position\n  // between the runes r1 and r2, a bitmask of EMPTY_* flags.\n  // Passing r1 == -1 indicates that the position is at the beginning of the\n  // text.\n  // Passing r2 == -1 indicates that the position is at the end of the text.\n  // eslint-disable-next-line no-warning-comments\n  // TODO(adonovan): move to Machine.\n  static emptyOpContext(r1, r2) {\n    let op = 0;\n    if (r1 < 0) {\n      op |= this.EMPTY_BEGIN_TEXT | this.EMPTY_BEGIN_LINE;\n    }\n    if (r1 === Codepoint.CODES.get('\\n')) {\n      op |= this.EMPTY_BEGIN_LINE;\n    }\n    if (r2 < 0) {\n      op |= this.EMPTY_END_TEXT | this.EMPTY_END_LINE;\n    }\n    if (r2 === Codepoint.CODES.get('\\n')) {\n      op |= this.EMPTY_END_LINE;\n    }\n    if (this.isWordRune(r1) !== this.isWordRune(r2)) {\n      op |= this.EMPTY_WORD_BOUNDARY;\n    } else {\n      op |= this.EMPTY_NO_WORD_BOUNDARY;\n    }\n    return op;\n  }\n\n  /**\n   * Returns a string that quotes all regular expression metacharacters inside the argument text;\n   * the returned string is a regular expression matching the literal text. For example,\n   * {@code quoteMeta(\"[foo]\").equals(\"\\\\[foo\\\\]\")}.\n   * @param {string} s\n   * @returns {string}\n   */\n  static quoteMeta(str) {\n    return str.split('') // A char loop is correct because all metacharacters fit in one UTF-16 code.\n    .map(s => {\n      if (this.METACHARACTERS.indexOf(s) >= 0) {\n        return `\\\\${s}`;\n      }\n      return s;\n    }).join('');\n  }\n  static charCount(codePoint) {\n    return codePoint > Unicode.MAX_BMP ? 2 : 1;\n  }\n  static stringToUtf8ByteArray(str) {\n    if (globalThis.TextEncoder) {\n      return Array.from(new TextEncoder().encode(str));\n    } else {\n      // fallback, if no TextEncoder\n      let out = [],\n        p = 0;\n      for (let i = 0; i < str.length; i++) {\n        let c = str.charCodeAt(i);\n        if (c < 128) {\n          out[p++] = c;\n        } else if (c < 2048) {\n          out[p++] = c >> 6 | 192;\n          out[p++] = c & 63 | 128;\n        } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n          // Surrogate Pair\n          c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n          out[p++] = c >> 18 | 240;\n          out[p++] = c >> 12 & 63 | 128;\n          out[p++] = c >> 6 & 63 | 128;\n          out[p++] = c & 63 | 128;\n        } else {\n          out[p++] = c >> 12 | 224;\n          out[p++] = c >> 6 & 63 | 128;\n          out[p++] = c & 63 | 128;\n        }\n      }\n      return out;\n    }\n  }\n  static utf8ByteArrayToString(bytes) {\n    if (globalThis.TextDecoder) {\n      return new TextDecoder('utf-8').decode(new Uint8Array(bytes));\n    } else {\n      // fallback, if no TextDecoder\n      let out = [],\n        pos = 0,\n        c = 0;\n      while (pos < bytes.length) {\n        let c1 = bytes[pos++];\n        if (c1 < 128) {\n          out[c++] = String.fromCharCode(c1);\n        } else if (c1 > 191 && c1 < 224) {\n          let c2 = bytes[pos++];\n          out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);\n        } else if (c1 > 239 && c1 < 365) {\n          // Surrogate Pair\n          let c2 = bytes[pos++];\n          let c3 = bytes[pos++];\n          let c4 = bytes[pos++];\n          let u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;\n          out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n          out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n        } else {\n          let c2 = bytes[pos++];\n          let c3 = bytes[pos++];\n          out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n        }\n      }\n      return out.join('');\n    }\n  }\n}\n\n// helper to create enums\n// example\n// Encoding[(Encoding['UTF_16'] = 0)] = 'UTF_16'\n// Encoding[(Encoding['UTF_8'] = 1)] = 'UTF_8'\nconst createEnum = (values = [], initNum = 0) => {\n  const enumObject = {};\n  for (let i = 0; i < values.length; i++) {\n    const val = values[i];\n    const keyVal = initNum + i;\n    enumObject[val] = keyVal;\n    enumObject[keyVal] = val;\n  }\n  return Object.freeze(enumObject);\n};\n\n/**\n * Abstract the representations of input text supplied to Matcher.\n */\nclass MatcherInputBase {\n  static Encoding = (() => createEnum(['UTF_16', 'UTF_8']))();\n  getEncoding() {\n    throw Error('not implemented');\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  isUTF8Encoding() {\n    return this.getEncoding() === MatcherInputBase.Encoding.UTF_8;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  isUTF16Encoding() {\n    return this.getEncoding() === MatcherInputBase.Encoding.UTF_16;\n  }\n}\nclass Utf8MatcherInput extends MatcherInputBase {\n  constructor(bytes = null) {\n    super();\n    this.bytes = bytes;\n  }\n  getEncoding() {\n    return MatcherInputBase.Encoding.UTF_8;\n  }\n  /**\n   *\n   * @returns {string}\n   */\n  asCharSequence() {\n    return Utils.utf8ByteArrayToString(this.bytes);\n  }\n\n  /**\n   *\n   * @returns {number[]}\n   */\n  asBytes() {\n    return this.bytes;\n  }\n\n  /**\n   *\n   * @returns {number}\n   */\n  length() {\n    return this.bytes.length;\n  }\n}\nclass Utf16MatcherInput extends MatcherInputBase {\n  constructor(charSequence = null) {\n    super();\n    this.charSequence = charSequence;\n  }\n  getEncoding() {\n    return MatcherInputBase.Encoding.UTF_16;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  asCharSequence() {\n    return this.charSequence;\n  }\n\n  /**\n   *\n   * @returns {number[]}\n   */\n  asBytes() {\n    return this.charSequence.toString().split('').map(s => s.codePointAt(0));\n  }\n\n  /**\n   *\n   * @returns {number}\n   */\n  length() {\n    return this.charSequence.length;\n  }\n}\nclass MatcherInput {\n  /**\n   * Return the MatcherInput for UTF_16 encoding.\n   * @returns {Utf16MatcherInput}\n   */\n  static utf16(charSequence) {\n    return new Utf16MatcherInput(charSequence);\n  }\n\n  /**\n   * Return the MatcherInput for UTF_8 encoding.\n   * @returns {Utf8MatcherInput}\n   */\n  static utf8(input) {\n    if (Array.isArray(input)) {\n      return new Utf8MatcherInput(input);\n    }\n    return new Utf8MatcherInput(Utils.stringToUtf8ByteArray(input));\n  }\n}\n\nclass RE2JSException extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'RE2JSException';\n  }\n}\n\n/**\n * An exception thrown by the parser if the pattern was invalid.\n */\nclass RE2JSSyntaxException extends RE2JSException {\n  constructor(error, input = null) {\n    let message = `error parsing regexp: ${error}`;\n    if (input) {\n      message += `: \\`${input}\\``;\n    }\n    super(message);\n    this.name = 'RE2JSSyntaxException';\n    this.message = message;\n    this.error = error;\n    this.input = input;\n  }\n\n  /**\n   * Retrieves the description of the error.\n   */\n  getDescription() {\n    return this.error;\n  }\n\n  /**\n   * Retrieves the erroneous regular-expression pattern.\n   */\n  getPattern() {\n    return this.input;\n  }\n}\n\n/**\n * An exception thrown by the compiler\n */\nclass RE2JSCompileException extends RE2JSException {\n  constructor(message) {\n    super(message);\n    this.name = 'RE2JSCompileException';\n  }\n}\n\n/**\n * An exception thrown by using groups\n */\nclass RE2JSGroupException extends RE2JSException {\n  constructor(message) {\n    super(message);\n    this.name = 'RE2JSGroupException';\n  }\n}\n\n/**\n * An exception thrown by flags\n */\nclass RE2JSFlagsException extends RE2JSException {\n  constructor(message) {\n    super(message);\n    this.name = 'RE2JSFlagsException';\n  }\n}\n\n/**\n * A stateful iterator that interprets a regex {@code RE2JS} on a specific input.\n *\n * Conceptually, a Matcher consists of four parts:\n * <ol>\n * <li>A compiled regular expression {@code RE2JS}, set at construction and fixed for the lifetime\n * of the matcher.</li>\n *\n * <li>The remainder of the input string, set at construction or {@link #reset()} and advanced by\n * each match operation such as {@link #find}, {@link #matches} or {@link #lookingAt}.</li>\n *\n * <li>The current match information, accessible via {@link #start}, {@link #end}, and\n * {@link #group}, and updated by each match operation.</li>\n *\n * <li>The append position, used and advanced by {@link #appendReplacement} and {@link #appendTail}\n * if performing a search and replace from the input to an external {@code StringBuffer}.\n *\n * </ol>\n *\n *\n * @author rsc@google.com (Russ Cox)\n */\nclass Matcher {\n  /**\n   * Quotes '\\' and '$' in {@code s}, so that the returned string could be used in\n   * {@link #appendReplacement} as a literal replacement of {@code s}.\n   *\n   * @param {string} str the string to be quoted\n   * @returns {string} the quoted string\n   */\n  static quoteReplacement(str) {\n    if (str.indexOf('\\\\') < 0 && str.indexOf('$') < 0) {\n      return str;\n    }\n    return str.split('').map(s => {\n      const c = s.codePointAt(0);\n      if (c === Codepoint.CODES['\\\\'] || c === Codepoint.CODES['$']) {\n        return `\\\\${s}`;\n      }\n      return s;\n    }).join('');\n  }\n  /**\n   *\n   * @param {RE2JS} pattern\n   * @param {Utf8MatcherInput|Utf16MatcherInput|number[]|string} input\n   */\n  constructor(pattern, input) {\n    if (pattern === null) {\n      throw new Error('pattern is null');\n    }\n    // The pattern being matched.\n    this.patternInput = pattern;\n    const re2 = this.patternInput.re2();\n    // The number of submatches (groups) in the pattern.\n    this.patternGroupCount = re2.numberOfCapturingGroups();\n    // The group indexes, in [start, end) pairs.  Zeroth pair is overall match.\n    this.groups = [];\n    this.namedGroups = re2.namedGroups;\n    this.numberOfInstructions = re2.numberOfInstructions();\n    if (input instanceof MatcherInputBase) {\n      this.resetMatcherInput(input);\n    } else if (Array.isArray(input)) {\n      this.resetMatcherInput(MatcherInput.utf8(input));\n    } else {\n      this.resetMatcherInput(MatcherInput.utf16(input));\n    }\n  }\n\n  /**\n   * Returns the {@code RE2JS} associated with this {@code Matcher}.\n   * @returns {RE2JS}\n   */\n  pattern() {\n    return this.patternInput;\n  }\n\n  /**\n   * Resets the {@code Matcher}, rewinding input and discarding any match information.\n   *\n   * @returns {Matcher} the {@code Matcher} itself, for chained method calls\n   */\n  reset() {\n    // The input length in UTF16 codes.\n    this.matcherInputLength = this.matcherInput.length();\n    // The append position: where the next append should start.\n    this.appendPos = 0;\n    // Is there a current match?\n    this.hasMatch = false;\n    // Have we found the submatches (groups) of the current match?\n    // group[0], group[1] are set regardless.\n    this.hasGroups = false;\n    // The anchor flag to use when repeating the match to find subgroups.\n    this.anchorFlag = 0;\n    return this;\n  }\n\n  /**\n   * Resets the {@code Matcher} and changes the input.\n   * @returns {Matcher} the {@code Matcher} itself, for chained method calls\n   */\n  resetMatcherInput(input) {\n    if (input === null) {\n      throw new Error('input is null');\n    }\n    this.matcherInput = input;\n    this.reset();\n    return this;\n  }\n\n  /**\n   * Returns the start of the named group of the most recent match, or -1 if the group was not\n   * matched.\n   * @param {string|number} [group=0]\n   * @returns {string}\n   */\n  start(group = 0) {\n    if (typeof group === 'string') {\n      const groupInt = this.namedGroups[group];\n      if (!Number.isFinite(groupInt)) {\n        throw new RE2JSGroupException(`group '${group}' not found`);\n      }\n      group = groupInt;\n    }\n    this.loadGroup(group);\n    return this.groups[2 * group];\n  }\n\n  /**\n   * Returns the end of the named group of the most recent match, or -1 if the group was not\n   * matched.\n   * @param {string|number} [group=0]\n   * @returns {string}\n   */\n  end(group = 0) {\n    if (typeof group === 'string') {\n      const groupInt = this.namedGroups[group];\n      if (!Number.isFinite(groupInt)) {\n        throw new RE2JSGroupException(`group '${group}' not found`);\n      }\n      group = groupInt;\n    }\n    this.loadGroup(group);\n    return this.groups[2 * group + 1];\n  }\n\n  /**\n   * Returns the program size of this pattern.\n   *\n   * <p>\n   * Similar to the C++ implementation, the program size is a very approximate measure of a regexp's\n   * \"cost\". Larger numbers are more expensive than smaller numbers.\n   * </p>\n   *\n   * @returns {number} the program size of this pattern\n   */\n  programSize() {\n    return this.numberOfInstructions;\n  }\n\n  /**\n   * Returns the named group of the most recent match, or {@code null} if the group was not matched.\n   * @param {string|number} [group=0]\n   * @returns {string}\n   */\n  group(group = 0) {\n    if (typeof group === 'string') {\n      const groupInt = this.namedGroups[group];\n      if (!Number.isFinite(groupInt)) {\n        throw new RE2JSGroupException(`group '${group}' not found`);\n      }\n      group = groupInt;\n    }\n    const start = this.start(group);\n    const end = this.end(group);\n    if (start < 0 && end < 0) {\n      return null;\n    }\n    return this.substring(start, end);\n  }\n  /**\n   * Returns the number of subgroups in this pattern.\n   *\n   * @returns {number} the number of subgroups; the overall match (group 0) does not count\n   */\n  groupCount() {\n    return this.patternGroupCount;\n  }\n\n  /**\n   * Helper: finds subgroup information if needed for group.\n   * @param {number} group\n   * @private\n   */\n  loadGroup(group) {\n    if (group < 0 || group > this.patternGroupCount) {\n      throw new RE2JSGroupException(`Group index out of bounds: ${group}`);\n    }\n    if (!this.hasMatch) {\n      throw new RE2JSGroupException('perhaps no match attempted');\n    }\n    if (group === 0 || this.hasGroups) {\n      return;\n    }\n    let end = this.groups[1] + 1;\n    if (end > this.matcherInputLength) {\n      end = this.matcherInputLength;\n    }\n    const res = this.patternInput.re2().matchMachineInput(this.matcherInput, this.groups[0], end, this.anchorFlag, 1 + this.patternGroupCount);\n    const ok = res[0];\n    if (!ok) {\n      throw new RE2JSGroupException('inconsistency in matching group data');\n    }\n    this.groups = res[1];\n    this.hasGroups = true;\n  }\n\n  /**\n   * Matches the entire input against the pattern (anchored start and end). If there is a match,\n   * {@code matches} sets the match state to describe it.\n   *\n   * @returns {boolean} true if the entire input matches the pattern\n   */\n  matches() {\n    return this.genMatch(0, RE2Flags.ANCHOR_BOTH);\n  }\n\n  /**\n   * Matches the beginning of input against the pattern (anchored start). If there is a match,\n   * {@code lookingAt} sets the match state to describe it.\n   *\n   * @returns {boolean} true if the beginning of the input matches the pattern\n   */\n  lookingAt() {\n    return this.genMatch(0, RE2Flags.ANCHOR_START);\n  }\n\n  /**\n   * Matches the input against the pattern (unanchored), starting at a specified position. If there\n   * is a match, {@code find} sets the match state to describe it.\n   *\n   * @param {string|number} [start=null] the input position where the search begins\n   * @returns {boolean} if it finds a match\n   * @throws IndexOutOfBoundsException if start is not a valid input position\n   */\n  find(start = null) {\n    if (start !== null) {\n      if (start < 0 || start > this.matcherInputLength) {\n        throw new RE2JSGroupException(`start index out of bounds: ${start}`);\n      }\n      this.reset();\n      return this.genMatch(start, 0);\n    }\n    // no start\n    start = 0;\n    if (this.hasMatch) {\n      start = this.groups[1];\n      if (this.groups[0] === this.groups[1]) {\n        start++;\n      }\n    }\n    return this.genMatch(start, RE2Flags.UNANCHORED);\n  }\n\n  /**\n   * Helper: does match starting at start, with RE2 anchor flag.\n   * @param {number} startByte\n   * @param {number} anchor\n   * @returns {boolean}\n   * @private\n   */\n  genMatch(startByte, anchor) {\n    const res = this.patternInput.re2().matchMachineInput(this.matcherInput, startByte, this.matcherInputLength, anchor, 1);\n    const ok = res[0];\n    if (!ok) {\n      return false;\n    }\n    this.groups = res[1];\n    this.hasMatch = true;\n    this.hasGroups = false;\n    this.anchorFlag = anchor;\n    return true;\n  }\n\n  /**\n   * Helper: return substring for [start, end).\n   * @param {number} start\n   * @param {number} end\n   * @returns {string}\n   */\n  substring(start, end) {\n    if (this.matcherInput.isUTF8Encoding()) {\n      return Utils.utf8ByteArrayToString(this.matcherInput.asBytes().slice(start, end));\n    }\n    return this.matcherInput.asCharSequence().substring(start, end).toString();\n  }\n\n  /**\n   * Helper for Pattern: return input length.\n   * @returns {number}\n   */\n  inputLength() {\n    return this.matcherInputLength;\n  }\n\n  /**\n   * Appends to result two strings: the text from the append position up to the beginning of the\n   * most recent match, and then the replacement with submatch groups substituted for references of\n   * the form {@code $n}, where {@code n} is the group number in decimal. It advances the append\n   * position to where the most recent match ended.\n   *\n   * To embed a literal {@code $}, use \\$ (actually {@code \"\\\\$\"} with string escapes). The escape\n   * is only necessary when {@code $} is followed by a digit, but it is always allowed. Only\n   * {@code $} and {@code \\} need escaping, but any character can be escaped.\n   *\n   * The group number {@code n} in {@code $n} is always at least one digit and expands to use more\n   * digits as long as the resulting number is a valid group number for this pattern. To cut it off\n   * earlier, escape the first digit that should not be used.\n   *\n   * @param {string} replacement the replacement string\n   * @param {boolean} [perlMode=false] activate perl/js mode (different behaviour for capture groups and special characters)\n   * @returns {string}\n   * @throws IllegalStateException if there was no most recent match\n   * @throws IndexOutOfBoundsException if replacement refers to an invalid group\n   * @private\n   */\n  appendReplacement(replacement, perlMode = false) {\n    let res = '';\n    const s = this.start();\n    const e = this.end();\n    if (this.appendPos < s) {\n      res += this.substring(this.appendPos, s);\n    }\n    this.appendPos = e;\n    res += perlMode ? this.appendReplacementInternalPerl(replacement) : this.appendReplacementInternal(replacement);\n    return res;\n  }\n\n  /**\n   * @param {string} replacement - the replacement string\n   * @returns {string}\n   * @private\n   */\n  appendReplacementInternal(replacement) {\n    let res = '';\n    let last = 0;\n    const m = replacement.length;\n    for (let i = 0; i < m - 1; i++) {\n      if (replacement.codePointAt(i) === Codepoint.CODES.get('\\\\')) {\n        if (last < i) {\n          res += replacement.substring(last, i);\n        }\n        i++;\n        last = i;\n        continue;\n      }\n      if (replacement.codePointAt(i) === Codepoint.CODES.get('$')) {\n        let c = replacement.codePointAt(i + 1);\n        if (Codepoint.CODES.get('0') <= c && c <= Codepoint.CODES.get('9')) {\n          let n = c - Codepoint.CODES.get('0');\n          if (last < i) {\n            res += replacement.substring(last, i);\n          }\n          for (i += 2; i < m; i++) {\n            c = replacement.codePointAt(i);\n            if (c < Codepoint.CODES.get('0') || c > Codepoint.CODES.get('9') || n * 10 + c - Codepoint.CODES.get('0') > this.patternGroupCount) {\n              break;\n            }\n            n = n * 10 + c - Codepoint.CODES.get('0');\n          }\n          if (n > this.patternGroupCount) {\n            throw new RE2JSGroupException(`n > number of groups: ${n}`);\n          }\n          const group = this.group(n);\n          if (group !== null) {\n            res += group;\n          }\n          last = i;\n          i--;\n          continue;\n        } else if (c === Codepoint.CODES.get('{')) {\n          if (last < i) {\n            res += replacement.substring(last, i);\n          }\n          i++;\n          let j = i + 1;\n          while (j < replacement.length && replacement.codePointAt(j) !== Codepoint.CODES.get('}') && replacement.codePointAt(j) !== Codepoint.CODES.get(' ')) {\n            j++;\n          }\n          if (j === replacement.length || replacement.codePointAt(j) !== Codepoint.CODES.get('}')) {\n            throw new RE2JSGroupException(\"named capture group is missing trailing '}'\");\n          }\n          const groupName = replacement.substring(i + 1, j);\n          res += this.group(groupName);\n          last = j + 1;\n        }\n      }\n    }\n    if (last < m) {\n      res += replacement.substring(last, m);\n    }\n    return res;\n  }\n\n  /**\n   * @param {string} replacement - the replacement string\n   * @returns {string}\n   * @private\n   */\n  appendReplacementInternalPerl(replacement) {\n    let res = '';\n    let last = 0;\n    const m = replacement.length;\n    for (let i = 0; i < m - 1; i++) {\n      if (replacement.codePointAt(i) === Codepoint.CODES.get('$')) {\n        let c = replacement.codePointAt(i + 1);\n        if (Codepoint.CODES.get('$') === c) {\n          if (last < i) {\n            res += replacement.substring(last, i);\n          }\n          res += '$';\n          i++;\n          last = i + 1;\n          continue;\n        } else if (Codepoint.CODES.get('&') === c) {\n          if (last < i) {\n            res += replacement.substring(last, i);\n          }\n          const group = this.group(0);\n          if (group !== null) {\n            res += group;\n          } else {\n            res += '$&';\n          }\n          i++;\n          last = i + 1;\n          continue;\n        } else if (Codepoint.CODES.get('1') <= c && c <= Codepoint.CODES.get('9')) {\n          let n = c - Codepoint.CODES.get('0');\n          if (last < i) {\n            res += replacement.substring(last, i);\n          }\n          for (i += 2; i < m; i++) {\n            c = replacement.codePointAt(i);\n            if (c < Codepoint.CODES.get('0') || c > Codepoint.CODES.get('9') || n * 10 + c - Codepoint.CODES.get('0') > this.patternGroupCount) {\n              break;\n            }\n            n = n * 10 + c - Codepoint.CODES.get('0');\n          }\n          if (n > this.patternGroupCount) {\n            res += `$${n}`;\n            last = i;\n            i--;\n            continue;\n          }\n          const group = this.group(n);\n          if (group !== null) {\n            res += group;\n          }\n          last = i;\n          i--;\n          continue;\n        } else if (c === Codepoint.CODES.get('<')) {\n          if (last < i) {\n            res += replacement.substring(last, i);\n          }\n          i++;\n          let j = i + 1;\n          while (j < replacement.length && replacement.codePointAt(j) !== Codepoint.CODES.get('>') && replacement.codePointAt(j) !== Codepoint.CODES.get(' ')) {\n            j++;\n          }\n          if (j === replacement.length || replacement.codePointAt(j) !== Codepoint.CODES.get('>')) {\n            res += replacement.substring(i - 1, j + 1);\n            last = j + 1;\n            continue;\n          }\n          const groupName = replacement.substring(i + 1, j);\n          if (Object.prototype.hasOwnProperty.call(this.namedGroups, groupName)) {\n            res += this.group(groupName);\n          } else {\n            res += `$<${groupName}>`;\n          }\n          last = j + 1;\n        }\n      }\n    }\n    if (last < m) {\n      res += replacement.substring(last, m);\n    }\n    return res;\n  }\n\n  /**\n   * Return the substring of the input from the append position to the end of the\n   * input.\n   * @returns {string}\n   */\n  appendTail() {\n    return this.substring(this.appendPos, this.matcherInputLength);\n  }\n\n  /**\n   * Returns the input with all matches replaced by {@code replacement}, interpreted as for\n   * {@code appendReplacement}.\n   *\n   * @param {string} replacement - the replacement string\n   * @param {boolean} [perlMode=false] - activate perl/js mode (different behaviour for capture groups and special characters)\n   * @returns {string} the input string with the matches replaced\n   * @throws IndexOutOfBoundsException if replacement refers to an invalid group and perlMode is false\n   */\n  replaceAll(replacement, perlMode = false) {\n    return this.replace(replacement, true, perlMode);\n  }\n\n  /**\n   * Returns the input with the first match replaced by {@code replacement}, interpreted as for\n   * {@code appendReplacement}.\n   *\n   * @param {string} replacement - the replacement string\n   * @param {boolean} [perlMode=false] - activate perl/js mode (different behaviour for capture groups and special characters)\n   * @returns {string} the input string with the first match replaced\n   * @throws IndexOutOfBoundsException if replacement refers to an invalid group and perlMode is false\n   */\n  replaceFirst(replacement, perlMode = false) {\n    return this.replace(replacement, false, perlMode);\n  }\n\n  /**\n   * Helper: replaceAll/replaceFirst hybrid.\n   * @param {string} replacement - the replacement string\n   * @param {boolean} [all=true] - replace all matches\n   * @param {boolean} [perlMode=false] - activate perl/js mode (different behaviour for capture groups and special characters)\n   * @returns {string}\n   * @private\n   */\n  replace(replacement, all = true, perlMode = false) {\n    let res = '';\n    this.reset();\n    while (this.find()) {\n      res += this.appendReplacement(replacement, perlMode);\n      if (!all) {\n        break;\n      }\n    }\n    res += this.appendTail();\n    return res;\n  }\n}\n\n/**\n * MachineInput abstracts different representations of the input text supplied to the Machine. It\n * provides one-character lookahead.\n */\nclass MachineInputBase {\n  static EOF() {\n    return -1 << 3;\n  }\n\n  // can we look ahead without losing info?\n  canCheckPrefix() {\n    return true;\n  }\n\n  // Returns the end position in the same units as step().\n  endPos() {\n    return this.end;\n  }\n}\n\n// An implementation of MachineInput for UTF-8 byte arrays.\n// |pos| and |width| are byte indices.\nclass MachineUTF8Input extends MachineInputBase {\n  constructor(bytes, start = 0, end = bytes.length) {\n    super();\n    this.bytes = bytes;\n    this.start = start;\n    this.end = end;\n  }\n\n  // Returns the rune at the specified index; the units are\n  // unspecified, but could be UTF-8 byte, UTF-16 char, or rune\n  // indices.  Returns the width (in the same units) of the rune in\n  // the lower 3 bits, and the rune (Unicode code point) in the high\n  // bits.  Never negative, except for EOF which is represented as -1\n  // << 3 | 0.\n  step(i) {\n    i += this.start;\n    if (i >= this.end) {\n      return MachineInputBase.EOF();\n    }\n    let x = this.bytes[i++] & 255;\n    if ((x & 128) === 0) {\n      return x << 3 | 1;\n    } else if ((x & 224) === 192) {\n      x = x & 31;\n      if (i >= this.end) {\n        return MachineInputBase.EOF();\n      }\n      x = x << 6 | this.bytes[i++] & 63;\n      return x << 3 | 2;\n    } else if ((x & 240) === 224) {\n      x = x & 15;\n      if (i + 1 >= this.end) {\n        return MachineInputBase.EOF();\n      }\n      x = x << 6 | this.bytes[i++] & 63;\n      x = x << 6 | this.bytes[i++] & 63;\n      return x << 3 | 3;\n    } else {\n      x = x & 7;\n      if (i + 2 >= this.end) {\n        return MachineInputBase.EOF();\n      }\n      x = x << 6 | this.bytes[i++] & 63;\n      x = x << 6 | this.bytes[i++] & 63;\n      x = x << 6 | this.bytes[i++] & 63;\n      return x << 3 | 4;\n    }\n  }\n\n  // Returns the index relative to |pos| at which |re2.prefix| is found\n  // in this input stream, or a negative value if not found.\n  index(re2, pos) {\n    pos += this.start;\n    const i = this.indexOf(this.bytes, re2.prefixUTF8, pos);\n    return i < 0 ? i : i - pos;\n  }\n\n  // Returns a bitmask of EMPTY_* flags.\n  context(pos) {\n    pos += this.start;\n    let r1 = -1;\n    if (pos > this.start && pos <= this.end) {\n      let start = pos - 1;\n      r1 = this.bytes[start--];\n      if (r1 >= 128) {\n        let lim = pos - 4;\n        if (lim < this.start) {\n          lim = this.start;\n        }\n        while (start >= lim && (this.bytes[start] & 192) === 128) {\n          start--;\n        }\n        if (start < this.start) {\n          start = this.start;\n        }\n        r1 = this.step(start) >> 3;\n      }\n    }\n    const r2 = pos < this.end ? this.step(pos) >> 3 : -1;\n    return Utils.emptyOpContext(r1, r2);\n  }\n\n  // Returns the index of the first occurrence of array |target| within\n  // array |source| after |fromIndex|, or -1 if not found.\n  indexOf(source, target, fromIndex = 0) {\n    let targetLength = target.length;\n    if (targetLength === 0) {\n      return -1;\n    }\n    let sourceLength = source.length;\n    for (let i = fromIndex; i <= sourceLength - targetLength; i++) {\n      for (let j = 0; j < targetLength; j++) {\n        if (source[i + j] !== target[j]) {\n          break;\n        } else if (j === targetLength - 1) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n}\n\n// |pos| and |width| are in JS \"char\" units.\nclass MachineUTF16Input extends MachineInputBase {\n  constructor(charSequence, start = 0, end = charSequence.length) {\n    super();\n    this.charSequence = charSequence;\n    this.start = start;\n    this.end = end;\n  }\n\n  // Returns the rune at the specified index; the units are\n  // unspecified, but could be UTF-8 byte, UTF-16 char, or rune\n  // indices.  Returns the width (in the same units) of the rune in\n  // the lower 3 bits, and the rune (Unicode code point) in the high\n  // bits.  Never negative, except for EOF which is represented as -1\n  // << 3 | 0.\n  step(pos) {\n    pos += this.start;\n    if (pos < this.end) {\n      const rune = this.charSequence.codePointAt(pos);\n      return rune << 3 | Utils.charCount(rune);\n    } else {\n      return MachineInputBase.EOF();\n    }\n  }\n\n  // Returns the index relative to |pos| at which |re2.prefix| is found\n  // in this input stream, or a negative value if not found.\n  index(re2, pos) {\n    pos += this.start;\n    const i = this.charSequence.indexOf(re2.prefix, pos);\n    return i < 0 ? i : i - pos;\n  }\n\n  // Returns a bitmask of EMPTY_* flags.\n  context(pos) {\n    pos += this.start;\n    const r1 = pos > 0 && pos <= this.charSequence.length ? this.charSequence.codePointAt(pos - 1) : -1;\n    const r2 = pos < this.charSequence.length ? this.charSequence.codePointAt(pos) : -1;\n    return Utils.emptyOpContext(r1, r2);\n  }\n}\nclass MachineInput {\n  static fromUTF8(bytes, start = 0, end = bytes.length) {\n    return new MachineUTF8Input(bytes, start, end);\n  }\n  static fromUTF16(charSequence, start = 0, end = charSequence.length) {\n    return new MachineUTF16Input(charSequence, start, end);\n  }\n}\n\n/**\n * A single instruction in the regular expression virtual machine.\n *\n * @see http://swtch.com/~rsc/regexp/regexp2.html\n */\nclass Inst {\n  static ALT = 1;\n  static ALT_MATCH = 2;\n  static CAPTURE = 3;\n  static EMPTY_WIDTH = 4;\n  static FAIL = 5;\n  static MATCH = 6;\n  static NOP = 7;\n  static RUNE = 8;\n  static RUNE1 = 9;\n  static RUNE_ANY = 10;\n  static RUNE_ANY_NOT_NL = 11;\n  static isRuneOp(op) {\n    return Inst.RUNE <= op && op <= Inst.RUNE_ANY_NOT_NL;\n  }\n\n  // Returns an RE2 expression matching exactly |runes|.\n  static escapeRunes(runes) {\n    let out = '\"';\n    for (let rune of runes) {\n      out += Utils.escapeRune(rune);\n    }\n    out += '\"';\n    return out;\n  }\n  constructor(op) {\n    this.op = op;\n    this.out = 0; // all but MATCH, FAIL\n    this.arg = 0; // ALT, ALT_MATCH, CAPTURE, EMPTY_WIDTH\n    // length==1 => exact match\n    // otherwise a list of [lo,hi] pairs.  hi is *inclusive*.\n    this.runes = [];\n  }\n\n  // MatchRune returns true if the instruction matches (and consumes) r.\n  // It should only be called when op == InstRune.\n  matchRune(r) {\n    // Special case: single-rune slice is from literal string, not char\n    // class.\n    if (this.runes.length === 1) {\n      const r0 = this.runes[0];\n      // If this pattern is case-insensitive, apply Unicode case folding to compare the two runes.\n      // Note that this may result in a case-folding loop when executed,\n      // so attempt to reduce the chance of that occurring\n      // by performing case folding on |r0| from the pattern rather than |r| from the input.\n      if ((this.arg & RE2Flags.FOLD_CASE) !== 0) {\n        return Unicode.equalsIgnoreCase(r0, r);\n      }\n      return r === r0;\n    }\n    // Peek at the first few pairs.\n    // Should handle ASCII well.\n    for (let j = 0; j < this.runes.length && j <= 8; j += 2) {\n      if (r < this.runes[j]) {\n        return false;\n      }\n      if (r <= this.runes[j + 1]) {\n        return true;\n      }\n    }\n    // Otherwise binary search.\n    let lo = 0;\n    let hi = this.runes.length / 2 | 0;\n    while (lo < hi) {\n      const m = lo + ((hi - lo) / 2 | 0);\n      const c = this.runes[2 * m];\n      if (c <= r) {\n        if (r <= this.runes[2 * m + 1]) {\n          return true;\n        }\n        lo = m + 1;\n      } else {\n        hi = m;\n      }\n    }\n    return false;\n  }\n  /**\n   *\n   * @returns {string}\n   */\n  toString() {\n    switch (this.op) {\n      case Inst.ALT:\n        return `alt -> ${this.out}, ${this.arg}`;\n      case Inst.ALT_MATCH:\n        return `altmatch -> ${this.out}, ${this.arg}`;\n      case Inst.CAPTURE:\n        return `cap ${this.arg} -> ${this.out}`;\n      case Inst.EMPTY_WIDTH:\n        return `empty ${this.arg} -> ${this.out}`;\n      case Inst.MATCH:\n        return 'match';\n      case Inst.FAIL:\n        return 'fail';\n      case Inst.NOP:\n        return `nop -> ${this.out}`;\n      case Inst.RUNE:\n        if (this.runes === null) {\n          return 'rune <null>';\n        }\n        return ['rune ', Inst.escapeRunes(this.runes), (this.arg & RE2Flags.FOLD_CASE) !== 0 ? '/i' : '', ' -> ', this.out].join('');\n      case Inst.RUNE1:\n        return `rune1 ${Inst.escapeRunes(this.runes)} -> ${this.out}`;\n      case Inst.RUNE_ANY:\n        return `any -> ${this.out}`;\n      case Inst.RUNE_ANY_NOT_NL:\n        return `anynotnl -> ${this.out}`;\n      default:\n        throw new Error('unhandled case in Inst.toString');\n    }\n  }\n}\n\n// A logical thread in the NFA.\nclass Thread {\n  constructor() {\n    this.inst = null;\n    this.cap = [];\n  }\n}\n\n// A queue is a 'sparse array' holding pending threads of execution.  See:\n// research.swtch.com/2008/03/using-uninitialized-memory-for-fun-and.html\nclass Queue {\n  constructor() {\n    this.sparse = []; // may contain stale but in-bounds values.\n    this.densePcs = []; // may contain stale pc in slots >= size\n    this.denseThreads = []; // may contain stale Thread in slots >= size\n    this.size = 0;\n  }\n  contains(pc) {\n    const j = this.sparse[pc];\n    return j < this.size && this.densePcs[j] === pc;\n  }\n  isEmpty() {\n    return this.size === 0;\n  }\n  add(pc) {\n    const j = this.size++;\n    this.sparse[pc] = j;\n    this.denseThreads[j] = null;\n    this.densePcs[j] = pc;\n    return j;\n  }\n  clear() {\n    this.sparse = [];\n    this.densePcs = [];\n    this.denseThreads = [];\n    this.size = 0;\n  }\n  toString() {\n    let out = '{';\n    for (let i = 0; i < this.size; i++) {\n      if (i !== 0) {\n        out += ', ';\n      }\n      out += this.densePcs[i];\n    }\n    out += '}';\n    return out;\n  }\n}\n// A Machine matches an input string of Unicode characters against an\n// RE2 instance using a simple NFA.\n//\n// Called by RE2.doExecute.\nclass Machine {\n  static fromRE2(re2) {\n    const m = new Machine();\n    m.prog = re2.prog;\n    m.re2 = re2;\n    m.q0 = new Queue(m.prog.numInst());\n    m.q1 = new Queue(m.prog.numInst());\n    m.pool = [];\n    m.poolSize = 0;\n    m.matched = false;\n    m.matchcap = Array(m.prog.numCap < 2 ? 2 : m.prog.numCap).fill(0);\n    m.ncap = 0;\n    return m;\n  }\n  static fromMachine(machine) {\n    const m = new Machine();\n    m.re2 = machine.re2;\n    m.prog = machine.prog;\n    m.q0 = machine.q0;\n    m.q1 = machine.q1;\n    m.pool = machine.pool;\n    m.poolSize = machine.poolSize;\n    m.matched = machine.matched;\n    m.matchcap = machine.matchcap;\n    m.ncap = machine.ncap;\n    return m;\n  }\n\n  // init() reinitializes an existing Machine for re-use on a new input.\n  init(ncap) {\n    this.ncap = ncap;\n    if (ncap > this.matchcap.length) {\n      this.initNewCap(ncap);\n    } else {\n      this.resetCap(ncap);\n    }\n  }\n  resetCap(ncap) {\n    for (let i = 0; i < this.poolSize; i++) {\n      const t = this.pool[i];\n      t.cap = Array(ncap).fill(0);\n    }\n  }\n  initNewCap(ncap) {\n    for (let i = 0; i < this.poolSize; i++) {\n      const t = this.pool[i];\n      t.cap = Array(ncap).fill(0);\n    }\n    this.matchcap = Array(ncap).fill(0);\n  }\n  submatches() {\n    if (this.ncap === 0) {\n      return Utils.emptyInts();\n    }\n    return this.matchcap.slice(0, this.ncap);\n  }\n\n  // alloc() allocates a new thread with the given instruction.\n  // It uses the free pool if possible.\n  alloc(inst) {\n    let t;\n    if (this.poolSize > 0) {\n      this.poolSize--;\n      t = this.pool[this.poolSize];\n    } else {\n      t = new Thread();\n    }\n    t.inst = inst;\n    return t;\n  }\n\n  // Frees all threads on the thread queue, returning them to the free pool.\n  freeQueue(queue, from = 0) {\n    const numberOfThread = queue.size - from;\n    const requiredPoolLength = this.poolSize + numberOfThread;\n    if (this.pool.length < requiredPoolLength) {\n      this.pool = this.pool.slice(0, Math.max(this.pool.length * 2, requiredPoolLength));\n    }\n    for (let i = from; i < queue.size; i++) {\n      const t = queue.denseThreads[i];\n      if (t !== null) {\n        this.pool[this.poolSize] = t;\n        this.poolSize++;\n      }\n    }\n    queue.clear();\n  }\n\n  // freeThread() returns t to the free pool.\n  freeThread(t) {\n    if (this.pool.length <= this.poolSize) {\n      this.pool = this.pool.slice(0, this.pool.length * 2);\n    }\n    this.pool[this.poolSize] = t;\n    this.poolSize++;\n  }\n  match(input, pos, anchor) {\n    const startCond = this.re2.cond;\n    if (startCond === Utils.EMPTY_ALL) {\n      return false;\n    }\n    if ((anchor === RE2Flags.ANCHOR_START || anchor === RE2Flags.ANCHOR_BOTH) && pos !== 0) {\n      return false;\n    }\n    this.matched = false;\n    this.matchcap = Array(this.prog.numCap).fill(-1);\n    let runq = this.q0;\n    let nextq = this.q1;\n    let r = input.step(pos);\n    let rune = r >> 3;\n    let width = r & 7;\n    let rune1 = -1;\n    let width1 = 0;\n    if (r !== MachineInputBase.EOF()) {\n      r = input.step(pos + width);\n      rune1 = r >> 3;\n      width1 = r & 7;\n    }\n    let flag;\n    if (pos === 0) {\n      flag = Utils.emptyOpContext(-1, rune);\n    } else {\n      flag = input.context(pos);\n    }\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if (runq.isEmpty()) {\n        if ((startCond & Utils.EMPTY_BEGIN_TEXT) !== 0 && pos !== 0) {\n          break;\n        }\n        if (this.matched) {\n          break;\n        }\n        if (!(this.re2.prefix.length === 0) && rune1 !== this.re2.prefixRune && input.canCheckPrefix()) {\n          const advance = input.index(this.re2, pos);\n          if (advance < 0) {\n            break;\n          }\n          pos += advance;\n          r = input.step(pos);\n          rune = r >> 3;\n          width = r & 7;\n          r = input.step(pos + width);\n          rune1 = r >> 3;\n          width1 = r & 7;\n        }\n      }\n      if (!this.matched && (pos === 0 || anchor === RE2Flags.UNANCHORED)) {\n        if (this.ncap > 0) {\n          this.matchcap[0] = pos;\n        }\n        this.add(runq, this.prog.start, pos, this.matchcap, flag, null);\n      }\n      const nextPos = pos + width;\n      flag = input.context(nextPos);\n      this.step(runq, nextq, pos, nextPos, rune, flag, anchor, pos === input.endPos());\n      if (width === 0) {\n        break;\n      }\n      if (this.ncap === 0 && this.matched) {\n        break;\n      }\n      pos += width;\n      rune = rune1;\n      width = width1;\n      if (rune !== -1) {\n        r = input.step(pos + width);\n        rune1 = r >> 3;\n        width1 = r & 7;\n      }\n      const tmpq = runq;\n      runq = nextq;\n      nextq = tmpq;\n    }\n    this.freeQueue(nextq);\n    return this.matched;\n  }\n  step(runq, nextq, pos, nextPos, c, nextCond, anchor, atEnd) {\n    const longest = this.re2.longest;\n    for (let j = 0; j < runq.size; j++) {\n      let t = runq.denseThreads[j];\n      if (t === null) {\n        continue;\n      }\n      if (longest && this.matched && this.ncap > 0 && this.matchcap[0] < t.cap[0]) {\n        this.freeThread(t);\n        continue;\n      }\n      const i = t.inst;\n      let add = false;\n      switch (i.op) {\n        case Inst.MATCH:\n          if (anchor === RE2Flags.ANCHOR_BOTH && !atEnd) {\n            break;\n          }\n          if (this.ncap > 0 && (!longest || !this.matched || this.matchcap[1] < pos)) {\n            t.cap[1] = pos;\n            this.matchcap = t.cap.slice(0, this.ncap);\n          }\n          if (!longest) {\n            this.freeQueue(runq, j + 1);\n          }\n          this.matched = true;\n          break;\n        case Inst.RUNE:\n          add = i.matchRune(c);\n          break;\n        case Inst.RUNE1:\n          add = c === i.runes[0];\n          break;\n        case Inst.RUNE_ANY:\n          add = true;\n          break;\n        case Inst.RUNE_ANY_NOT_NL:\n          add = c !== Codepoint.CODES.get('\\n');\n          break;\n        default:\n          throw new Error('bad inst');\n      }\n      if (add) {\n        t = this.add(nextq, i.out, nextPos, t.cap, nextCond, t);\n      }\n      if (t !== null) {\n        this.freeThread(t);\n        runq.denseThreads[j] = null;\n      }\n    }\n    runq.clear();\n  }\n  add(q, pc, pos, cap, cond, t) {\n    if (pc === 0) {\n      return t;\n    }\n    if (q.contains(pc)) {\n      return t;\n    }\n    const d = q.add(pc);\n    const inst = this.prog.inst[pc];\n    switch (inst.op) {\n      case Inst.FAIL:\n        break;\n      case Inst.ALT:\n      case Inst.ALT_MATCH:\n        t = this.add(q, inst.out, pos, cap, cond, t);\n        t = this.add(q, inst.arg, pos, cap, cond, t);\n        break;\n      case Inst.EMPTY_WIDTH:\n        if ((inst.arg & ~cond) === 0) {\n          t = this.add(q, inst.out, pos, cap, cond, t);\n        }\n        break;\n      case Inst.NOP:\n        t = this.add(q, inst.out, pos, cap, cond, t);\n        break;\n      case Inst.CAPTURE:\n        if (inst.arg < this.ncap) {\n          const opos = cap[inst.arg];\n          cap[inst.arg] = pos;\n          this.add(q, inst.out, pos, cap, cond, null);\n          cap[inst.arg] = opos;\n        } else {\n          t = this.add(q, inst.out, pos, cap, cond, t);\n        }\n        break;\n      case Inst.MATCH:\n      case Inst.RUNE:\n      case Inst.RUNE1:\n      case Inst.RUNE_ANY:\n      case Inst.RUNE_ANY_NOT_NL:\n        if (t === null) {\n          t = this.alloc(inst);\n        } else {\n          t.inst = inst;\n        }\n        if (this.ncap > 0 && t.cap !== cap) {\n          t.cap = cap.slice(0, this.ncap);\n        }\n        q.denseThreads[d] = t;\n        t = null;\n        break;\n      default:\n        throw new Error('unhandled');\n    }\n    return t;\n  }\n}\n\n/**\n * Regular expression abstract syntax tree. Produced by parser, used by compiler. NB, this\n * corresponds to {@code syntax.regexp} in the Go implementation; Go's {@code regexp} is called\n * {@code RE2} in Java.\n */\nclass Regexp {\n  static Op = (() => createEnum(['NO_MATCH',\n  // Matches no strings.\n  'EMPTY_MATCH',\n  // Matches empty string.\n  'LITERAL',\n  // Matches runes[] sequence\n  'CHAR_CLASS',\n  // Matches Runes interpreted as range pair list\n  'ANY_CHAR_NOT_NL',\n  // Matches any character except '\\n'\n  'ANY_CHAR',\n  // Matches any character\n  'BEGIN_LINE',\n  // Matches empty string at end of line\n  'END_LINE',\n  // Matches empty string at end of line\n  'BEGIN_TEXT',\n  // Matches empty string at beginning of text\n  'END_TEXT',\n  // Matches empty string at end of text\n  'WORD_BOUNDARY',\n  // Matches word boundary `\\b`\n  'NO_WORD_BOUNDARY',\n  // Matches word non-boundary `\\B`\n  'CAPTURE',\n  // Capturing subexpr with index cap, optional name name\n  'STAR',\n  // Matches subs[0] zero or more times.\n  'PLUS',\n  // Matches subs[0] one or more times.\n  'QUEST',\n  // Matches subs[0] zero or one times.\n  'REPEAT',\n  // Matches subs[0] [min, max] times; max=-1 => no limit.\n  'CONCAT',\n  // Matches concatenation of subs[]\n  'ALTERNATE',\n  // Matches union of subs[]\n  // Pseudo ops, used internally by Parser for parsing stack:\n  'LEFT_PAREN', 'VERTICAL_BAR']))();\n  static isPseudoOp(op) {\n    return op >= Regexp.Op.LEFT_PAREN;\n  }\n  static emptySubs() {\n    return [];\n  }\n  static quoteIfHyphen(rune) {\n    if (rune === Codepoint.CODES.get('-')) {\n      return '\\\\';\n    }\n    return '';\n  }\n  static fromRegexp(re) {\n    const regex = new Regexp(re.op);\n    regex.flags = re.flags;\n    regex.subs = re.subs;\n    regex.runes = re.runes;\n    regex.cap = re.cap;\n    regex.min = re.min;\n    regex.max = re.max;\n    regex.name = re.name;\n    regex.namedGroups = re.namedGroups;\n    return regex;\n  }\n  constructor(op) {\n    this.op = op; // operator\n    this.flags = 0; // bitmap of parse flags\n    // subexpressions, if any.  Never null.\n    // subs[0] is used as the freelist.\n    this.subs = Regexp.emptySubs();\n    this.runes = []; // matched runes, for LITERAL, CHAR_CLASS\n    this.min = 0; // min for REPEAT\n    this.max = 0; // max for REPEAT\n    this.cap = 0; // capturing index, for CAPTURE\n    this.name = null; // capturing name, for CAPTURE\n    this.namedGroups = {}; // map of group name -> capturing index\n  }\n  reinit() {\n    this.flags = 0;\n    this.subs = Regexp.emptySubs();\n    this.runes = [];\n    this.cap = 0;\n    this.min = 0;\n    this.max = 0;\n    this.name = null;\n    this.namedGroups = {};\n  }\n  toString() {\n    return this.appendTo();\n  }\n\n  // appendTo() appends the Perl syntax for |this| regular expression to out\n  appendTo() {\n    let out = '';\n    switch (this.op) {\n      case Regexp.Op.NO_MATCH:\n        out += '[^\\\\x00-\\\\x{10FFFF}]';\n        break;\n      case Regexp.Op.EMPTY_MATCH:\n        out += '(?:)';\n        break;\n      case Regexp.Op.STAR:\n      case Regexp.Op.PLUS:\n      case Regexp.Op.QUEST:\n      case Regexp.Op.REPEAT:\n        {\n          const sub = this.subs[0];\n          if (sub.op > Regexp.Op.CAPTURE || sub.op === Regexp.Op.LITERAL && sub.runes.length > 1) {\n            out += `(?:${sub.appendTo()})`;\n          } else {\n            out += sub.appendTo();\n          }\n          switch (this.op) {\n            case Regexp.Op.STAR:\n              out += '*';\n              break;\n            case Regexp.Op.PLUS:\n              out += '+';\n              break;\n            case Regexp.Op.QUEST:\n              out += '?';\n              break;\n            case Regexp.Op.REPEAT:\n              out += `{${this.min}`;\n              if (this.min !== this.max) {\n                out += ',';\n                if (this.max >= 0) {\n                  out += this.max;\n                }\n              }\n              out += '}';\n              break;\n          }\n          if ((this.flags & RE2Flags.NON_GREEDY) !== 0) {\n            out += '?';\n          }\n          break;\n        }\n      case Regexp.Op.CONCAT:\n        {\n          for (let sub of this.subs) {\n            if (sub.op === Regexp.Op.ALTERNATE) {\n              out += `(?:${sub.appendTo()})`;\n            } else {\n              out += sub.appendTo();\n            }\n          }\n          break;\n        }\n      case Regexp.Op.ALTERNATE:\n        {\n          let sep = '';\n          for (let sub of this.subs) {\n            out += sep;\n            sep = '|';\n            out += sub.appendTo();\n          }\n          break;\n        }\n      case Regexp.Op.LITERAL:\n        if ((this.flags & RE2Flags.FOLD_CASE) !== 0) {\n          out += '(?i:';\n        }\n        for (let rune of this.runes) {\n          out += Utils.escapeRune(rune);\n        }\n        if ((this.flags & RE2Flags.FOLD_CASE) !== 0) {\n          out += ')';\n        }\n        break;\n      case Regexp.Op.ANY_CHAR_NOT_NL:\n        out += '(?-s:.)';\n        break;\n      case Regexp.Op.ANY_CHAR:\n        out += '(?s:.)';\n        break;\n      case Regexp.Op.CAPTURE:\n        if (this.name === null || this.name.length === 0) {\n          out += '(';\n        } else {\n          out += `(?P<${this.name}>`;\n        }\n        if (this.subs[0].op !== Regexp.Op.EMPTY_MATCH) {\n          out += this.subs[0].appendTo();\n        }\n        out += ')';\n        break;\n      case Regexp.Op.BEGIN_TEXT:\n        out += '\\\\A';\n        break;\n      case Regexp.Op.END_TEXT:\n        if ((this.flags & RE2Flags.WAS_DOLLAR) !== 0) {\n          out += '(?-m:$)';\n        } else {\n          out += '\\\\z';\n        }\n        break;\n      case Regexp.Op.BEGIN_LINE:\n        out += '^';\n        break;\n      case Regexp.Op.END_LINE:\n        out += '$';\n        break;\n      case Regexp.Op.WORD_BOUNDARY:\n        out += '\\\\b';\n        break;\n      case Regexp.Op.NO_WORD_BOUNDARY:\n        out += '\\\\B';\n        break;\n      case Regexp.Op.CHAR_CLASS:\n        if (this.runes.length % 2 !== 0) {\n          out += '[invalid char class]';\n          break;\n        }\n        out += '[';\n        if (this.runes.length === 0) {\n          out += '^\\\\x00-\\\\x{10FFFF}';\n        } else if (this.runes[0] === 0 && this.runes[this.runes.length - 1] === Unicode.MAX_RUNE) {\n          out += '^';\n          for (let i = 1; i < this.runes.length - 1; i += 2) {\n            const lo = this.runes[i] + 1;\n            const hi = this.runes[i + 1] - 1;\n            out += Regexp.quoteIfHyphen(lo);\n            out += Utils.escapeRune(lo);\n            if (lo !== hi) {\n              out += '-';\n              out += Regexp.quoteIfHyphen(hi);\n              out += Utils.escapeRune(hi);\n            }\n          }\n        } else {\n          for (let i = 0; i < this.runes.length; i += 2) {\n            const lo = this.runes[i];\n            const hi = this.runes[i + 1];\n            out += Regexp.quoteIfHyphen(lo);\n            out += Utils.escapeRune(lo);\n            if (lo !== hi) {\n              out += '-';\n              out += Regexp.quoteIfHyphen(hi);\n              out += Utils.escapeRune(hi);\n            }\n          }\n        }\n        out += ']';\n        break;\n      default:\n        out += this.op;\n        break;\n    }\n    return out;\n  }\n\n  // maxCap() walks the regexp to find the maximum capture index.\n  maxCap() {\n    let m = 0;\n    if (this.op === Regexp.Op.CAPTURE) {\n      m = this.cap;\n    }\n    if (this.subs !== null) {\n      for (let sub of this.subs) {\n        const n = sub.maxCap();\n        if (m < n) {\n          m = n;\n        }\n      }\n    }\n    return m;\n  }\n\n  // equals() returns true if this and that have identical structure.\n  equals(that) {\n    if (!(that !== null && that instanceof Regexp)) {\n      return false;\n    }\n    if (this.op !== that.op) {\n      return false;\n    }\n    switch (this.op) {\n      case Regexp.Op.END_TEXT:\n        {\n          if ((this.flags & RE2Flags.WAS_DOLLAR) !== (that.flags & RE2Flags.WAS_DOLLAR)) {\n            return false;\n          }\n          break;\n        }\n      case Regexp.Op.LITERAL:\n      case Regexp.Op.CHAR_CLASS:\n        {\n          if (this.runes === null && that.runes === null) {\n            break;\n          }\n          if (this.runes === null || that.runes === null) {\n            return false;\n          }\n          if (this.runes.length !== that.runes.length) {\n            return false;\n          }\n          for (let i = 0; i < this.runes.length; i++) {\n            if (this.runes[i] !== that.runes[i]) {\n              return false;\n            }\n          }\n          break;\n        }\n      case Regexp.Op.ALTERNATE:\n      case Regexp.Op.CONCAT:\n        {\n          if (this.subs.length !== that.subs.length) {\n            return false;\n          }\n          for (let i = 0; i < this.subs.length; ++i) {\n            if (!this.subs[i].equals(that.subs[i])) {\n              return false;\n            }\n          }\n          break;\n        }\n      case Regexp.Op.STAR:\n      case Regexp.Op.PLUS:\n      case Regexp.Op.QUEST:\n        {\n          if ((this.flags & RE2Flags.NON_GREEDY) !== (that.flags & RE2Flags.NON_GREEDY) || !this.subs[0].equals(that.subs[0])) {\n            return false;\n          }\n          break;\n        }\n      case Regexp.Op.REPEAT:\n        {\n          if ((this.flags & RE2Flags.NON_GREEDY) !== (that.flags & RE2Flags.NON_GREEDY) || this.min !== that.min || this.max !== that.max || !this.subs[0].equals(that.subs[0])) {\n            return false;\n          }\n          break;\n        }\n      case Regexp.Op.CAPTURE:\n        {\n          if (this.cap !== that.cap || (this.name === null ? that.name !== null : this.name !== that.name) || !this.subs[0].equals(that.subs[0])) {\n            return false;\n          }\n          break;\n        }\n    }\n    return true;\n  }\n}\n\n/**\n * A Prog is a compiled regular expression program.\n */\nclass Prog {\n  constructor() {\n    this.inst = [];\n    this.start = 0; // index of start instruction\n    // number of CAPTURE insts in re\n    // 2 => implicit ( and ) for whole match $0\n    this.numCap = 2;\n  }\n\n  // Returns the instruction at the specified pc.\n  // Precondition: pc > 0 && pc < numInst().\n  getInst(pc) {\n    return this.inst[pc];\n  }\n\n  // Returns the number of instructions in this program.\n  numInst() {\n    return this.inst.length;\n  }\n\n  // Adds a new instruction to this program, with operator |op| and |pc| equal\n  // to |numInst()|.\n  addInst(op) {\n    this.inst.push(new Inst(op));\n  }\n\n  // skipNop() follows any no-op or capturing instructions and returns the\n  // resulting instruction.\n  skipNop(pc) {\n    let i = this.inst[pc];\n    while (i.op === Inst.NOP || i.op === Inst.CAPTURE) {\n      i = this.inst[pc];\n      pc = i.out;\n    }\n    return i;\n  }\n\n  // prefix() returns a pair of a literal string that all matches for the\n  // regexp must start with, and a boolean which is true if the prefix is the\n  // entire match.  The string is returned by appending to |prefix|.\n  prefix() {\n    let prefix = '';\n    let i = this.skipNop(this.start);\n    if (!Inst.isRuneOp(i.op) || i.runes.length !== 1) {\n      return [i.op === Inst.MATCH, prefix];\n    }\n    while (Inst.isRuneOp(i.op) && i.runes.length === 1 && (i.arg & RE2Flags.FOLD_CASE) === 0) {\n      prefix += String.fromCodePoint(i.runes[0]);\n      i = this.skipNop(i.out);\n    }\n    return [i.op === Inst.MATCH, prefix];\n  }\n\n  // startCond() returns the leading empty-width conditions that must be true\n  // in any match.  It returns -1 (all bits set) if no matches are possible.\n  startCond() {\n    let flag = 0;\n    let pc = this.start;\n    loop: for (;;) {\n      const i = this.inst[pc];\n      switch (i.op) {\n        case Inst.EMPTY_WIDTH:\n          flag |= i.arg;\n          break;\n        case Inst.FAIL:\n          return -1;\n        case Inst.CAPTURE:\n        case Inst.NOP:\n          break;\n        default:\n          break loop;\n      }\n      pc = i.out;\n    }\n    return flag;\n  }\n\n  // --- Patch list ---\n\n  // A patchlist is a list of instruction pointers that need to be filled in\n  // (patched).  Because the pointers haven't been filled in yet, we can reuse\n  // their storage to hold the list.  It's kind of sleazy, but works well in\n  // practice.  See http://swtch.com/~rsc/regexp/regexp1.html for inspiration.\n\n  // These aren't really pointers: they're integers, so we can reinterpret them\n  // this way without using package unsafe.  A value l denotes p.inst[l>>1].out\n  // (l&1==0) or .arg (l&1==1).  l == 0 denotes the empty list, okay because we\n  // start every program with a fail instruction, so we'll never want to point\n  // at its output link.\n\n  next(l) {\n    const i = this.inst[l >> 1];\n    if ((l & 1) === 0) {\n      return i.out;\n    }\n    return i.arg;\n  }\n  patch(l, val) {\n    while (l !== 0) {\n      const i = this.inst[l >> 1];\n      if ((l & 1) === 0) {\n        l = i.out;\n        i.out = val;\n      } else {\n        l = i.arg;\n        i.arg = val;\n      }\n    }\n  }\n  append(l1, l2) {\n    if (l1 === 0) {\n      return l2;\n    }\n    if (l2 === 0) {\n      return l1;\n    }\n    let last = l1;\n    for (;;) {\n      const next = this.next(last);\n      if (next === 0) {\n        break;\n      }\n      last = next;\n    }\n    const i = this.inst[last >> 1];\n    if ((last & 1) === 0) {\n      i.out = l2;\n    } else {\n      i.arg = l2;\n    }\n    return l1;\n  }\n  /**\n   *\n   * @returns {string}\n   */\n  toString() {\n    let out = '';\n    for (let pc = 0; pc < this.inst.length; pc++) {\n      const len = out.length;\n      out += pc;\n      if (pc === this.start) {\n        out += '*';\n      }\n      out += '        '.substring(out.length - len);\n      out += this.inst[pc];\n      out += '\\n';\n    }\n    return out;\n  }\n}\n\n/**\n * A fragment of a compiled regular expression program.\n *\n * @see http://swtch.com/~rsc/regexp/regexp1.html\n * @class\n */\nclass Frag {\n  constructor(i = 0, out = 0, nullable = false) {\n    this.i = i; // an instruction address (pc).\n    this.out = out; // a patch list; see explanation in Prog.js\n    this.nullable = nullable; // whether the fragment can match the empty string\n  }\n}\n/**\n * Compiler from {@code Regexp} (RE2 abstract syntax) to {@code RE2} (compiled regular expression).\n *\n * The only entry point is {@link #compileRegexp}.\n */\nclass Compiler {\n  static ANY_RUNE_NOT_NL() {\n    return [0, Codepoint.CODES.get('\\n') - 1, Codepoint.CODES.get('\\n') + 1, Unicode.MAX_RUNE];\n  }\n  static ANY_RUNE() {\n    return [0, Unicode.MAX_RUNE];\n  }\n  static compileRegexp(re) {\n    const c = new Compiler();\n    const f = c.compile(re);\n    c.prog.patch(f.out, c.newInst(Inst.MATCH).i);\n    c.prog.start = f.i;\n    return c.prog;\n  }\n  constructor() {\n    this.prog = new Prog();\n    this.newInst(Inst.FAIL);\n  }\n  newInst(op) {\n    this.prog.addInst(op);\n    return new Frag(this.prog.numInst() - 1, 0, true);\n  }\n\n  // Returns a no-op fragment.  Sometimes unavoidable.\n  nop() {\n    const f = this.newInst(Inst.NOP);\n    f.out = f.i << 1;\n    return f;\n  }\n  fail() {\n    return new Frag();\n  }\n\n  // Given fragment a, returns (a) capturing as \\n.\n  // Given a fragment a, returns a fragment with capturing parens around a.\n  cap(arg) {\n    const f = this.newInst(Inst.CAPTURE);\n    f.out = f.i << 1;\n    this.prog.getInst(f.i).arg = arg;\n    if (this.prog.numCap < arg + 1) {\n      this.prog.numCap = arg + 1;\n    }\n    return f;\n  }\n\n  // Given fragments a and b, returns ab; a|b\n  cat(f1, f2) {\n    // concat of failure is failure\n    if (f1.i === 0 || f2.i === 0) {\n      return this.fail();\n    }\n    // eslint-disable-next-line no-warning-comments\n    // TODO(rsc): elide nop\n    this.prog.patch(f1.out, f2.i);\n    return new Frag(f1.i, f2.out, f1.nullable && f2.nullable);\n  }\n\n  // Given fragments for a and b, returns fragment for a|b.\n  alt(f1, f2) {\n    // alt of failure is other\n    if (f1.i === 0) {\n      return f2;\n    }\n    if (f2.i === 0) {\n      return f1;\n    }\n    const f = this.newInst(Inst.ALT);\n    const i = this.prog.getInst(f.i);\n    i.out = f1.i;\n    i.arg = f2.i;\n    f.out = this.prog.append(f1.out, f2.out);\n    f.nullable = f1.nullable || f2.nullable;\n    return f;\n  }\n\n  // loop returns the fragment for the main loop of a plus or star.\n  // For plus, it can be used directly. with f1.i as the entry.\n  // For star, it can be used directly when f1 can't match an empty string.\n  // (When f1 can match an empty string, f1* must be implemented as (f1+)?\n  // to get the priority match order correct.)\n  loop(f1, nongreedy) {\n    const f = this.newInst(Inst.ALT);\n    const i = this.prog.getInst(f.i);\n    if (nongreedy) {\n      i.arg = f1.i;\n      f.out = f.i << 1;\n    } else {\n      i.out = f1.i;\n      f.out = f.i << 1 | 1;\n    }\n    this.prog.patch(f1.out, f.i);\n    return f;\n  }\n\n  // Given a fragment for a, returns a fragment for a? or a?? (if nongreedy)\n  quest(f1, nongreedy) {\n    const f = this.newInst(Inst.ALT);\n    const i = this.prog.getInst(f.i);\n    if (nongreedy) {\n      i.arg = f1.i;\n      f.out = f.i << 1;\n    } else {\n      i.out = f1.i;\n      f.out = f.i << 1 | 1;\n    }\n    f.out = this.prog.append(f.out, f1.out);\n    return f;\n  }\n\n  // Given a fragment a, returns a fragment for a* or a*? (if nongreedy)\n  star(f1, nongreedy) {\n    if (f1.nullable) {\n      return this.quest(this.plus(f1, nongreedy), nongreedy);\n    }\n    return this.loop(f1, nongreedy);\n  }\n\n  // Given a fragment for a, returns a fragment for a+ or a+? (if nongreedy)\n  plus(f1, nongreedy) {\n    return new Frag(f1.i, this.loop(f1, nongreedy).out, f1.nullable);\n  }\n\n  // op is a bitmask of EMPTY_* flags.\n  empty(op) {\n    const f = this.newInst(Inst.EMPTY_WIDTH);\n    this.prog.getInst(f.i).arg = op;\n    f.out = f.i << 1;\n    return f;\n  }\n\n  // flags : parser flags\n  rune(runes, flags) {\n    const f = this.newInst(Inst.RUNE);\n    f.nullable = false;\n    const i = this.prog.getInst(f.i);\n    i.runes = runes;\n    flags &= RE2Flags.FOLD_CASE;\n    if (runes.length !== 1 || Unicode.simpleFold(runes[0]) === runes[0]) {\n      flags &= -2;\n    }\n    i.arg = flags;\n    f.out = f.i << 1;\n    if ((flags & RE2Flags.FOLD_CASE) === 0 && runes.length === 1 || runes.length === 2 && runes[0] === runes[1]) {\n      i.op = Inst.RUNE1;\n    } else if (runes.length === 2 && runes[0] === 0 && runes[1] === Unicode.MAX_RUNE) {\n      i.op = Inst.RUNE_ANY;\n    } else if (runes.length === 4 && runes[0] === 0 && runes[1] === Codepoint.CODES.get('\\n') - 1 && runes[2] === Codepoint.CODES.get('\\n') + 1 && runes[3] === Unicode.MAX_RUNE) {\n      i.op = Inst.RUNE_ANY_NOT_NL;\n    }\n    return f;\n  }\n  compile(re) {\n    switch (re.op) {\n      case Regexp.Op.NO_MATCH:\n        return this.fail();\n      case Regexp.Op.EMPTY_MATCH:\n        return this.nop();\n      case Regexp.Op.LITERAL:\n        if (re.runes.length === 0) {\n          return this.nop();\n        } else {\n          let f = null;\n          for (let r of re.runes) {\n            const f1 = this.rune([r], re.flags);\n            f = f === null ? f1 : this.cat(f, f1);\n          }\n          return f;\n        }\n      case Regexp.Op.CHAR_CLASS:\n        return this.rune(re.runes, re.flags);\n      case Regexp.Op.ANY_CHAR_NOT_NL:\n        return this.rune(Compiler.ANY_RUNE_NOT_NL(), 0);\n      case Regexp.Op.ANY_CHAR:\n        return this.rune(Compiler.ANY_RUNE(), 0);\n      case Regexp.Op.BEGIN_LINE:\n        return this.empty(Utils.EMPTY_BEGIN_LINE);\n      case Regexp.Op.END_LINE:\n        return this.empty(Utils.EMPTY_END_LINE);\n      case Regexp.Op.BEGIN_TEXT:\n        return this.empty(Utils.EMPTY_BEGIN_TEXT);\n      case Regexp.Op.END_TEXT:\n        return this.empty(Utils.EMPTY_END_TEXT);\n      case Regexp.Op.WORD_BOUNDARY:\n        return this.empty(Utils.EMPTY_WORD_BOUNDARY);\n      case Regexp.Op.NO_WORD_BOUNDARY:\n        return this.empty(Utils.EMPTY_NO_WORD_BOUNDARY);\n      case Regexp.Op.CAPTURE:\n        {\n          const bra = this.cap(re.cap << 1);\n          const sub = this.compile(re.subs[0]);\n          const ket = this.cap(re.cap << 1 | 1);\n          return this.cat(this.cat(bra, sub), ket);\n        }\n      case Regexp.Op.STAR:\n        return this.star(this.compile(re.subs[0]), (re.flags & RE2Flags.NON_GREEDY) !== 0);\n      case Regexp.Op.PLUS:\n        return this.plus(this.compile(re.subs[0]), (re.flags & RE2Flags.NON_GREEDY) !== 0);\n      case Regexp.Op.QUEST:\n        return this.quest(this.compile(re.subs[0]), (re.flags & RE2Flags.NON_GREEDY) !== 0);\n      case Regexp.Op.CONCAT:\n        {\n          if (re.subs.length === 0) {\n            return this.nop();\n          } else {\n            let f = null;\n            for (let sub of re.subs) {\n              const f1 = this.compile(sub);\n              f = f === null ? f1 : this.cat(f, f1);\n            }\n            return f;\n          }\n        }\n      case Regexp.Op.ALTERNATE:\n        {\n          if (re.subs.length === 0) {\n            return this.nop();\n          } else {\n            let f = null;\n            for (let sub of re.subs) {\n              const f1 = this.compile(sub);\n              f = f === null ? f1 : this.alt(f, f1);\n            }\n            return f;\n          }\n        }\n      default:\n        throw new RE2JSCompileException('regexp: unhandled case in compile');\n    }\n  }\n}\n\nclass Simplify {\n  // Simplify returns a regexp equivalent to re but without counted\n  // repetitions and with various other simplifications, such as\n  // rewriting /(?:a+)+/ to /a+/.  The resulting regexp will execute\n  // correctly but its string representation will not produce the same\n  // parse tree, because capturing parentheses may have been duplicated\n  // or removed.  For example, the simplified form for /(x){1,2}/ is\n  // /(x)(x)?/ but both parentheses capture as $1.  The returned regexp\n  // may share structure with or be the original.\n  static simplify(re) {\n    if (re === null) {\n      return null;\n    }\n    switch (re.op) {\n      case Regexp.Op.CAPTURE:\n      case Regexp.Op.CONCAT:\n      case Regexp.Op.ALTERNATE:\n        {\n          let nre = re;\n          for (let i = 0; i < re.subs.length; i++) {\n            const sub = re.subs[i];\n            const nsub = Simplify.simplify(sub);\n            if (nre === re && nsub !== sub) {\n              nre = Regexp.fromRegexp(re);\n              nre.runes = [];\n              nre.subs = re.subs.slice(0, re.subs.length);\n            }\n            if (nre !== re) {\n              nre.subs[i] = nsub;\n            }\n          }\n          return nre;\n        }\n      case Regexp.Op.STAR:\n      case Regexp.Op.PLUS:\n      case Regexp.Op.QUEST:\n        {\n          const sub = Simplify.simplify(re.subs[0]);\n          return Simplify.simplify1(re.op, re.flags, sub, re);\n        }\n      case Regexp.Op.REPEAT:\n        {\n          // Special special case: x{0} matches the empty string\n          // and doesn't even need to consider x.\n          if (re.min === 0 && re.max === 0) {\n            return new Regexp(Regexp.Op.EMPTY_MATCH);\n          }\n          // The fun begins.\n          const sub = Simplify.simplify(re.subs[0]);\n\n          // x{n,} means at least n matches of x.\n          if (re.max === -1) {\n            // Special case: x{0,} is x*.\n            if (re.min === 0) {\n              return Simplify.simplify1(Regexp.Op.STAR, re.flags, sub, null);\n            }\n            // Special case: x{1,} is x+.\n            if (re.min === 1) {\n              return Simplify.simplify1(Regexp.Op.PLUS, re.flags, sub, null);\n            }\n            // General case: x{4,} is xxxx+.\n            const nre = new Regexp(Regexp.Op.CONCAT);\n            const subs = [];\n            for (let i = 0; i < re.min - 1; i++) {\n              subs.push(sub);\n            }\n            subs.push(Simplify.simplify1(Regexp.Op.PLUS, re.flags, sub, null));\n            nre.subs = subs.slice(0);\n            return nre;\n          }\n          // Special case x{0} handled above.\n\n          // Special case: x{1} is just x.\n          if (re.min === 1 && re.max === 1) {\n            return sub;\n          }\n\n          // General case: x{n,m} means n copies of x and m copies of x?\n          // The machine will do less work if we nest the final m copies,\n          // so that x{2,5} = xx(x(x(x)?)?)?\n\n          // Build leading prefix: xx.\n          let prefixSubs = null;\n          if (re.min > 0) {\n            prefixSubs = [];\n            for (let i = 0; i < re.min; i++) {\n              prefixSubs.push(sub);\n            }\n          }\n\n          // Build and attach suffix: (x(x(x)?)?)?\n          if (re.max > re.min) {\n            let suffix = Simplify.simplify1(Regexp.Op.QUEST, re.flags, sub, null);\n            for (let i = re.min + 1; i < re.max; i++) {\n              const nre2 = new Regexp(Regexp.Op.CONCAT);\n              nre2.subs = [sub, suffix];\n              suffix = Simplify.simplify1(Regexp.Op.QUEST, re.flags, nre2, null);\n            }\n            if (prefixSubs === null) {\n              return suffix;\n            }\n            prefixSubs.push(suffix);\n          }\n          if (prefixSubs !== null) {\n            const prefix = new Regexp(Regexp.Op.CONCAT);\n            prefix.subs = prefixSubs.slice(0);\n            return prefix;\n          }\n\n          // Some degenerate case like min > max or min < max < 0.\n          // Handle as impossible match.\n          return new Regexp(Regexp.Op.NO_MATCH);\n        }\n    }\n    return re;\n  }\n\n  // simplify1 implements Simplify for the unary OpStar,\n  // OpPlus, and OpQuest operators.  It returns the simple regexp\n  // equivalent to\n  //\n  //      Regexp{Op: op, Flags: flags, Sub: {sub}}\n  //\n  // under the assumption that sub is already simple, and\n  // without first allocating that structure.  If the regexp\n  // to be returned turns out to be equivalent to re, simplify1\n  // returns re instead.\n  //\n  // simplify1 is factored out of Simplify because the implementation\n  // for other operators generates these unary expressions.\n  // Letting them call simplify1 makes sure the expressions they\n  // generate are simple.\n  static simplify1(op, flags, sub, re) {\n    // Special case: repeat the empty string as much as\n    // you want, but it's still the empty string.\n    if (sub.op === Regexp.Op.EMPTY_MATCH) {\n      return sub;\n    }\n\n    // The operators are idempotent if the flags match.\n    if (op === sub.op && (flags & RE2Flags.NON_GREEDY) === (sub.flags & RE2Flags.NON_GREEDY)) {\n      return sub;\n    }\n    if (re !== null && re.op === op && (re.flags & RE2Flags.NON_GREEDY) === (flags & RE2Flags.NON_GREEDY) && sub === re.subs[0]) {\n      return re;\n    }\n    re = new Regexp(op);\n    re.flags = flags;\n    re.subs = [sub];\n    return re;\n  }\n}\n\n// GENERATED BY tools/scripts/make_perl_groups.pl; DO NOT EDIT.\n// ./tools/scripts/make_perl_groups.pl  > src/CharGroup.js\n\nclass CharGroup {\n  constructor(sign, cls) {\n    this.sign = sign;\n    this.cls = cls;\n  }\n}\nconst code1 = [0x30, 0x39];\nconst code2 = [0x9, 0xa, 0xc, 0xd, 0x20, 0x20];\nconst code3 = [0x30, 0x39, 0x41, 0x5a, 0x5f, 0x5f, 0x61, 0x7a];\nconst PERL_GROUPS = new Map([['\\\\d', new CharGroup(1, code1)], ['\\\\D', new CharGroup(-1, code1)], ['\\\\s', new CharGroup(1, code2)], ['\\\\S', new CharGroup(-1, code2)], ['\\\\w', new CharGroup(1, code3)], ['\\\\W', new CharGroup(-1, code3)]]);\nconst code4 = [0x30, 0x39, 0x41, 0x5a, 0x61, 0x7a];\nconst code5 = [0x41, 0x5a, 0x61, 0x7a];\nconst code6 = [0x0, 0x7f];\nconst code7 = [0x9, 0x9, 0x20, 0x20];\nconst code8 = [0x0, 0x1f, 0x7f, 0x7f];\nconst code9 = [0x30, 0x39];\nconst code10 = [0x21, 0x7e];\nconst code11 = [0x61, 0x7a];\nconst code12 = [0x20, 0x7e];\nconst code13 = [0x21, 0x2f, 0x3a, 0x40, 0x5b, 0x60, 0x7b, 0x7e];\nconst code14 = [0x9, 0xd, 0x20, 0x20];\nconst code15 = [0x41, 0x5a];\nconst code16 = [0x30, 0x39, 0x41, 0x5a, 0x5f, 0x5f, 0x61, 0x7a];\nconst code17 = [0x30, 0x39, 0x41, 0x46, 0x61, 0x66];\nconst POSIX_GROUPS = new Map([['[:alnum:]', new CharGroup(1, code4)], ['[:^alnum:]', new CharGroup(-1, code4)], ['[:alpha:]', new CharGroup(1, code5)], ['[:^alpha:]', new CharGroup(-1, code5)], ['[:ascii:]', new CharGroup(1, code6)], ['[:^ascii:]', new CharGroup(-1, code6)], ['[:blank:]', new CharGroup(1, code7)], ['[:^blank:]', new CharGroup(-1, code7)], ['[:cntrl:]', new CharGroup(1, code8)], ['[:^cntrl:]', new CharGroup(-1, code8)], ['[:digit:]', new CharGroup(1, code9)], ['[:^digit:]', new CharGroup(-1, code9)], ['[:graph:]', new CharGroup(1, code10)], ['[:^graph:]', new CharGroup(-1, code10)], ['[:lower:]', new CharGroup(1, code11)], ['[:^lower:]', new CharGroup(-1, code11)], ['[:print:]', new CharGroup(1, code12)], ['[:^print:]', new CharGroup(-1, code12)], ['[:punct:]', new CharGroup(1, code13)], ['[:^punct:]', new CharGroup(-1, code13)], ['[:space:]', new CharGroup(1, code14)], ['[:^space:]', new CharGroup(-1, code14)], ['[:upper:]', new CharGroup(1, code15)], ['[:^upper:]', new CharGroup(-1, code15)], ['[:word:]', new CharGroup(1, code16)], ['[:^word:]', new CharGroup(-1, code16)], ['[:xdigit:]', new CharGroup(1, code17)], ['[:^xdigit:]', new CharGroup(-1, code17)]]);\n\n/**\n * A \"builder\"-style helper class for manipulating character classes represented as an array of\n * pairs of runes [lo, hi], each denoting an inclusive interval.\n *\n * All methods mutate the internal state and return {@code this}, allowing operations to be chained.\n */\nclass CharClass {\n  // Exposed, since useful for debugging CharGroups too.\n  static charClassToString(r, len) {\n    let result = '[';\n    for (let i = 0; i < len; i += 2) {\n      if (i > 0) {\n        result += ' ';\n      }\n      const lo = r[i];\n      const hi = r[i + 1];\n      if (lo === hi) {\n        result += `0x${lo.toString(16)}`;\n      } else {\n        result += `0x${lo.toString(16)}-0x${hi.toString(16)}`;\n      }\n    }\n    result += ']';\n    return result;\n  }\n\n  // cmp() returns the ordering of the pair (a[i], a[i+1]) relative to\n  // (pivotFrom, pivotTo), where the first component of the pair (lo) is\n  // ordered naturally and the second component (hi) is in reverse order.\n  static cmp(array, i, pivotFrom, pivotTo) {\n    const cmp = array[i] - pivotFrom;\n    return cmp !== 0 ? cmp : pivotTo - array[i + 1];\n  }\n\n  // qsortIntPair() quicksorts pairs of ints in |array| according to lt().\n  // Precondition: |left|, |right|, |this.len| must all be even; |this.len > 1|.\n  static qsortIntPair(array, left, right) {\n    const pivotIndex = ((left + right) / 2 | 0) & -2;\n    const pivotFrom = array[pivotIndex];\n    const pivotTo = array[pivotIndex + 1];\n    let i = left;\n    let j = right;\n    while (i <= j) {\n      while (i < right && CharClass.cmp(array, i, pivotFrom, pivotTo) < 0) {\n        i += 2;\n      }\n      while (j > left && CharClass.cmp(array, j, pivotFrom, pivotTo) > 0) {\n        j -= 2;\n      }\n      if (i <= j) {\n        if (i !== j) {\n          let temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n          temp = array[i + 1];\n          array[i + 1] = array[j + 1];\n          array[j + 1] = temp;\n        }\n        i += 2;\n        j -= 2;\n      }\n    }\n    if (left < j) {\n      CharClass.qsortIntPair(array, left, j);\n    }\n    if (i < right) {\n      CharClass.qsortIntPair(array, i, right);\n    }\n  }\n  constructor(r = Utils.emptyInts()) {\n    this.r = r; // inclusive ranges, pairs of [lo,hi].  r.length is even.\n    this.len = r.length; // prefix of |r| that is defined.  Even.\n  }\n\n  // Returns the character class as an int array.  Subsequent CharClass\n  // operations may mutate this array, so typically this is the last operation\n  // performed on a given CharClass instance.\n  toArray() {\n    if (this.len === this.r.length) {\n      return this.r;\n    } else {\n      return this.r.slice(0, this.len);\n    }\n  }\n\n  // cleanClass() sorts the ranges (pairs of elements) of this CharClass,\n  // merges them, and eliminates duplicates.\n  cleanClass() {\n    if (this.len < 4) {\n      return this;\n    }\n    // Sort by lo increasing, hi decreasing to break ties.\n    CharClass.qsortIntPair(this.r, 0, this.len - 2);\n    // Merge abutting, overlapping.\n    let w = 2; // write index\n    for (let i = 2; i < this.len; i += 2) {\n      {\n        const lo = this.r[i];\n        const hi = this.r[i + 1];\n        if (lo <= this.r[w - 1] + 1) {\n          // merge with previous range\n          if (hi > this.r[w - 1]) {\n            this.r[w - 1] = hi;\n          }\n          continue;\n        }\n        // new disjoint range\n        this.r[w] = lo;\n        this.r[w + 1] = hi;\n        w += 2;\n      }\n    }\n    this.len = w;\n    return this;\n  }\n\n  // appendLiteral() appends the literal |x| to this CharClass.\n  appendLiteral(x, flags) {\n    return (flags & RE2Flags.FOLD_CASE) !== 0 ? this.appendFoldedRange(x, x) : this.appendRange(x, x);\n  }\n\n  // appendRange() appends the range [lo-hi] (inclusive) to this CharClass.\n  appendRange(lo, hi) {\n    // Expand last range or next to last range if it overlaps or abuts.\n    // Checking two ranges helps when appending case-folded\n    // alphabets, so that one range can be expanding A-Z and the\n    // other expanding a-z.\n    if (this.len > 0) {\n      for (let i = 2; i <= 4; i += 2) {\n        // twice, using i=2, i=4\n        if (this.len >= i) {\n          const rlo = this.r[this.len - i];\n          const rhi = this.r[this.len - i + 1];\n          if (lo <= rhi + 1 && rlo <= hi + 1) {\n            if (lo < rlo) {\n              this.r[this.len - i] = lo;\n            }\n            if (hi > rhi) {\n              this.r[this.len - i + 1] = hi;\n            }\n            return this;\n          }\n        }\n      }\n    }\n    this.r[this.len++] = lo;\n    this.r[this.len++] = hi;\n    return this;\n  }\n\n  // appendFoldedRange() appends the range [lo-hi] and its case\n  // folding-equivalent runes to this CharClass.\n  appendFoldedRange(lo, hi) {\n    // Optimizations.\n    if (lo <= Unicode.MIN_FOLD && hi >= Unicode.MAX_FOLD) {\n      // Range is full: folding can't add more.\n      return this.appendRange(lo, hi);\n    }\n    if (hi < Unicode.MIN_FOLD || lo > Unicode.MAX_FOLD) {\n      // Range is outside folding possibilities.\n      return this.appendRange(lo, hi);\n    }\n    if (lo < Unicode.MIN_FOLD) {\n      // [lo, minFold-1] needs no folding.\n      this.appendRange(lo, Unicode.MIN_FOLD - 1);\n      lo = Unicode.MIN_FOLD;\n    }\n    if (hi > Unicode.MAX_FOLD) {\n      // [maxFold+1, hi] needs no folding.\n      this.appendRange(Unicode.MAX_FOLD + 1, hi);\n      hi = Unicode.MAX_FOLD;\n    }\n\n    // Brute force.  Depend on appendRange to coalesce ranges on the fly.\n    for (let c = lo; c <= hi; c++) {\n      this.appendRange(c, c);\n      for (let f = Unicode.simpleFold(c); f !== c; f = Unicode.simpleFold(f)) {\n        this.appendRange(f, f);\n      }\n    }\n    return this;\n  }\n\n  // appendClass() appends the class |x| to this CharClass.\n  // It assumes |x| is clean.  Does not mutate |x|.\n  appendClass(x) {\n    for (let i = 0; i < x.length; i += 2) {\n      this.appendRange(x[i], x[i + 1]);\n    }\n    return this;\n  }\n\n  // appendFoldedClass() appends the case folding of the class |x| to this\n  // CharClass.  Does not mutate |x|.\n  appendFoldedClass(x) {\n    for (let i = 0; i < x.length; i += 2) {\n      this.appendFoldedRange(x[i], x[i + 1]);\n    }\n    return this;\n  }\n\n  // appendNegatedClass() append the negation of the class |x| to this\n  // CharClass.  It assumes |x| is clean.  Does not mutate |x|.\n  appendNegatedClass(x) {\n    let nextLo = 0;\n    for (let i = 0; i < x.length; i += 2) {\n      const lo = x[i];\n      const hi = x[i + 1];\n      if (nextLo <= lo - 1) {\n        this.appendRange(nextLo, lo - 1);\n      }\n      nextLo = hi + 1;\n    }\n    if (nextLo <= Unicode.MAX_RUNE) {\n      this.appendRange(nextLo, Unicode.MAX_RUNE);\n    }\n    return this;\n  }\n\n  // appendTable() appends the Unicode range table |table| to this CharClass.\n  // Does not mutate |table|.\n  appendTable(table) {\n    for (let triple of table) {\n      const lo = triple[0];\n      const hi = triple[1];\n      const stride = triple[2];\n      if (stride === 1) {\n        this.appendRange(lo, hi);\n        continue;\n      }\n      for (let c = lo; c <= hi; c += stride) {\n        this.appendRange(c, c);\n      }\n    }\n    return this;\n  }\n\n  // appendNegatedTable() returns the result of appending the negation of range\n  // table |table| to this CharClass.  Does not mutate |table|.\n  appendNegatedTable(table) {\n    let nextLo = 0;\n    for (let triple of table) {\n      const lo = triple[0];\n      const hi = triple[1];\n      const stride = triple[2];\n      if (stride === 1) {\n        if (nextLo <= lo - 1) {\n          this.appendRange(nextLo, lo - 1);\n        }\n        nextLo = hi + 1;\n        continue;\n      }\n      for (let c = lo; c <= hi; c += stride) {\n        if (nextLo <= c - 1) {\n          this.appendRange(nextLo, c - 1);\n        }\n        nextLo = c + 1;\n      }\n    }\n    if (nextLo <= Unicode.MAX_RUNE) {\n      this.appendRange(nextLo, Unicode.MAX_RUNE);\n    }\n    return this;\n  }\n\n  // appendTableWithSign() calls append{,Negated}Table depending on sign.\n  // Does not mutate |table|.\n  appendTableWithSign(table, sign) {\n    return sign < 0 ? this.appendNegatedTable(table) : this.appendTable(table);\n  }\n\n  // negateClass() negates this CharClass, which must already be clean.\n  negateClass() {\n    let nextLo = 0; // lo end of next class to add\n    let w = 0; // write index\n    for (let i = 0; i < this.len; i += 2) {\n      const lo = this.r[i];\n      const hi = this.r[i + 1];\n      if (nextLo <= lo - 1) {\n        this.r[w] = nextLo;\n        this.r[w + 1] = lo - 1;\n        w += 2;\n      }\n      nextLo = hi + 1;\n    }\n    this.len = w;\n    if (nextLo <= Unicode.MAX_RUNE) {\n      this.r[this.len++] = nextLo;\n      this.r[this.len++] = Unicode.MAX_RUNE;\n    }\n    return this;\n  }\n\n  // appendClassWithSign() calls appendClass() if sign is +1 or\n  // appendNegatedClass if sign is -1.  Does not mutate |x|.\n  appendClassWithSign(x, sign) {\n    return sign < 0 ? this.appendNegatedClass(x) : this.appendClass(x);\n  }\n\n  // appendGroup() appends CharGroup |g| to this CharClass, folding iff\n  // |foldCase|.  Does not mutate |g|.\n  appendGroup(g, foldCase) {\n    let cls = g.cls;\n    if (foldCase) {\n      cls = new CharClass().appendFoldedClass(cls).cleanClass().toArray();\n    }\n    return this.appendClassWithSign(cls, g.sign);\n  }\n  toString() {\n    return CharClass.charClassToString(this.r, this.len);\n  }\n}\n\nclass Pair {\n  static of(first, second) {\n    return new Pair(first, second);\n  }\n  constructor(first, second) {\n    this.first = first;\n    this.second = second;\n  }\n}\n\n// StringIterator: a stream of runes with an opaque cursor, permitting\n// rewinding.  The units of the cursor are not specified beyond the\n// fact that ASCII characters are single width.  (Cursor positions\n// could be UTF-8 byte indices, UTF-16 code indices or rune indices.)\n//\n// In particular, be careful with:\n// - skip: only use this to advance over ASCII characters\n//   since these always have a width of 1.\n// - skipString: only use this to advance over strings which are\n//   known to be at the current position, e.g. due to prior call to\n//   lookingAt().\n// Only use pop() to advance over possibly non-ASCII runes.\nclass StringIterator {\n  constructor(str) {\n    this.str = str;\n    this.position = 0;\n  }\n\n  // Returns the cursor position.  Do not interpret the result!\n  pos() {\n    return this.position;\n  }\n\n  // Resets the cursor position to a previous value returned by pos().\n  rewindTo(pos) {\n    this.position = pos;\n  }\n\n  // Returns true unless the stream is exhausted.\n  more() {\n    return this.position < this.str.length;\n  }\n\n  // Returns the rune at the cursor position.\n  // Precondition: |more()|.\n  peek() {\n    return this.str.codePointAt(this.position);\n  }\n\n  // Advances the cursor by |n| positions, which must be ASCII runes.\n  //\n  // (In practise, this is only ever used to skip over regexp\n  // metacharacters that are ASCII, so there is no numeric difference\n  // between indices into  UTF-8 bytes, UTF-16 codes and runes.)\n  skip(n) {\n    this.position += n;\n  }\n\n  // Advances the cursor by the number of cursor positions in |s|.\n  skipString(s) {\n    this.position += s.length;\n  }\n\n  // Returns the rune at the cursor position, and advances the cursor\n  // past it.  Precondition: |more()|.\n  pop() {\n    const r = this.str.codePointAt(this.position);\n    this.position += Utils.charCount(r);\n    return r;\n  }\n  lookingAt(s) {\n    return this.rest().startsWith(s);\n  }\n\n  // Returns the rest of the pattern as a Java UTF-16 string.\n  rest() {\n    return this.str.substring(this.position);\n  }\n\n  // Returns the substring from |beforePos| to the current position.\n  // |beforePos| must have been previously returned by |pos()|.\n  from(beforePos) {\n    return this.str.substring(beforePos, this.position);\n  }\n  toString() {\n    return this.rest();\n  }\n}\n/**\n * A parser of regular expression patterns.\n *\n * The only public entry point is {@link #parse(String pattern, int flags)}.\n */\nclass Parser {\n  // Unexpected error\n  static ERR_INTERNAL_ERROR = 'regexp/syntax: internal error';\n\n  // Parse errors\n  static ERR_INVALID_CHAR_RANGE = 'invalid character class range';\n  static ERR_INVALID_ESCAPE = 'invalid escape sequence';\n  static ERR_INVALID_NAMED_CAPTURE = 'invalid named capture';\n  static ERR_INVALID_PERL_OP = 'invalid or unsupported Perl syntax';\n  static ERR_INVALID_REPEAT_OP = 'invalid nested repetition operator';\n  static ERR_INVALID_REPEAT_SIZE = 'invalid repeat count';\n  static ERR_MISSING_BRACKET = 'missing closing ]';\n  static ERR_MISSING_PAREN = 'missing closing )';\n  static ERR_MISSING_REPEAT_ARGUMENT = 'missing argument to repetition operator';\n  static ERR_TRAILING_BACKSLASH = 'trailing backslash at end of expression';\n  static ERR_DUPLICATE_NAMED_CAPTURE = 'duplicate capture group name';\n  static ERR_UNEXPECTED_PAREN = 'unexpected )';\n  static ERR_NESTING_DEPTH = 'expression nests too deeply';\n  static ERR_LARGE = 'expression too large';\n\n  // maxHeight is the maximum height of a regexp parse tree.\n  // It is somewhat arbitrarily chosen, but the idea is to be large enough\n  // that no one will actually hit in real use but at the same time small enough\n  // that recursion on the Regexp tree will not hit the 1GB Go stack limit.\n  // The maximum amount of stack for a single recursive frame is probably\n  // closer to 1kB, so this could potentially be raised, but it seems unlikely\n  // that people have regexps nested even this deeply.\n  // We ran a test on Google's C++ code base and turned up only\n  // a single use case with depth > 100; it had depth 128.\n  // Using depth 1000 should be plenty of margin.\n  // As an optimization, we don't even bother calculating heights\n  // until we've allocated at least maxHeight Regexp structures.\n  static MAX_HEIGHT = 1000;\n\n  // maxSize is the maximum size of a compiled regexp in Insts.\n  // It too is somewhat arbitrarily chosen, but the idea is to be large enough\n  // to allow significant regexps while at the same time small enough that\n  // the compiled form will not take up too much memory.\n  // 128 MB is enough for a 3.3 million Inst structures, which roughly\n  // corresponds to a 3.3 MB regexp.\n  static MAX_SIZE = 3355443; // 128 << 20 / (5 * 8) (instSize = byte, 2 uint32, slice is 5 64-bit words)\n\n  // maxRunes is the maximum number of runes allowed in a regexp tree\n  // counting the runes in all the nodes.\n  // Ignoring character classes p.numRunes is always less than the length of the regexp.\n  // Character classes can make it much larger: each \\pL adds 1292 runes.\n  // 128 MB is enough for 32M runes, which is over 26k \\pL instances.\n  // Note that repetitions do not make copies of the rune slices,\n  // so \\pL{1000} is only one rune slice, not 1000.\n  // We could keep a cache of character classes we've seen,\n  // so that all the \\pL we see use the same rune list,\n  // but that doesn't remove the problem entirely:\n  // consider something like [\\pL01234][\\pL01235][\\pL01236]...[\\pL^&*()].\n  // And because the Rune slice is exposed directly in the Regexp,\n  // there is not an opportunity to change the representation to allow\n  // partial sharing between different character classes.\n  // So the limit is the best we can do.\n  static MAX_RUNES = 33554432; // 128 << 20 / 4 (runeSize, int32 is 4 bytes)\n\n  // RangeTables are represented as int[][], a list of triples (start, end,\n  // stride).\n  static ANY_TABLE() {\n    return [[0, Unicode.MAX_RUNE, 1]];\n  }\n\n  // unicodeTable() returns the Unicode RangeTable identified by name\n  // and the table of additional fold-equivalent code points.\n  // Returns null if |name| does not identify a Unicode character range.\n  static unicodeTable(name) {\n    if (name === 'Any') {\n      return Pair.of(Parser.ANY_TABLE(), Parser.ANY_TABLE());\n    }\n    if (UnicodeTables.CATEGORIES.has(name)) {\n      return Pair.of(UnicodeTables.CATEGORIES.get(name), UnicodeTables.FOLD_CATEGORIES.get(name));\n    }\n    if (UnicodeTables.SCRIPTS.has(name)) {\n      return Pair.of(UnicodeTables.SCRIPTS.get(name), UnicodeTables.FOLD_SCRIPT.get(name));\n    }\n    return null;\n  }\n\n  // minFoldRune returns the minimum rune fold-equivalent to r.\n  static minFoldRune(r) {\n    if (r < Unicode.MIN_FOLD || r > Unicode.MAX_FOLD) {\n      return r;\n    }\n    let min = r;\n    const r0 = r;\n    for (r = Unicode.simpleFold(r); r !== r0; r = Unicode.simpleFold(r)) {\n      if (min > r) {\n        min = r;\n      }\n    }\n    return min;\n  }\n\n  // leadingRegexp returns the leading regexp that re begins with.\n  // The regexp refers to storage in re or its children.\n  static leadingRegexp(re) {\n    if (re.op === Regexp.Op.EMPTY_MATCH) {\n      return null;\n    }\n    if (re.op === Regexp.Op.CONCAT && re.subs.length > 0) {\n      const sub = re.subs[0];\n      if (sub.op === Regexp.Op.EMPTY_MATCH) {\n        return null;\n      }\n      return sub;\n    }\n    return re;\n  }\n  static literalRegexp(s, flags) {\n    const re = new Regexp(Regexp.Op.LITERAL);\n    re.flags = flags;\n    re.runes = Utils.stringToRunes(s);\n    return re;\n  }\n  /**\n   * Parse regular expression pattern {@code pattern} with mode flags {@code flags}.\n   * @param {string} pattern\n   * @param {number} flags\n   */\n  static parse(pattern, flags) {\n    return new Parser(pattern, flags).parseInternal();\n  }\n\n  // parseRepeat parses {min} (max=min) or {min,} (max=-1) or {min,max}.\n  // If |t| is not of that form, it returns -1.\n  // If |t| has the right form but the values are negative or too big,\n  // it returns -2.\n  // On success, returns a nonnegative number encoding min/max in the\n  // high/low signed halfwords of the result.  (Note: min >= 0; max may\n  // be -1.)\n  //\n  // On success, advances |t| beyond the repeat; otherwise |t.pos()| is\n  // undefined.\n  static parseRepeat(t) {\n    const start = t.pos();\n    if (!t.more() || !t.lookingAt('{')) {\n      return -1;\n    }\n    t.skip(1);\n    const min = Parser.parseInt(t);\n    if (min === -1) {\n      return -1;\n    }\n    if (!t.more()) {\n      return -1;\n    }\n    let max;\n    if (!t.lookingAt(',')) {\n      max = min;\n    } else {\n      t.skip(1);\n      if (!t.more()) {\n        return -1;\n      }\n      if (t.lookingAt('}')) {\n        max = -1;\n      } else if ((max = Parser.parseInt(t)) === -1) {\n        return -1;\n      }\n    }\n    if (!t.more() || !t.lookingAt('}')) {\n      return -1;\n    }\n    t.skip(1);\n    if (min < 0 || min > 1000 || max === -2 || max > 1000 || max >= 0 && min > max) {\n      throw new RE2JSSyntaxException(Parser.ERR_INVALID_REPEAT_SIZE, t.from(start));\n    }\n    return min << 16 | max & Unicode.MAX_BMP;\n  }\n\n  // isValidCaptureName reports whether name\n  // is a valid capture name: [A-Za-z0-9_]+.\n  // PCRE limits names to 32 bytes.\n  // Python rejects names starting with digits.\n  // We don't enforce either of those.\n  static isValidCaptureName(name) {\n    if (name.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < name.length; i++) {\n      const c = name.codePointAt(i);\n      if (c !== Codepoint.CODES.get('_') && !Utils.isalnum(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // parseInt parses a nonnegative decimal integer.\n  // -1 => bad format.  -2 => format ok, but integer overflow.\n  static parseInt(t) {\n    const start = t.pos();\n    while (t.more() && t.peek() >= Codepoint.CODES.get('0') && t.peek() <= Codepoint.CODES.get('9')) {\n      t.skip(1);\n    }\n    const n = t.from(start);\n    if (n.length === 0 || n.length > 1 && n.codePointAt(0) === Codepoint.CODES.get('0')) {\n      return -1;\n    }\n    if (n.length > 8) {\n      return -2;\n    }\n    return parseFloat(n, 10);\n  }\n\n  // can this be represented as a character class?\n  // single-rune literal string, char class, ., and .|\\n.\n  static isCharClass(re) {\n    return re.op === Regexp.Op.LITERAL && re.runes.length === 1 || re.op === Regexp.Op.CHAR_CLASS || re.op === Regexp.Op.ANY_CHAR_NOT_NL || re.op === Regexp.Op.ANY_CHAR;\n  }\n\n  // does re match r?\n  static matchRune(re, r) {\n    switch (re.op) {\n      case Regexp.Op.LITERAL:\n        return re.runes.length === 1 && re.runes[0] === r;\n      case Regexp.Op.CHAR_CLASS:\n        for (let i = 0; i < re.runes.length; i += 2) {\n          if (re.runes[i] <= r && r <= re.runes[i + 1]) {\n            return true;\n          }\n        }\n        return false;\n      case Regexp.Op.ANY_CHAR_NOT_NL:\n        return r !== Codepoint.CODES.get('\\n');\n      case Regexp.Op.ANY_CHAR:\n        return true;\n    }\n    return false;\n  }\n\n  // mergeCharClass makes dst = dst|src.\n  // The caller must ensure that dst.Op >= src.Op,\n  // to reduce the amount of copying.\n  static mergeCharClass(dst, src) {\n    switch (dst.op) {\n      case Regexp.Op.ANY_CHAR:\n        break;\n      case Regexp.Op.ANY_CHAR_NOT_NL:\n        if (Parser.matchRune(src, Codepoint.CODES.get('\\n'))) {\n          dst.op = Regexp.Op.ANY_CHAR;\n        }\n        break;\n      case Regexp.Op.CHAR_CLASS:\n        if (src.op === Regexp.Op.LITERAL) {\n          dst.runes = new CharClass(dst.runes).appendLiteral(src.runes[0], src.flags).toArray();\n        } else {\n          dst.runes = new CharClass(dst.runes).appendClass(src.runes).toArray();\n        }\n        break;\n      case Regexp.Op.LITERAL:\n        if (src.runes[0] === dst.runes[0] && src.flags === dst.flags) {\n          break;\n        }\n        dst.op = Regexp.Op.CHAR_CLASS;\n        dst.runes = new CharClass().appendLiteral(dst.runes[0], dst.flags).appendLiteral(src.runes[0], src.flags).toArray();\n        break;\n    }\n  }\n\n  // parseEscape parses an escape sequence at the beginning of s\n  // and returns the rune.\n  // Pre: t at '\\\\'.  Post: after escape.\n  static parseEscape(t) {\n    const startPos = t.pos();\n    t.skip(1); // '\\\\'\n    if (!t.more()) {\n      throw new RE2JSSyntaxException(Parser.ERR_TRAILING_BACKSLASH);\n    }\n    let c = t.pop();\n    bigswitch: switch (c) {\n      case Codepoint.CODES.get('1'):\n      case Codepoint.CODES.get('2'):\n      case Codepoint.CODES.get('3'):\n      case Codepoint.CODES.get('4'):\n      case Codepoint.CODES.get('5'):\n      case Codepoint.CODES.get('6'):\n      case Codepoint.CODES.get('7'):\n        {\n          if (!t.more() || t.peek() < Codepoint.CODES.get('0') || t.peek() > Codepoint.CODES.get('7')) {\n            break;\n          }\n        }\n      // eslint-disable-next-line no-fallthrough\n      case Codepoint.CODES.get('0'):\n        {\n          let r = c - Codepoint.CODES.get('0');\n          for (let i = 1; i < 3; i++) {\n            if (!t.more() || t.peek() < Codepoint.CODES.get('0') || t.peek() > Codepoint.CODES.get('7')) {\n              break;\n            }\n            r = r * 8 + t.peek() - Codepoint.CODES.get('0');\n            t.skip(1);\n          }\n          return r;\n        }\n      case Codepoint.CODES.get('x'):\n        {\n          if (!t.more()) {\n            break;\n          }\n          c = t.pop();\n          if (c === Codepoint.CODES.get('{')) {\n            let nhex = 0;\n            let r = 0;\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n              if (!t.more()) {\n                break bigswitch;\n              }\n              c = t.pop();\n              if (c === Codepoint.CODES.get('}')) {\n                break;\n              }\n              const v = Utils.unhex(c);\n              if (v < 0) {\n                break bigswitch;\n              }\n              r = r * 16 + v;\n              if (r > Unicode.MAX_RUNE) {\n                break bigswitch;\n              }\n              nhex++;\n            }\n            if (nhex === 0) {\n              break bigswitch;\n            }\n            return r;\n          }\n          const x = Utils.unhex(c);\n          if (!t.more()) {\n            break;\n          }\n          c = t.pop();\n          const y = Utils.unhex(c);\n          if (x < 0 || y < 0) {\n            break;\n          }\n          return x * 16 + y;\n        }\n      case Codepoint.CODES.get('a'):\n        return Codepoint.CODES.get('\\x07');\n      case Codepoint.CODES.get('f'):\n        return Codepoint.CODES.get('\\f');\n      case Codepoint.CODES.get('n'):\n        return Codepoint.CODES.get('\\n');\n      case Codepoint.CODES.get('r'):\n        return Codepoint.CODES.get('\\r');\n      case Codepoint.CODES.get('t'):\n        return Codepoint.CODES.get('\\t');\n      case Codepoint.CODES.get('v'):\n        return Codepoint.CODES.get('\\v');\n      default:\n        if (c <= Unicode.MAX_ASCII && !Utils.isalnum(c)) {\n          return c;\n        }\n        break;\n    }\n    throw new RE2JSSyntaxException(Parser.ERR_INVALID_ESCAPE, t.from(startPos));\n  }\n\n  // parseClassChar parses a character class character and returns it.\n  // wholeClassPos is the position of the start of the entire class \"[...\".\n  // Pre: t at class char; Post: t after it.\n  static parseClassChar(t, wholeClassPos) {\n    if (!t.more()) {\n      throw new RE2JSSyntaxException(Parser.ERR_MISSING_BRACKET, t.from(wholeClassPos));\n    }\n    if (t.lookingAt('\\\\')) {\n      return Parser.parseEscape(t);\n    }\n    return t.pop();\n  }\n  static concatRunes(x, y) {\n    return [...x, ...y];\n  }\n  constructor(wholeRegexp, flags = 0) {\n    this.wholeRegexp = wholeRegexp;\n    // Flags control the behavior of the parser and record information about\n    // regexp context.\n    this.flags = flags;\n    // number of capturing groups seen\n    this.numCap = 0;\n    this.namedGroups = {};\n    // Stack of parsed expressions.\n    this.stack = [];\n    this.free = null;\n    // checks\n    this.numRegexp = 0; // number of regexps allocated\n    this.numRunes = 0; // number of runes in char classes\n    this.repeats = 0; // product of all repetitions seen\n    this.height = null; // regexp height, for height limit check\n    this.size = null; // regexp compiled size, for size limit check\n  }\n\n  // Allocate a Regexp, from the free list if possible.\n  newRegexp(op) {\n    let re = this.free;\n    if (re !== null && re.subs !== null && re.subs.length > 0) {\n      this.free = re.subs[0];\n      re.reinit();\n      re.op = op;\n    } else {\n      re = new Regexp(op);\n      this.numRegexp += 1;\n    }\n    return re;\n  }\n  reuse(re) {\n    if (this.height !== null && Object.prototype.hasOwnProperty.call(this.height, re)) {\n      delete this.height[re];\n    }\n    if (re.subs !== null && re.subs.length > 0) {\n      re.subs[0] = this.free;\n    }\n    this.free = re;\n  }\n  checkLimits(re) {\n    if (this.numRunes > Parser.MAX_RUNES) {\n      throw new RE2JSSyntaxException(Parser.ERR_LARGE);\n    }\n    this.checkSize(re);\n    this.checkHeight(re);\n  }\n  checkSize(re) {\n    if (this.size === null) {\n      // We haven't started tracking size yet.\n      // Do a relatively cheap check to see if we need to start.\n      // Maintain the product of all the repeats we've seen\n      // and don't track if the total number of regexp nodes\n      // we've seen times the repeat product is in budget.\n      if (this.repeats === 0) {\n        this.repeats = 1;\n      }\n      if (re.op === Regexp.Op.REPEAT) {\n        let n = re.max;\n        if (n === -1) {\n          n = re.min;\n        }\n        if (n <= 0) {\n          n = 1;\n        }\n        if (n > Parser.MAX_SIZE / this.repeats) {\n          this.repeats = Parser.MAX_SIZE;\n        } else {\n          this.repeats *= n;\n        }\n      }\n      if (this.numRegexp < Parser.MAX_SIZE / this.repeats) {\n        return;\n      }\n\n      // We need to start tracking size.\n      // Make the map and belatedly populate it\n      // with info about everything we've constructed so far.\n      this.size = {};\n      for (let reEx of this.stack) {\n        this.checkSize(reEx);\n      }\n    }\n    if (this.calcSize(re, true) > Parser.MAX_SIZE) {\n      throw new RE2JSSyntaxException(Parser.ERR_LARGE);\n    }\n  }\n  calcSize(re, force = false) {\n    if (!force) {\n      if (Object.prototype.hasOwnProperty.call(this.size, re)) {\n        return this.size[re];\n      }\n    }\n    let size = 0;\n    switch (re.op) {\n      case Regexp.Op.LITERAL:\n        {\n          size = re.runes.length;\n          break;\n        }\n      case Regexp.Op.CAPTURE:\n      case Regexp.Op.STAR:\n        {\n          // star can be 1+ or 2+; assume 2 pessimistically\n          size = 2 + this.calcSize(re.subs[0]);\n          break;\n        }\n      case Regexp.Op.PLUS:\n      case Regexp.Op.QUEST:\n        {\n          size = 1 + this.calcSize(re.subs[0]);\n          break;\n        }\n      case Regexp.Op.CONCAT:\n        {\n          for (let sub of re.subs) {\n            size = size + this.calcSize(sub);\n          }\n          break;\n        }\n      case Regexp.Op.ALTERNATE:\n        {\n          for (let sub of re.subs) {\n            size = size + this.calcSize(sub);\n          }\n          if (re.subs.length > 1) {\n            size = size + re.subs.length - 1;\n          }\n          break;\n        }\n      case Regexp.Op.REPEAT:\n        {\n          let sub = this.calcSize(re.subs[0]);\n          if (re.max === -1) {\n            if (re.min === 0) {\n              size = 2 + sub; // x*\n            } else {\n              size = 1 + re.min * sub; // xxx+\n            }\n            break;\n          }\n          // x{2,5} = xx(x(x(x)?)?)?\n          size = re.max * sub + (re.max - re.min);\n          break;\n        }\n    }\n    size = Math.max(1, size);\n    this.size[re] = size;\n    return size;\n  }\n  checkHeight(re) {\n    if (this.numRegexp < Parser.MAX_HEIGHT) {\n      return;\n    }\n    if (this.height === null) {\n      this.height = {};\n      for (let reEx of this.stack) {\n        this.checkHeight(reEx);\n      }\n    }\n    if (this.calcHeight(re, true) > Parser.MAX_HEIGHT) {\n      throw new RE2JSSyntaxException(Parser.ERR_NESTING_DEPTH);\n    }\n  }\n  calcHeight(re, force = false) {\n    if (!force) {\n      if (Object.prototype.hasOwnProperty.call(this.height, re)) {\n        return this.height[re];\n      }\n    }\n    let h = 1;\n    for (let sub of re.subs) {\n      const hsub = this.calcHeight(sub);\n      if (h < 1 + hsub) {\n        h = 1 + hsub;\n      }\n    }\n    this.height[re] = h;\n    return h;\n  }\n\n  // Parse stack manipulation.\n\n  pop() {\n    return this.stack.pop();\n  }\n  popToPseudo() {\n    const n = this.stack.length;\n    let i = n;\n    while (i > 0 && !Regexp.isPseudoOp(this.stack[i - 1].op)) {\n      i--;\n    }\n    const r = this.stack.slice(i, n);\n    this.stack = this.stack.slice(0, i);\n    return r;\n  }\n\n  // push pushes the regexp re onto the parse stack and returns the regexp.\n  // Returns null for a CHAR_CLASS that can be merged with the top-of-stack.\n  push(re) {\n    this.numRunes += re.runes.length;\n    if (re.op === Regexp.Op.CHAR_CLASS && re.runes.length === 2 && re.runes[0] === re.runes[1]) {\n      if (this.maybeConcat(re.runes[0], this.flags & -2)) {\n        return null;\n      }\n      re.op = Regexp.Op.LITERAL;\n      re.runes = [re.runes[0]];\n      re.flags = this.flags & -2;\n    } else if (re.op === Regexp.Op.CHAR_CLASS && re.runes.length === 4 && re.runes[0] === re.runes[1] && re.runes[2] === re.runes[3] && Unicode.simpleFold(re.runes[0]) === re.runes[2] && Unicode.simpleFold(re.runes[2]) === re.runes[0] || re.op === Regexp.Op.CHAR_CLASS && re.runes.length === 2 && re.runes[0] + 1 === re.runes[1] && Unicode.simpleFold(re.runes[0]) === re.runes[1] && Unicode.simpleFold(re.runes[1]) === re.runes[0]) {\n      // Case-insensitive rune like [Aa] or [Δδ].\n      if (this.maybeConcat(re.runes[0], this.flags | RE2Flags.FOLD_CASE)) {\n        return null;\n      }\n      // Rewrite as (case-insensitive) literal.\n      re.op = Regexp.Op.LITERAL;\n      re.runes = [re.runes[0]];\n      re.flags = this.flags | RE2Flags.FOLD_CASE;\n    } else {\n      // Incremental concatenation.\n      this.maybeConcat(-1, 0);\n    }\n    this.stack.push(re);\n    this.checkLimits(re);\n    return re;\n  }\n\n  // maybeConcat implements incremental concatenation\n  // of literal runes into string nodes.  The parser calls this\n  // before each push, so only the top fragment of the stack\n  // might need processing.  Since this is called before a push,\n  // the topmost literal is no longer subject to operators like *\n  // (Otherwise ab* would turn into (ab)*.)\n  // If (r >= 0 and there's a node left over, maybeConcat uses it\n  // to push r with the given flags.\n  // maybeConcat reports whether r was pushed.\n  maybeConcat(r, flags) {\n    const n = this.stack.length;\n    if (n < 2) {\n      return false;\n    }\n    const re1 = this.stack[n - 1];\n    const re2 = this.stack[n - 2];\n    if (re1.op !== Regexp.Op.LITERAL || re2.op !== Regexp.Op.LITERAL || (re1.flags & RE2Flags.FOLD_CASE) !== (re2.flags & RE2Flags.FOLD_CASE)) {\n      return false;\n    }\n    // Push re1 into re2.\n    re2.runes = Parser.concatRunes(re2.runes, re1.runes);\n    // Reuse re1 if possible.\n    if (r >= 0) {\n      re1.runes = [r];\n      re1.flags = flags;\n      return true;\n    }\n    this.pop();\n    this.reuse(re1);\n    return false; // did not push r\n  }\n\n  // newLiteral returns a new LITERAL Regexp with the given flags\n  newLiteral(r, flags) {\n    const re = this.newRegexp(Regexp.Op.LITERAL);\n    re.flags = flags;\n    if ((flags & RE2Flags.FOLD_CASE) !== 0) {\n      r = Parser.minFoldRune(r);\n    }\n    re.runes = [r];\n    return re;\n  }\n\n  // literal pushes a literal regexp for the rune r on the stack\n  // and returns that regexp.\n  literal(r) {\n    this.push(this.newLiteral(r, this.flags));\n  }\n\n  // op pushes a regexp with the given op onto the stack\n  // and returns that regexp.\n  op(op) {\n    const re = this.newRegexp(op);\n    re.flags = this.flags;\n    return this.push(re);\n  }\n\n  // repeat replaces the top stack element with itself repeated according to\n  // op, min, max.  beforePos is the start position of the repetition operator.\n  // Pre: t is positioned after the initial repetition operator.\n  // Post: t advances past an optional perl-mode '?', or stays put.\n  //       Or, it fails with RE2JSSyntaxException.\n  repeat(op, min, max, beforePos, t, lastRepeatPos) {\n    let flags = this.flags;\n    if ((flags & RE2Flags.PERL_X) !== 0) {\n      if (t.more() && t.lookingAt('?')) {\n        t.skip(1);\n        flags ^= RE2Flags.NON_GREEDY;\n      }\n      if (lastRepeatPos !== -1) {\n        // In Perl it is not allowed to stack repetition operators:\n        // a** is a syntax error, not a doubled star, and a++ means\n        // something else entirely, which we don't support!\n        throw new RE2JSSyntaxException(Parser.ERR_INVALID_REPEAT_OP, t.from(lastRepeatPos));\n      }\n    }\n    const n = this.stack.length;\n    if (n === 0) {\n      throw new RE2JSSyntaxException(Parser.ERR_MISSING_REPEAT_ARGUMENT, t.from(beforePos));\n    }\n    const sub = this.stack[n - 1];\n    if (Regexp.isPseudoOp(sub.op)) {\n      throw new RE2JSSyntaxException(Parser.ERR_MISSING_REPEAT_ARGUMENT, t.from(beforePos));\n    }\n    const re = this.newRegexp(op);\n    re.min = min;\n    re.max = max;\n    re.flags = flags;\n    re.subs = [sub];\n    this.stack[n - 1] = re;\n    this.checkLimits(re);\n    if (op === Regexp.Op.REPEAT && (min >= 2 || max >= 2) && !this.repeatIsValid(re, 1000)) {\n      throw new RE2JSSyntaxException(Parser.ERR_INVALID_REPEAT_SIZE, t.from(beforePos));\n    }\n  }\n\n  // repeatIsValid reports whether the repetition re is valid.\n  // Valid means that the combination of the top-level repetition\n  // and any inner repetitions does not exceed n copies of the\n  // innermost thing.\n  // This function rewalks the regexp tree and is called for every repetition,\n  // so we have to worry about inducing quadratic behavior in the parser.\n  // We avoid this by only calling repeatIsValid when min or max >= 2.\n  // In that case the depth of any >= 2 nesting can only get to 9 without\n  // triggering a parse error, so each subtree can only be rewalked 9 times.\n  repeatIsValid(re, n) {\n    if (re.op === Regexp.Op.REPEAT) {\n      let m = re.max;\n      if (m === 0) {\n        return true;\n      }\n      if (m < 0) {\n        m = re.min;\n      }\n      if (m > n) {\n        return false;\n      }\n      if (m > 0) {\n        n = Math.trunc(n / m);\n      }\n    }\n    for (let sub of re.subs) {\n      if (!this.repeatIsValid(sub, n)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // concat replaces the top of the stack (above the topmost '|' or '(') with\n  // its concatenation.\n  concat() {\n    this.maybeConcat(-1, 0);\n    const subs = this.popToPseudo();\n    if (subs.length === 0) {\n      return this.push(this.newRegexp(Regexp.Op.EMPTY_MATCH));\n    }\n    return this.push(this.collapse(subs, Regexp.Op.CONCAT));\n  }\n\n  // alternate replaces the top of the stack (above the topmost '(') with its\n  // alternation.\n  alternate() {\n    // Scan down to find pseudo-operator (.\n    // There are no | above (.\n    const subs = this.popToPseudo();\n    // Make sure top class is clean.\n    // All the others already are (see swapVerticalBar).\n    if (subs.length > 0) {\n      this.cleanAlt(subs[subs.length - 1]);\n    }\n    // Empty alternate is special case\n    // (shouldn't happen but easy to handle).\n    if (subs.length === 0) {\n      return this.push(this.newRegexp(Regexp.Op.NO_MATCH));\n    }\n    return this.push(this.collapse(subs, Regexp.Op.ALTERNATE));\n  }\n\n  // cleanAlt cleans re for eventual inclusion in an alternation.\n  cleanAlt(re) {\n    if (re.op === Regexp.Op.CHAR_CLASS) {\n      re.runes = new CharClass(re.runes).cleanClass().toArray();\n      if (re.runes.length === 2 && re.runes[0] === 0 && re.runes[1] === Unicode.MAX_RUNE) {\n        re.runes = [];\n        re.op = Regexp.Op.ANY_CHAR;\n      } else if (re.runes.length === 4 && re.runes[0] === 0 && re.runes[1] === Codepoint.CODES.get('\\n') - 1 && re.runes[2] === Codepoint.CODES.get('\\n') + 1 && re.runes[3] === Unicode.MAX_RUNE) {\n        re.runes = [];\n        re.op = Regexp.Op.ANY_CHAR_NOT_NL;\n      }\n    }\n  }\n\n  // collapse returns the result of applying op to subs[start:end].\n  // If (sub contains op nodes, they all get hoisted up\n  // so that there is never a concat of a concat or an\n  // alternate of an alternate.\n  collapse(subs, op) {\n    if (subs.length === 1) {\n      return subs[0];\n    }\n    // Concatenate subs iff op is same.\n    // Compute length in first pass.\n    let len = 0;\n    for (let sub of subs) {\n      len += sub.op === op ? sub.subs.length : 1;\n    }\n    let newsubs = new Array(len).fill(null);\n    let i = 0;\n    for (let sub of subs) {\n      if (sub.op === op) {\n        newsubs.splice(i, sub.subs.length, ...sub.subs);\n        i += sub.subs.length;\n        this.reuse(sub);\n      } else {\n        newsubs[i++] = sub;\n      }\n    }\n    let re = this.newRegexp(op);\n    re.subs = newsubs;\n    if (op === Regexp.Op.ALTERNATE) {\n      // re.subs = this.factor(re.subs, re.flags)\n      re.subs = this.factor(re.subs);\n      if (re.subs.length === 1) {\n        const old = re;\n        re = re.subs[0];\n        this.reuse(old);\n      }\n    }\n    return re;\n  }\n\n  // factor factors common prefixes from the alternation list sub.  It\n  // returns a replacement list that reuses the same storage and frees\n  // (passes to p.reuse) any removed *Regexps.\n  //\n  // For example,\n  //     ABC|ABD|AEF|BCX|BCY\n  // simplifies by literal prefix extraction to\n  //     A(B(C|D)|EF)|BC(X|Y)\n  // which simplifies by character class introduction to\n  //     A(B[CD]|EF)|BC[XY]\n  //\n  factor(array) {\n    if (array.length < 2) {\n      return array;\n    }\n    // The following code is subtle, because it's a literal JS\n    // translation of code that makes clever use of Go \"slices\".\n    // A slice is a triple (array, offset, length), and the Go\n    // implementation uses two slices, |sub| and |out| backed by the\n    // same array.  In JS, we have to be explicit about all of these\n    // variables, so:\n    //\n    // Go    JS\n    // sub   (array, s, lensub)\n    // out   (array, 0, lenout)   // (always a prefix of |array|)\n    //\n    // In the comments we'll use the logical notation of go slices, e.g. sub[i]\n    // even though the JS code will read array[s + i].\n\n    let s = 0; // offset of first |sub| within array.\n    let lensub = array.length; // = len(sub)\n    let lenout = 0; // = len(out)\n    // Round 1: Factor out common literal prefixes.\n    // Note: (str, strlen) and (istr, istrlen) are like Go slices\n    // onto a prefix of some Regexp's runes array (hence offset=0).\n    let str = null;\n    let strlen = 0;\n    let strflags = 0;\n    let start = 0;\n    for (let i = 0; i <= lensub; i++) {\n      // Invariant: the Regexps that were in sub[0:start] have been\n      // used or marked for reuse, and the slice space has been reused\n      // for out (len <= start).\n      //\n      // Invariant: sub[start:i] consists of regexps that all begin\n      // with str as modified by strflags.\n      let istr = null;\n      let istrlen = 0;\n      let iflags = 0;\n      if (i < lensub) {\n        // NB, we inlined Go's leadingString() since Java has no pair return.\n        let re = array[s + i];\n        if (re.op === Regexp.Op.CONCAT && re.subs.length > 0) {\n          re = re.subs[0];\n        }\n        if (re.op === Regexp.Op.LITERAL) {\n          istr = re.runes;\n          istrlen = re.runes.length;\n          iflags = re.flags & RE2Flags.FOLD_CASE;\n        }\n        // istr is the leading literal string that re begins with.\n        // The string refers to storage in re or its children.\n        if (iflags === strflags) {\n          let same = 0;\n          while (same < strlen && same < istrlen && str[same] === istr[same]) {\n            same++;\n          }\n          if (same > 0) {\n            // Matches at least one rune in current range.\n            // Keep going around.\n            strlen = same;\n            continue;\n          }\n        }\n      }\n      // Found end of a run with common leading literal string:\n      // sub[start:i] all begin with str[0:strlen], but sub[i]\n      // does not even begin with str[0].\n      //\n      // Factor out common string and append factored expression to out.\n      if (i === start) ; else if (i === start + 1) {\n        // Just one: don't bother factoring.\n        array[lenout++] = array[s + start];\n      } else {\n        // Construct factored form: prefix(suffix1|suffix2|...)\n        const prefix = this.newRegexp(Regexp.Op.LITERAL);\n        prefix.flags = strflags;\n        prefix.runes = str.slice(0, strlen);\n        for (let j = start; j < i; j++) {\n          array[s + j] = this.removeLeadingString(array[s + j], strlen);\n          this.checkLimits(array[s + j]);\n        }\n        // Recurse.\n        const suffix = this.collapse(array.slice(s + start, s + i), Regexp.Op.ALTERNATE);\n        const re = this.newRegexp(Regexp.Op.CONCAT);\n        re.subs = [prefix, suffix];\n        array[lenout++] = re;\n      }\n      // Prepare for next iteration.\n      start = i;\n      str = istr;\n      strlen = istrlen;\n      strflags = iflags;\n    }\n    // In Go: sub = out\n    lensub = lenout;\n    s = 0;\n    // Round 2: Factor out common complex prefixes,\n    // just the first piece of each concatenation,\n    // whatever it is.  This is good enough a lot of the time.\n    start = 0;\n    lenout = 0;\n    let first = null;\n    for (let i = 0; i <= lensub; i++) {\n      // Invariant: the Regexps that were in sub[0:start] have been\n      // used or marked for reuse, and the slice space has been reused\n      // for out (lenout <= start).\n      //\n      // Invariant: sub[start:i] consists of regexps that all begin with\n      // ifirst.\n      let ifirst = null;\n      if (i < lensub) {\n        ifirst = Parser.leadingRegexp(array[s + i]);\n        if (first !== null && first.equals(ifirst) && (Parser.isCharClass(first) || first.op === Regexp.Op.REPEAT && first.min === first.max && Parser.isCharClass(first.subs[0]))) {\n          continue;\n        }\n      }\n      // Found end of a run with common leading regexp:\n      // sub[start:i] all begin with first but sub[i] does not.\n      //\n      // Factor out common regexp and append factored expression to out.\n      if (i === start) ; else if (i === start + 1) {\n        // Just one: don't bother factoring.\n        array[lenout++] = array[s + start];\n      } else {\n        // Construct factored form: prefix(suffix1|suffix2|...)\n        const prefix = first;\n        for (let j = start; j < i; j++) {\n          const reuse = j !== start; // prefix came from sub[start]\n          array[s + j] = this.removeLeadingRegexp(array[s + j], reuse);\n          this.checkLimits(array[s + j]);\n        }\n        // recurse\n        const suffix = this.collapse(array.slice(s + start, s + i), Regexp.Op.ALTERNATE);\n        const re = this.newRegexp(Regexp.Op.CONCAT);\n        re.subs = [prefix, suffix];\n        array[lenout++] = re;\n      }\n      // Prepare for next iteration.\n      start = i;\n      first = ifirst;\n    }\n    // In Go: sub = out\n    lensub = lenout;\n    s = 0;\n    // Round 3: Collapse runs of single literals into character classes.\n    start = 0;\n    lenout = 0;\n    for (let i = 0; i <= lensub; i++) {\n      // Invariant: the Regexps that were in sub[0:start] have been\n      // used or marked for reuse, and the slice space has been reused\n      // for out (lenout <= start).\n      //\n      // Invariant: sub[start:i] consists of regexps that are either\n      // literal runes or character classes.\n      if (i < lensub && Parser.isCharClass(array[s + i])) {\n        continue;\n      }\n      // sub[i] is not a char or char class;\n      // emit char class for sub[start:i]...\n      if (i === start) ; else if (i === start + 1) {\n        // Just one: don't bother factoring.\n        array[lenout++] = array[s + start];\n      } else {\n        // Make new char class.\n        // Start with most complex regexp in sub[start].\n        let max = start;\n        for (let j = start + 1; j < i; j++) {\n          const subMax = array[s + max];\n          const subJ = array[s + j];\n          if (subMax.op < subJ.op || subMax.op === subJ.op && (subMax.runes !== null ? subMax.runes.length : 0) < (subJ.runes !== null ? subJ.runes.length : 0)) {\n            max = j;\n          }\n        }\n        // swap sub[start], sub[max].\n        const tmp = array[s + start];\n        array[s + start] = array[s + max];\n        array[s + max] = tmp;\n        for (let j = start + 1; j < i; j++) {\n          Parser.mergeCharClass(array[s + start], array[s + j]);\n          this.reuse(array[s + j]);\n        }\n        this.cleanAlt(array[s + start]);\n        array[lenout++] = array[s + start];\n      }\n      // ... and then emit sub[i].\n      if (i < lensub) {\n        array[lenout++] = array[s + i];\n      }\n      start = i + 1;\n    }\n    // In Go: sub = out\n    lensub = lenout;\n    s = 0;\n    // Round 4: Collapse runs of empty matches into a single empty match.\n    start = 0;\n    lenout = 0;\n    for (let i = 0; i < lensub; ++i) {\n      if (i + 1 < lensub && array[s + i].op === Regexp.Op.EMPTY_MATCH && array[s + i + 1].op === Regexp.Op.EMPTY_MATCH) {\n        continue;\n      }\n      array[lenout++] = array[s + i];\n    }\n    // In Go: sub = out\n    lensub = lenout;\n    s = 0;\n    return array.slice(s, lensub);\n  }\n\n  // removeLeadingString removes the first n leading runes\n  // from the beginning of re.  It returns the replacement for re.\n  removeLeadingString(re, n) {\n    if (re.op === Regexp.Op.CONCAT && re.subs.length > 0) {\n      // Removing a leading string in a concatenation\n      // might simplify the concatenation.\n      const sub = this.removeLeadingString(re.subs[0], n);\n      re.subs[0] = sub;\n      if (sub.op === Regexp.Op.EMPTY_MATCH) {\n        this.reuse(sub);\n        switch (re.subs.length) {\n          case 0:\n          case 1:\n            // Impossible but handle.\n            re.op = Regexp.Op.EMPTY_MATCH;\n            re.subs = null;\n            break;\n          case 2:\n            {\n              const old = re;\n              re = re.subs[1];\n              this.reuse(old);\n              break;\n            }\n          default:\n            re.subs = re.subs.slice(1, re.subs.length);\n            break;\n        }\n      }\n      return re;\n    }\n    if (re.op === Regexp.Op.LITERAL) {\n      re.runes = re.runes.slice(n, re.runes.length);\n      if (re.runes.length === 0) {\n        re.op = Regexp.Op.EMPTY_MATCH;\n      }\n    }\n    return re;\n  }\n\n  // removeLeadingRegexp removes the leading regexp in re.\n  // It returns the replacement for re.\n  // If reuse is true, it passes the removed regexp (if no longer needed) to\n  // reuse.\n  removeLeadingRegexp(re, reuse) {\n    if (re.op === Regexp.Op.CONCAT && re.subs.length > 0) {\n      if (reuse) {\n        this.reuse(re.subs[0]);\n      }\n      re.subs = re.subs.slice(1, re.subs.length);\n      switch (re.subs.length) {\n        case 0:\n          {\n            re.op = Regexp.Op.EMPTY_MATCH;\n            re.subs = Regexp.emptySubs();\n            break;\n          }\n        case 1:\n          {\n            const old = re;\n            re = re.subs[0];\n            this.reuse(old);\n            break;\n          }\n      }\n      return re;\n    }\n    if (reuse) {\n      this.reuse(re);\n    }\n    return this.newRegexp(Regexp.Op.EMPTY_MATCH);\n  }\n  parseInternal() {\n    if ((this.flags & RE2Flags.LITERAL) !== 0) {\n      // Trivial parser for literal string.\n      return Parser.literalRegexp(this.wholeRegexp, this.flags);\n    }\n    // Otherwise, must do real work.\n    let lastRepeatPos = -1;\n    let min = -1;\n    let max = -1;\n    const t = new StringIterator(this.wholeRegexp);\n    while (t.more()) {\n      {\n        let repeatPos = -1;\n        bigswitch: switch (t.peek()) {\n          case Codepoint.CODES.get('('):\n            if ((this.flags & RE2Flags.PERL_X) !== 0 && t.lookingAt('(?')) {\n              // Flag changes and non-capturing groups.\n              this.parsePerlFlags(t);\n              break;\n            }\n            this.op(Regexp.Op.LEFT_PAREN).cap = ++this.numCap;\n            t.skip(1); // '('\n            break;\n          case Codepoint.CODES.get('|'):\n            this.parseVerticalBar(); // '|'\n            t.skip(1); // '|'\n            break;\n          case Codepoint.CODES.get(')'):\n            this.parseRightParen();\n            t.skip(1); // ')'\n            break;\n          case Codepoint.CODES.get('^'):\n            if ((this.flags & RE2Flags.ONE_LINE) !== 0) {\n              this.op(Regexp.Op.BEGIN_TEXT);\n            } else {\n              this.op(Regexp.Op.BEGIN_LINE);\n            }\n            t.skip(1); // '^'\n            break;\n          case Codepoint.CODES.get('$'):\n            if ((this.flags & RE2Flags.ONE_LINE) !== 0) {\n              this.op(Regexp.Op.END_TEXT).flags |= RE2Flags.WAS_DOLLAR;\n            } else {\n              this.op(Regexp.Op.END_LINE);\n            }\n            t.skip(1); // '$'\n            break;\n          case Codepoint.CODES.get('.'):\n            if ((this.flags & RE2Flags.DOT_NL) !== 0) {\n              this.op(Regexp.Op.ANY_CHAR);\n            } else {\n              this.op(Regexp.Op.ANY_CHAR_NOT_NL);\n            }\n            t.skip(1); // '.'\n            break;\n          case Codepoint.CODES.get('['):\n            this.parseClass(t);\n            break;\n          case Codepoint.CODES.get('*'):\n          case Codepoint.CODES.get('+'):\n          case Codepoint.CODES.get('?'):\n            {\n              repeatPos = t.pos();\n              let op = null;\n              switch (t.pop()) {\n                case Codepoint.CODES.get('*'):\n                  op = Regexp.Op.STAR;\n                  break;\n                case Codepoint.CODES.get('+'):\n                  op = Regexp.Op.PLUS;\n                  break;\n                case Codepoint.CODES.get('?'):\n                  op = Regexp.Op.QUEST;\n                  break;\n              }\n              this.repeat(op, min, max, repeatPos, t, lastRepeatPos);\n              // (min and max are now dead.)\n              break;\n            }\n          case Codepoint.CODES.get('{'):\n            {\n              repeatPos = t.pos();\n              const minMax = Parser.parseRepeat(t);\n              if (minMax < 0) {\n                // If the repeat cannot be parsed, { is a literal.\n                t.rewindTo(repeatPos);\n                this.literal(t.pop()); // '{'\n                break;\n              }\n              min = minMax >> 16;\n              max = (minMax & Unicode.MAX_BMP) << 16 >> 16;\n              this.repeat(Regexp.Op.REPEAT, min, max, repeatPos, t, lastRepeatPos);\n              break;\n            }\n          case Codepoint.CODES.get('\\\\'):\n            {\n              const savedPos = t.pos();\n              t.skip(1); // '\\\\'\n              if ((this.flags & RE2Flags.PERL_X) !== 0 && t.more()) {\n                const c = t.pop();\n                switch (c) {\n                  case Codepoint.CODES.get('A'):\n                    this.op(Regexp.Op.BEGIN_TEXT);\n                    break bigswitch;\n                  case Codepoint.CODES.get('b'):\n                    this.op(Regexp.Op.WORD_BOUNDARY);\n                    break bigswitch;\n                  case Codepoint.CODES.get('B'):\n                    this.op(Regexp.Op.NO_WORD_BOUNDARY);\n                    break bigswitch;\n                  case Codepoint.CODES.get('C'):\n                    // any byte; not supported\n                    throw new RE2JSSyntaxException(Parser.ERR_INVALID_ESCAPE, '\\\\C');\n                  case Codepoint.CODES.get('Q'):\n                    {\n                      // \\Q ... \\E: the ... is always literals\n                      let lit = t.rest();\n                      const i = lit.indexOf('\\\\E');\n                      if (i >= 0) {\n                        lit = lit.substring(0, i);\n                      }\n                      t.skipString(lit);\n                      t.skipString('\\\\E');\n                      let j = 0;\n                      while (j < lit.length) {\n                        const codepoint = lit.codePointAt(j);\n                        this.literal(codepoint);\n                        j += Utils.charCount(codepoint);\n                      }\n                      break bigswitch;\n                    }\n                  case Codepoint.CODES.get('z'):\n                    this.op(Regexp.Op.END_TEXT);\n                    break bigswitch;\n                  default:\n                    t.rewindTo(savedPos);\n                    break;\n                }\n              }\n              const re = this.newRegexp(Regexp.Op.CHAR_CLASS);\n              re.flags = this.flags;\n              // Look for Unicode character group like \\p{Han}\n              if (t.lookingAt('\\\\p') || t.lookingAt('\\\\P')) {\n                const cc = new CharClass();\n                if (this.parseUnicodeClass(t, cc)) {\n                  re.runes = cc.toArray();\n                  this.push(re);\n                  break bigswitch;\n                }\n              }\n              // Perl character class escape.\n              const cc = new CharClass();\n              if (this.parsePerlClassEscape(t, cc)) {\n                re.runes = cc.toArray();\n                this.push(re);\n                break bigswitch;\n              }\n              t.rewindTo(savedPos);\n              this.reuse(re);\n              // Ordinary single-character escape.\n              this.literal(Parser.parseEscape(t));\n              break;\n            }\n          default:\n            this.literal(t.pop());\n            break;\n        }\n        lastRepeatPos = repeatPos;\n      }\n    }\n    this.concat();\n    if (this.swapVerticalBar()) {\n      this.pop(); // pop vertical bar\n    }\n    this.alternate();\n    const n = this.stack.length;\n    if (n !== 1) {\n      throw new RE2JSSyntaxException(Parser.ERR_MISSING_PAREN, this.wholeRegexp);\n    }\n    this.stack[0].namedGroups = this.namedGroups;\n    return this.stack[0];\n  }\n\n  // parsePerlFlags parses a Perl flag setting or non-capturing group or both,\n  // like (?i) or (?: or (?i:.\n  // Pre: t at \"(?\".  Post: t after \")\".\n  // Sets numCap.\n  parsePerlFlags(t) {\n    const startPos = t.pos();\n    // Check for named captures, first introduced in Python's regexp library.\n    // As usual, there are three slightly different syntaxes:\n    //\n    //   (?P<name>expr)   the original, introduced by Python\n    //   (?<name>expr)    the .NET alteration, adopted by Perl 5.10\n    //   (?'name'expr)    another .NET alteration, adopted by Perl 5.10\n    //\n    // Perl 5.10 gave in and implemented the Python version too,\n    // but they claim that the last two are the preferred forms.\n    // PCRE and languages based on it (specifically, PHP and Ruby)\n    // support all three as well.  EcmaScript 4 uses only the Python form.\n    //\n    // In both the open source world (via Code Search) and the\n    // Google source tree, (?P<name>expr) and (?<name>expr) are the\n    // dominant forms of named captures and both are supported.\n    const s = t.rest();\n    if (s.startsWith('(?P<') || s.startsWith('(?<')) {\n      // Pull out name.\n      const begin = s.charAt(2) === 'P' ? 4 : 3;\n      const end = s.indexOf('>');\n      if (end < 0) {\n        throw new RE2JSSyntaxException(Parser.ERR_INVALID_NAMED_CAPTURE, s);\n      }\n      const name = s.substring(begin, end); // \"name\"\n      t.skipString(name);\n      t.skip(begin + 1); // \"(?P<>\" or \"(?<>\"\n      if (!Parser.isValidCaptureName(name)) {\n        // \"(?P<name>\"\n        throw new RE2JSSyntaxException(Parser.ERR_INVALID_NAMED_CAPTURE, s.substring(0, end + 1)); // \"(?P<name>\" or \"(?<name>\"\n      }\n      // Like ordinary capture, but named.\n      const re = this.op(Regexp.Op.LEFT_PAREN);\n      re.cap = ++this.numCap;\n      if (this.namedGroups[name]) {\n        throw new RE2JSSyntaxException(Parser.ERR_DUPLICATE_NAMED_CAPTURE, name);\n      }\n      this.namedGroups[name] = this.numCap;\n      re.name = name;\n      return;\n    }\n    // Non-capturing group.  Might also twiddle Perl flags.\n    t.skip(2); // \"(?\"\n\n    let flags = this.flags;\n    let sign = 1;\n    let sawFlag = false;\n    loop: while (t.more()) {\n      {\n        const c = t.pop();\n        switch (c) {\n          case Codepoint.CODES.get('i'):\n            flags |= RE2Flags.FOLD_CASE;\n            sawFlag = true;\n            break;\n          case Codepoint.CODES.get('m'):\n            flags &= -17;\n            sawFlag = true;\n            break;\n          case Codepoint.CODES.get('s'):\n            flags |= RE2Flags.DOT_NL;\n            sawFlag = true;\n            break;\n          case Codepoint.CODES.get('U'):\n            flags |= RE2Flags.NON_GREEDY;\n            sawFlag = true;\n            break;\n          // Switch to negation.\n          case Codepoint.CODES.get('-'):\n            if (sign < 0) {\n              break loop;\n            }\n            sign = -1;\n            // Invert flags so that | above turn into &~ and vice versa.\n            // We'll invert flags again before using it below.\n            flags = ~flags;\n            sawFlag = false;\n            break;\n          // End of flags, starting group or not.\n          case Codepoint.CODES.get(':'):\n          case Codepoint.CODES.get(')'):\n            if (sign < 0) {\n              if (!sawFlag) {\n                break loop;\n              }\n              flags = ~flags;\n            }\n            if (c === Codepoint.CODES.get(':')) {\n              // Open new group\n              this.op(Regexp.Op.LEFT_PAREN);\n            }\n            this.flags = flags;\n            return;\n          default:\n            // Flags.\n            break loop;\n        }\n      }\n    }\n    throw new RE2JSSyntaxException(Parser.ERR_INVALID_PERL_OP, t.from(startPos));\n  }\n\n  // parseVerticalBar handles a | in the input.\n  parseVerticalBar() {\n    this.concat();\n    // The concatenation we just parsed is on top of the stack.\n    // If it sits above an opVerticalBar, swap it below\n    // (things below an opVerticalBar become an alternation).\n    // Otherwise, push a new vertical bar.\n    if (!this.swapVerticalBar()) {\n      this.op(Regexp.Op.VERTICAL_BAR);\n    }\n  }\n\n  // If the top of the stack is an element followed by an opVerticalBar\n  // swapVerticalBar swaps the two and returns true.\n  // Otherwise it returns false.\n  swapVerticalBar() {\n    const n = this.stack.length;\n    // If above and below vertical bar are literal or char class,\n    // can merge into a single char class.\n    if (n >= 3 && this.stack[n - 2].op === Regexp.Op.VERTICAL_BAR && Parser.isCharClass(this.stack[n - 1]) && Parser.isCharClass(this.stack[n - 3])) {\n      let re1 = this.stack[n - 1];\n      let re3 = this.stack[n - 3];\n      // Make re3 the more complex of the two.\n      if (re1.op > re3.op) {\n        const tmp = re3;\n        re3 = re1;\n        re1 = tmp;\n        this.stack[n - 3] = re3;\n      }\n      Parser.mergeCharClass(re3, re1);\n      this.reuse(re1);\n      this.pop();\n      return true;\n    }\n    if (n >= 2) {\n      const re1 = this.stack[n - 1];\n      const re2 = this.stack[n - 2];\n      if (re2.op === Regexp.Op.VERTICAL_BAR) {\n        if (n >= 3) {\n          // Now out of reach.\n          // Clean opportunistically.\n          this.cleanAlt(this.stack[n - 3]);\n        }\n        this.stack[n - 2] = re1;\n        this.stack[n - 1] = re2;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // parseRightParen handles a ')' in the input.\n  parseRightParen() {\n    this.concat();\n    if (this.swapVerticalBar()) {\n      this.pop(); // pop vertical bar\n    }\n    this.alternate();\n    const n = this.stack.length;\n    if (n < 2) {\n      throw new RE2JSSyntaxException(Parser.ERR_UNEXPECTED_PAREN, this.wholeRegexp);\n    }\n    const re1 = this.pop();\n    const re2 = this.pop();\n    if (re2.op !== Regexp.Op.LEFT_PAREN) {\n      throw new RE2JSSyntaxException(Parser.ERR_UNEXPECTED_PAREN, this.wholeRegexp);\n    }\n    // Restore flags at time of paren.\n    this.flags = re2.flags;\n    if (re2.cap === 0) {\n      // Just for grouping.\n      this.push(re1);\n    } else {\n      re2.op = Regexp.Op.CAPTURE;\n      re2.subs = [re1];\n      this.push(re2);\n    }\n  }\n\n  // parsePerlClassEscape parses a leading Perl character class escape like \\d\n  // from the beginning of |t|.  If one is present, it appends the characters\n  // to cc and returns true.  The iterator is advanced past the escape\n  // on success, undefined on failure, in which case false is returned.\n  parsePerlClassEscape(t, cc) {\n    const beforePos = t.pos();\n    if ((this.flags & RE2Flags.PERL_X) === 0 || !t.more() || t.pop() !== Codepoint.CODES.get('\\\\') || !t.more()) {\n      return false;\n    }\n    t.pop(); // e.g. advance past 'd' in \"\\\\d\"\n    const p = t.from(beforePos);\n    const g = PERL_GROUPS.has(p) ? PERL_GROUPS.get(p) : null;\n    if (g === null) {\n      return false;\n    }\n    cc.appendGroup(g, (this.flags & RE2Flags.FOLD_CASE) !== 0);\n    return true;\n  }\n\n  // parseNamedClass parses a leading POSIX named character class like\n  // [:alnum:] from the beginning of t.  If one is present, it appends the\n  // characters to cc, advances the iterator, and returns true.\n  // Pre: t at \"[:\".  Post: t after \":]\".\n  // On failure (no class of than name), throws RE2JSSyntaxException.\n  // On misparse, returns false; t.pos() is undefined.\n  parseNamedClass(t, cc) {\n    // (Go precondition check deleted.)\n    const cls = t.rest();\n    const i = cls.indexOf(':]');\n    if (i < 0) {\n      return false;\n    }\n    const name = cls.substring(0, i + 2); // \"[:alnum:]\"\n    t.skipString(name);\n    const g = POSIX_GROUPS.has(name) ? POSIX_GROUPS.get(name) : null;\n    if (g === null) {\n      throw new RE2JSSyntaxException(Parser.ERR_INVALID_CHAR_RANGE, name);\n    }\n    cc.appendGroup(g, (this.flags & RE2Flags.FOLD_CASE) !== 0);\n    return true;\n  }\n\n  // parseUnicodeClass() parses a leading Unicode character class like \\p{Han}\n  // from the beginning of t.  If one is present, it appends the characters to\n  // to |cc|, advances |t| and returns true.\n  //\n  // Returns false if such a pattern is not present or UNICODE_GROUPS\n  // flag is not enabled; |t.pos()| is not advanced in this case.\n  // Indicates error by throwing RE2JSSyntaxException.\n  parseUnicodeClass(t, cc) {\n    const startPos = t.pos();\n    if ((this.flags & RE2Flags.UNICODE_GROUPS) === 0 || !t.lookingAt('\\\\p') && !t.lookingAt('\\\\P')) {\n      return false;\n    }\n    t.skip(1); // '\\\\'\n    // Committed to parse or throw exception.\n    let sign = 1;\n    let c = t.pop(); // 'p' or 'P'\n    if (c === Codepoint.CODES.get('P')) {\n      sign = -1;\n    }\n    if (!t.more()) {\n      t.rewindTo(startPos);\n      throw new RE2JSSyntaxException(Parser.ERR_INVALID_CHAR_RANGE, t.rest());\n    }\n    c = t.pop();\n    let name;\n    if (c !== Codepoint.CODES.get('{')) {\n      // Single-letter name.\n      name = Utils.runeToString(c);\n    } else {\n      // Name is in braces.\n      const rest = t.rest();\n      const end = rest.indexOf('}');\n      if (end < 0) {\n        t.rewindTo(startPos);\n        throw new RE2JSSyntaxException(Parser.ERR_INVALID_CHAR_RANGE, t.rest());\n      }\n      name = rest.substring(0, end); // e.g. \"Han\"\n      t.skipString(name);\n      t.skip(1);\n      // Don't use skip(end) because it assumes UTF-16 coding, and\n      // StringIterator doesn't guarantee that.\n    }\n    // Group can have leading negation too.\n    //  \\p{^Han} == \\P{Han}, \\P{^Han} == \\p{Han}.\n    if (!(name.length === 0) && name.codePointAt(0) === Codepoint.CODES.get('^')) {\n      sign = 0 - sign; // -sign\n      name = name.substring(1);\n    }\n    const pair = Parser.unicodeTable(name);\n    if (pair === null) {\n      throw new RE2JSSyntaxException(Parser.ERR_INVALID_CHAR_RANGE, t.from(startPos));\n    }\n    const tab = pair.first;\n    const fold = pair.second; // fold-equivalent table\n    // Variation of CharClass.appendGroup() for tables.\n    if ((this.flags & RE2Flags.FOLD_CASE) === 0 || fold === null) {\n      cc.appendTableWithSign(tab, sign);\n    } else {\n      // Merge and clean tab and fold in a temporary buffer.\n      // This is necessary for the negative case and just tidy\n      // for the positive case.\n      const tmp = new CharClass().appendTable(tab).appendTable(fold).cleanClass().toArray();\n      cc.appendClassWithSign(tmp, sign);\n    }\n    return true;\n  }\n\n  // parseClass parses a character class and pushes it onto the parse stack.\n  //\n  // NOTES:\n  // Pre: at '['; Post: after ']'.\n  // Mutates stack.  Advances iterator.  May throw.\n  parseClass(t) {\n    const startPos = t.pos();\n    t.skip(1); // '['\n    const re = this.newRegexp(Regexp.Op.CHAR_CLASS);\n    re.flags = this.flags;\n    const cc = new CharClass();\n    let sign = 1;\n    if (t.more() && t.lookingAt('^')) {\n      sign = -1;\n      t.skip(1); // '^'\n      // If character class does not match \\n, add it here,\n      // so that negation later will do the right thing.\n      if ((this.flags & RE2Flags.CLASS_NL) === 0) {\n        cc.appendRange(Codepoint.CODES.get('\\n'), Codepoint.CODES.get('\\n'));\n      }\n    }\n    let first = true; // ']' and '-' are okay as first char in class\n    while (!t.more() || t.peek() !== Codepoint.CODES.get(']') || first) {\n      // POSIX: - is only okay unescaped as first or last in class.\n      // Perl: - is okay anywhere.\n      if (t.more() && t.lookingAt('-') && (this.flags & RE2Flags.PERL_X) === 0 && !first) {\n        const s = t.rest();\n        if (s === '-' || !s.startsWith('-]')) {\n          t.rewindTo(startPos);\n          throw new RE2JSSyntaxException(Parser.ERR_INVALID_CHAR_RANGE, t.rest());\n        }\n      }\n      first = false;\n      const beforePos = t.pos();\n      // Look for POSIX [:alnum:] etc.\n      if (t.lookingAt('[:')) {\n        if (this.parseNamedClass(t, cc)) {\n          continue;\n        }\n        t.rewindTo(beforePos);\n      }\n\n      // Look for Unicode character group like \\p{Han}.\n      if (this.parseUnicodeClass(t, cc)) {\n        continue;\n      }\n\n      // Look for Perl character class symbols (extension).\n      if (this.parsePerlClassEscape(t, cc)) {\n        continue;\n      }\n      t.rewindTo(beforePos);\n\n      // Single character or simple range.\n      const lo = Parser.parseClassChar(t, startPos);\n      let hi = lo;\n      if (t.more() && t.lookingAt('-')) {\n        t.skip(1);\n        if (t.more() && t.lookingAt(']')) {\n          // [a-] means (a|-) so check for final ].\n          t.skip(-1);\n        } else {\n          hi = Parser.parseClassChar(t, startPos);\n          if (hi < lo) {\n            throw new RE2JSSyntaxException(Parser.ERR_INVALID_CHAR_RANGE, t.from(beforePos));\n          }\n        }\n      }\n      if ((this.flags & RE2Flags.FOLD_CASE) === 0) {\n        cc.appendRange(lo, hi);\n      } else {\n        cc.appendFoldedRange(lo, hi);\n      }\n    }\n    t.skip(1); // ']'\n\n    cc.cleanClass();\n    if (sign < 0) {\n      cc.negateClass();\n    }\n    re.runes = cc.toArray();\n    this.push(re);\n  }\n}\n\nclass AtomicReference {\n  constructor(initialValue) {\n    this.value = initialValue;\n  }\n\n  // Returns the current value\n  get() {\n    return this.value;\n  }\n\n  // Sets to the given value\n  set(newValue) {\n    this.value = newValue;\n  }\n\n  // Atomically sets to the given value and returns true if the current value == the expected value\n  compareAndSet(expect, update) {\n    if (this.value === expect) {\n      this.value = update;\n      return true;\n    }\n    return false;\n  }\n}\n\n/**\n * An RE2 class instance is a compiled representation of an RE2 regular expression, independent of\n * the public Java-like Pattern/Matcher API.\n *\n * This class also contains various implementation helpers for RE2 regular expressions.\n *\n * Use the {@link #quoteMeta(String)} utility function to quote all regular expression\n * metacharacters in an arbitrary string.\n *\n */\nclass RE2 {\n  // This is visible for testing.\n  static initTest(expr) {\n    const re2 = RE2.compile(expr);\n    const res = new RE2(re2.expr, re2.prog, re2.numSubexp, re2.longest);\n    res.cond = re2.cond;\n    res.prefix = re2.prefix;\n    res.prefixUTF8 = re2.prefixUTF8;\n    res.prefixComplete = re2.prefixComplete;\n    res.prefixRune = re2.prefixRune;\n    return res;\n  }\n\n  /**\n   * Parses a regular expression and returns, if successful, an {@code RE2} instance that can be\n   * used to match against text.\n   *\n   * When matching against text, the regexp returns a match that begins as early as possible in the\n   * input (leftmost), and among those it chooses the one that a backtracking search would have\n   * found first. This so-called leftmost-first matching is the same semantics that Perl, Python,\n   * and other implementations use, although this package implements it without the expense of\n   * backtracking. For POSIX leftmost-longest matching, see {@link #compilePOSIX}.\n   */\n  static compile(expr) {\n    return RE2.compileImpl(expr, RE2Flags.PERL, false);\n  }\n\n  /**\n   * {@code compilePOSIX} is like {@link #compile} but restricts the regular expression to POSIX ERE\n   * (egrep) syntax and changes the match semantics to leftmost-longest.\n   *\n   * That is, when matching against text, the regexp returns a match that begins as early as\n   * possible in the input (leftmost), and among those it chooses a match that is as long as\n   * possible. This so-called leftmost-longest matching is the same semantics that early regular\n   * expression implementations used and that POSIX specifies.\n   *\n   * However, there can be multiple leftmost-longest matches, with different submatch choices, and\n   * here this package diverges from POSIX. Among the possible leftmost-longest matches, this\n   * package chooses the one that a backtracking search would have found first, while POSIX\n   * specifies that the match be chosen to maximize the length of the first subexpression, then the\n   * second, and so on from left to right. The POSIX rule is computationally prohibitive and not\n   * even well-defined. See http://swtch.com/~rsc/regexp/regexp2.html#posix\n   */\n  static compilePOSIX(expr) {\n    return RE2.compileImpl(expr, RE2Flags.POSIX, true);\n  }\n\n  // Exposed to ExecTests.\n  static compileImpl(expr, mode, longest) {\n    let re = Parser.parse(expr, mode);\n    const maxCap = re.maxCap();\n    re = Simplify.simplify(re);\n    const prog = Compiler.compileRegexp(re);\n    const re2 = new RE2(expr, prog, maxCap, longest);\n    const [prefixCompl, prefixStr] = prog.prefix();\n    re2.prefixComplete = prefixCompl;\n    re2.prefix = prefixStr;\n    re2.prefixUTF8 = Utils.stringToUtf8ByteArray(re2.prefix);\n    if (re2.prefix.length > 0) {\n      re2.prefixRune = re2.prefix.codePointAt(0);\n    }\n    re2.namedGroups = re.namedGroups;\n    return re2;\n  }\n\n  /**\n   * Returns true iff textual regular expression {@code pattern} matches string {@code s}.\n   *\n   * More complicated queries need to use {@link #compile} and the full {@code RE2} interface.\n   */\n  // This is visible for testing.\n  static match(pattern, s) {\n    return RE2.compile(pattern).match(s);\n  }\n  constructor(expr, prog, numSubexp = 0, longest = 0) {\n    this.expr = expr; // as passed to Compile\n    this.prog = prog; // compiled program\n    this.numSubexp = numSubexp;\n    this.longest = longest;\n    this.cond = prog.startCond(); // EMPTY_* bitmask: empty-width conditions\n    this.prefix = null; // required UTF-16 prefix in unanchored matches\n    this.prefixUTF8 = null; // required UTF-8 prefix in unanchored matches\n    this.prefixComplete = false; // true if prefix is the entire regexp\n    this.prefixRune = 0; // first rune in prefix\n    this.pooled = new AtomicReference(); // Cache of machines for running regexp. Forms a Treiber stack.\n  }\n\n  /**\n   * Returns the number of parenthesized subexpressions in this regular expression.\n   */\n  numberOfCapturingGroups() {\n    return this.numSubexp;\n  }\n\n  /**\n   * Returns the number of instructions in this compiled regular expression program.\n   */\n  numberOfInstructions() {\n    return this.prog.numInst();\n  }\n\n  // get() returns a machine to use for matching |this|.  It uses |this|'s\n  // machine cache if possible, to avoid unnecessary allocation.\n  get() {\n    // Pop a machine off the stack if available.\n    let head;\n    do {\n      head = this.pooled.get();\n    } while (head && !this.pooled.compareAndSet(head, head.next));\n    return head;\n  }\n\n  // Clears the memory associated with this machine.\n  reset() {\n    this.pooled.set(null);\n  }\n\n  // put() returns a machine to |this|'s machine cache.  There is no attempt to\n  // limit the size of the cache, so it will grow to the maximum number of\n  // simultaneous matches run using |this|.  (The cache empties when |this|\n  // gets garbage collected or reset is called.)\n  put(m, isNew) {\n    // To avoid allocation in the single-thread or uncontended case, reuse a node only if\n    // it was the only element in the stack when it was popped, and it's the only element\n    // in the stack when it's pushed back after use.\n    let head = this.pooled.get();\n    do {\n      head = this.pooled.get();\n      if (!isNew && head) {\n        // If an element had a null next pointer and it was previously in the stack, another thread\n        // might be trying to pop it out right now, and if it sees the same node now in the\n        // stack the pop will succeed, but the new top of the stack will be the stale (null) value\n        // of next. Allocate a new Machine so that the CAS will not succeed if this node has been\n        // popped and re-pushed.\n        m = Machine.fromMachine(m);\n        isNew = true;\n      }\n\n      // Without this comparison, TSAN will complain about a race condition:\n      // Thread A, B, and C all attempt to do a match on the same pattern.\n      //\n      // A: Allocates Machine 1; executes match; put machine 1. State is now:\n      //\n      // pooled -> machine 1 -> null\n      //\n      // B reads pooled, sees machine 1\n      //\n      // C reads pooled, sees machine 1\n      //\n      // B successfully CASes pooled to null\n      //\n      // B executes match; put machine 1, which involves setting machine1.next to\n      // null (even though it's already null); preempted before CAS\n      //\n      // C resumes, and reads machine1.next in order to execute cas(head, head.next)\n      //\n      // There is no happens-before relationship between B's redundant null write\n      // and C's read, thus triggering TSAN.\n      //\n      // Not needed for JS code\n      if (m.next !== head) {\n        m.next = head;\n      }\n    } while (!this.pooled.compareAndSet(head, m));\n  }\n  toString() {\n    return this.expr;\n  }\n\n  // doExecute() finds the leftmost match in the input and returns\n  // the position of its subexpressions.\n  // Derived from exec.go.\n  doExecute(input, pos, anchor, ncap) {\n    let m = this.get();\n    // The Treiber stack cannot reuse nodes, unless the node to be reused has only ever been at\n    // the bottom of the stack (i.e., next == null).\n    let isNew = false;\n    if (!m) {\n      m = Machine.fromRE2(this);\n      isNew = true;\n    } else if (m.next !== null) {\n      m = Machine.fromMachine(m);\n      isNew = true;\n    }\n    m.init(ncap);\n    const cap = m.match(input, pos, anchor) ? m.submatches() : null;\n    this.put(m, isNew);\n    return cap;\n  }\n  match(s) {\n    return this.doExecute(MachineInput.fromUTF16(s), 0, RE2Flags.UNANCHORED, 0) !== null;\n  }\n\n  /**\n   * Matches the regular expression against input starting at position start and ending at position\n   * end, with the given anchoring. Records the submatch boundaries in group, which is [start, end)\n   * pairs of byte offsets. The number of boundaries needed is inferred from the size of the group\n   * array. It is most efficient not to ask for submatch boundaries.\n   *\n   * @param input the input byte array\n   * @param start the beginning position in the input\n   * @param end the end position in the input\n   * @param anchor the anchoring flag (UNANCHORED, ANCHOR_START, ANCHOR_BOTH)\n   * @param group the array to fill with submatch positions\n   * @param ngroup the number of array pairs to fill in\n   * @returns true if a match was found\n   */\n  matchWithGroup(input, start, end, anchor, ngroup) {\n    if (!(input instanceof MatcherInputBase)) {\n      input = MatcherInput.utf16(input);\n    }\n    return this.matchMachineInput(input, start, end, anchor, ngroup);\n  }\n  matchMachineInput(input, start, end, anchor, ngroup) {\n    if (start > end) {\n      return [false, null];\n    }\n    const machineInput = input.isUTF16Encoding() ? MachineInput.fromUTF16(input.asCharSequence(), 0, end) : MachineInput.fromUTF8(input.asBytes(), 0, end);\n    const groupMatch = this.doExecute(machineInput, start, anchor, 2 * ngroup);\n    if (groupMatch === null) {\n      return [false, null];\n    }\n    return [true, groupMatch];\n  }\n\n  /**\n   * Returns true iff this regexp matches the UTF-8 byte array {@code b}.\n   */\n  // This is visible for testing.\n  matchUTF8(b) {\n    return this.doExecute(MachineInput.fromUTF8(b), 0, RE2Flags.UNANCHORED, 0) !== null;\n  }\n\n  /**\n   * Returns a copy of {@code src} in which all matches for this regexp have been replaced by\n   * {@code repl}. No support is provided for expressions (e.g. {@code \\1} or {@code $1}) in the\n   * replacement string.\n   */\n  // This is visible for testing.\n  replaceAll(src, repl) {\n    return this.replaceAllFunc(src, () => repl, 2 * src.length + 1);\n  }\n\n  /**\n   * Returns a copy of {@code src} in which only the first match for this regexp has been replaced\n   * by {@code repl}. No support is provided for expressions (e.g. {@code \\1} or {@code $1}) in the\n   * replacement string.\n   */\n  // This is visible for testing.\n  replaceFirst(src, repl) {\n    return this.replaceAllFunc(src, () => repl, 1);\n  }\n\n  /**\n   * Returns a copy of {@code src} in which at most {@code maxReplaces} matches for this regexp have\n   * been replaced by the return value of of function {@code repl} (whose first argument is the\n   * matched string). No support is provided for expressions (e.g. {@code \\1} or {@code $1}) in the\n   * replacement string.\n   */\n  // This is visible for testing.\n  replaceAllFunc(src, replFunc, maxReplaces) {\n    let lastMatchEnd = 0;\n    let searchPos = 0;\n    let out = '';\n    const input = MachineInput.fromUTF16(src);\n    let numReplaces = 0;\n    while (searchPos <= src.length) {\n      const a = this.doExecute(input, searchPos, RE2Flags.UNANCHORED, 2);\n      if (a === null || a.length === 0) {\n        break;\n      }\n      out += src.substring(lastMatchEnd, a[0]);\n      if (a[1] > lastMatchEnd || a[0] === 0) {\n        out += replFunc(src.substring(a[0], a[1]));\n        numReplaces++;\n      }\n      lastMatchEnd = a[1];\n      const width = input.step(searchPos) & 7;\n      if (searchPos + width > a[1]) {\n        searchPos += width;\n      } else if (searchPos + 1 > a[1]) {\n        searchPos++;\n      } else {\n        searchPos = a[1];\n      }\n      if (numReplaces >= maxReplaces) {\n        break;\n      }\n    }\n    out += src.substring(lastMatchEnd);\n    return out;\n  }\n\n  // The number of capture values in the program may correspond\n  // to fewer capturing expressions than are in the regexp.\n  // For example, \"(a){0}\" turns into an empty program, so the\n  // maximum capture in the program is 0 but we need to return\n  // an expression for \\1.  Pad returns a with -1s appended as needed;\n  // the result may alias a.\n  pad(a) {\n    if (a === null) {\n      return null;\n    }\n    let n = (1 + this.numSubexp) * 2;\n    if (a.length < n) {\n      let a2 = new Array(n).fill(-1);\n      for (let i = 0; i < a.length; i++) {\n        a2[i] = a[i];\n      }\n      a = a2;\n    }\n    return a;\n  }\n\n  // Find matches in input.\n  allMatches(input, n, deliverFun = v => v) {\n    let result = [];\n    const end = input.endPos();\n    if (n < 0) {\n      n = end + 1;\n    }\n    let pos = 0;\n    let i = 0;\n    let prevMatchEnd = -1;\n    while (i < n && pos <= end) {\n      const matches = this.doExecute(input, pos, RE2Flags.UNANCHORED, this.prog.numCap);\n      if (matches === null || matches.length === 0) {\n        break;\n      }\n      let accept = true;\n      if (matches[1] === pos) {\n        if (matches[0] === prevMatchEnd) {\n          accept = false;\n        }\n        const r = input.step(pos);\n        if (r < 0) {\n          pos = end + 1;\n        } else {\n          pos += r & 7;\n        }\n      } else {\n        pos = matches[1];\n      }\n      prevMatchEnd = matches[1];\n      if (accept) {\n        result.push(deliverFun(this.pad(matches)));\n        i++;\n      }\n    }\n    return result;\n  }\n\n  // Legacy Go-style interface; preserved (package-private) for better\n  // test coverage.\n  //\n  // There are 16 methods of RE2 that match a regular expression and\n  // identify the matched text.  Their names are matched by this regular\n  // expression:\n  //\n  //    find(All)?(UTF8)?(Submatch)?(Index)?\n  //\n  // If 'All' is present, the routine matches successive non-overlapping\n  // matches of the entire expression.  Empty matches abutting a\n  // preceding match are ignored.  The return value is an array\n  // containing the successive return values of the corresponding\n  // non-All routine.  These routines take an extra integer argument, n;\n  // if n >= 0, the function returns at most n matches/submatches.\n  //\n  // If 'UTF8' is present, the argument is a UTF-8 encoded byte[] array;\n  // otherwise it is a UTF-16 encoded js string; return values\n  // are adjusted as appropriate.\n  //\n  // If 'Submatch' is present, the return value is an list identifying\n  // the successive submatches of the expression.  Submatches are\n  // matches of parenthesized subexpressions within the regular\n  // expression, numbered from left to right in order of opening\n  // parenthesis.  Submatch 0 is the match of the entire expression,\n  // submatch 1 the match of the first parenthesized subexpression, and\n  // so on.\n  //\n  // If 'Index' is present, matches and submatches are identified by\n  // byte index pairs within the input string: result[2*n:2*n+1]\n  // identifies the indexes of the nth submatch.  The pair for n==0\n  // identifies the match of the entire expression.  If 'Index' is not\n  // present, the match is identified by the text of the match/submatch.\n  // If an index is negative, it means that subexpression did not match\n  // any string in the input.\n\n  /**\n   * Returns an array holding the text of the leftmost match in {@code b} of this regular\n   * expression.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findUTF8(b) {\n    const a = this.doExecute(MachineInput.fromUTF8(b), 0, RE2Flags.UNANCHORED, 2);\n    if (a === null) {\n      return null;\n    }\n    return b.slice(a[0], a[1]);\n  }\n\n  /**\n   * Returns a two-element array of integers defining the location of the leftmost match in\n   * {@code b} of this regular expression. The match itself is at {@code b[loc[0]...loc[1]]}.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findUTF8Index(b) {\n    const a = this.doExecute(MachineInput.fromUTF8(b), 0, RE2Flags.UNANCHORED, 2);\n    if (a === null) {\n      return null;\n    }\n    return a.slice(0, 2);\n  }\n\n  /**\n   * Returns a string holding the text of the leftmost match in {@code s} of this regular\n   * expression.\n   *\n   * If there is no match, the return value is an empty string, but it will also be empty if the\n   * regular expression successfully matches an empty string. Use {@link #findIndex} or\n   * {@link #findSubmatch} if it is necessary to distinguish these cases.\n   */\n  // This is visible for testing.\n  find(s) {\n    const a = this.doExecute(MachineInput.fromUTF16(s), 0, RE2Flags.UNANCHORED, 2);\n    if (a === null) {\n      return '';\n    }\n    return s.substring(a[0], a[1]);\n  }\n\n  /**\n   * Returns a two-element array of integers defining the location of the leftmost match in\n   * {@code s} of this regular expression. The match itself is at\n   * {@code s.substring(loc[0], loc[1])}.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findIndex(s) {\n    return this.doExecute(MachineInput.fromUTF16(s), 0, RE2Flags.UNANCHORED, 2);\n  }\n\n  /**\n   * Returns an array of arrays the text of the leftmost match of the regular expression in\n   * {@code b} and the matches, if any, of its subexpressions, as defined by the <a\n   * href='#submatch'>Submatch</a> description above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findUTF8Submatch(b) {\n    const a = this.doExecute(MachineInput.fromUTF8(b), 0, RE2Flags.UNANCHORED, this.prog.numCap);\n    if (a === null) {\n      return null;\n    }\n    const ret = new Array(1 + this.numSubexp).fill(null);\n    for (let i = 0; i < ret.length; i++) {\n      if (2 * i < a.length && a[2 * i] >= 0) {\n        ret[i] = b.slice(a[2 * i], a[2 * i + 1]);\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Returns an array holding the index pairs identifying the leftmost match of this regular\n   * expression in {@code b} and the matches, if any, of its subexpressions, as defined by the the\n   * <a href='#submatch'>Submatch</a> and <a href='#index'>Index</a> descriptions above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findUTF8SubmatchIndex(b) {\n    return this.pad(this.doExecute(MachineInput.fromUTF8(b), 0, RE2Flags.UNANCHORED, this.prog.numCap));\n  }\n\n  /**\n   * Returns an array of strings holding the text of the leftmost match of the regular expression in\n   * {@code s} and the matches, if any, of its subexpressions, as defined by the <a\n   * href='#submatch'>Submatch</a> description above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findSubmatch(s) {\n    const a = this.doExecute(MachineInput.fromUTF16(s), 0, RE2Flags.UNANCHORED, this.prog.numCap);\n    if (a === null) {\n      return null;\n    }\n    const ret = new Array(1 + this.numSubexp).fill(null);\n    for (let i = 0; i < ret.length; i++) {\n      if (2 * i < a.length && a[2 * i] >= 0) {\n        ret[i] = s.substring(a[2 * i], a[2 * i + 1]);\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Returns an array holding the index pairs identifying the leftmost match of this regular\n   * expression in {@code s} and the matches, if any, of its subexpressions, as defined by the <a\n   * href='#submatch'>Submatch</a> description above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findSubmatchIndex(s) {\n    return this.pad(this.doExecute(MachineInput.fromUTF16(s), 0, RE2Flags.UNANCHORED, this.prog.numCap));\n  }\n\n  /**\n   * {@code findAllUTF8()} is the <a href='#all'>All</a> version of {@link #findUTF8}; it returns a\n   * list of up to {@code n} successive matches of the expression, as defined by the <a\n   * href='#all'>All</a> description above.\n   *\n   * A return value of null indicates no match.\n   *\n   * TODO(adonovan): think about defining a byte slice view class, like a read-only Go slice backed\n   * by |b|.\n   */\n  // This is visible for testing.\n  findAllUTF8(b, n) {\n    const result = this.allMatches(MachineInput.fromUTF8(b), n, match => b.slice(match[0], match[1]));\n    if (result.length === 0) {\n      return null;\n    }\n    return result;\n  }\n\n  /**\n   * {@code findAllUTF8Index} is the <a href='#all'>All</a> version of {@link #findUTF8Index}; it\n   * returns a list of up to {@code n} successive matches of the expression, as defined by the <a\n   * href='#all'>All</a> description above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findAllUTF8Index(b, n) {\n    const result = this.allMatches(MachineInput.fromUTF8(b), n, match => match.slice(0, 2));\n    if (result.length === 0) {\n      return null;\n    }\n    return result;\n  }\n\n  /**\n   * {@code findAll} is the <a href='#all'>All</a> version of {@link #find}; it returns a list of up\n   * to {@code n} successive matches of the expression, as defined by the <a href='#all'>All</a>\n   * description above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findAll(s, n) {\n    const result = this.allMatches(MachineInput.fromUTF16(s), n, match => s.substring(match[0], match[1]));\n    if (result.length === 0) {\n      return null;\n    }\n    return result;\n  }\n\n  /**\n   * {@code findAllIndex} is the <a href='#all'>All</a> version of {@link #findIndex}; it returns a\n   * list of up to {@code n} successive matches of the expression, as defined by the <a\n   * href='#all'>All</a> description above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findAllIndex(s, n) {\n    const result = this.allMatches(MachineInput.fromUTF16(s), n, match => match.slice(0, 2));\n    if (result.length === 0) {\n      return null;\n    }\n    return result;\n  }\n\n  /**\n   * {@code findAllUTF8Submatch} is the <a href='#all'>All</a> version of {@link #findUTF8Submatch};\n   * it returns a list of up to {@code n} successive matches of the expression, as defined by the <a\n   * href='#all'>All</a> description above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findAllUTF8Submatch(b, n) {\n    const result = this.allMatches(MachineInput.fromUTF8(b), n, match => {\n      let slice = new Array(match.length / 2 | 0).fill(null);\n      for (let j = 0; j < slice.length; j++) {\n        if (match[2 * j] >= 0) {\n          slice[j] = b.slice(match[2 * j], match[2 * j + 1]);\n        }\n      }\n      return slice;\n    });\n    if (result.length === 0) {\n      return null;\n    }\n    return result;\n  }\n\n  /**\n   * {@code findAllUTF8SubmatchIndex} is the <a href='#all'>All</a> version of\n   * {@link #findUTF8SubmatchIndex}; it returns a list of up to {@code n} successive matches of the\n   * expression, as defined by the <a href='#all'>All</a> description above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findAllUTF8SubmatchIndex(b, n) {\n    const result = this.allMatches(MachineInput.fromUTF8(b), n);\n    if (result.length === 0) {\n      return null;\n    }\n    return result;\n  }\n\n  /**\n   * {@code findAllSubmatch} is the <a href='#all'>All</a> version of {@link #findSubmatch}; it\n   * returns a list of up to {@code n} successive matches of the expression, as defined by the <a\n   * href='#all'>All</a> description above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findAllSubmatch(s, n) {\n    const result = this.allMatches(MachineInput.fromUTF16(s), n, match => {\n      let slice = new Array(match.length / 2 | 0).fill(null);\n      for (let j = 0; j < slice.length; j++) {\n        if (match[2 * j] >= 0) {\n          slice[j] = s.substring(match[2 * j], match[2 * j + 1]);\n        }\n      }\n      return slice;\n    });\n    if (result.length === 0) {\n      return null;\n    }\n    return result;\n  }\n\n  /**\n   * {@code findAllSubmatchIndex} is the <a href='#all'>All</a> version of\n   * {@link #findSubmatchIndex}; it returns a list of up to {@code n} successive matches of the\n   * expression, as defined by the <a href='#all'>All</a> description above.\n   *\n   * A return value of null indicates no match.\n   */\n  // This is visible for testing.\n  findAllSubmatchIndex(s, n) {\n    const result = this.allMatches(MachineInput.fromUTF16(s), n);\n    if (result.length === 0) {\n      return null;\n    }\n    return result;\n  }\n}\n\n/**\n * Transform JS regex string to RE2 regex string\n */\nclass TranslateRegExpString {\n  static isUpperCaseAlpha(ch) {\n    return 'A' <= ch && ch <= 'Z';\n  }\n  static isHexadecimal(ch) {\n    return '0' <= ch && ch <= '9' || 'A' <= ch && ch <= 'F' || 'a' <= ch && ch <= 'f';\n  }\n  static getUtf8CharSize(ch) {\n    const code = ch.charCodeAt(0);\n    if (code < 0x80) return 1; // 1-byte (ASCII)\n    if (code < 0x800) return 2; // 2-byte\n    if (code < 0x10000) return 3; // 3-byte\n    return 4; // 4-byte (surrogate pairs, rare characters)\n  }\n  static translate(data) {\n    if (typeof data !== 'string') {\n      return data;\n    }\n    let result = '';\n    let changed = false;\n    let size = data.length;\n    if (size === 0) {\n      result = '(?:)';\n      changed = true;\n    }\n    let i = 0;\n    while (i < size) {\n      let ch = data[i];\n      if (ch === '\\\\') {\n        if (i + 1 < size) {\n          ch = data[i + 1];\n          switch (ch) {\n            case '\\\\':\n              {\n                result += '\\\\\\\\';\n                i += 2;\n                continue;\n              }\n            case 'c':\n              {\n                if (i + 2 < size) {\n                  let nextCh = data[i + 2];\n                  if (TranslateRegExpString.isUpperCaseAlpha(nextCh)) {\n                    result += '\\\\x';\n                    result += (nextCh.charCodeAt(0) - 64 >> 4).toString(16).toUpperCase();\n                    result += (nextCh.charCodeAt(0) - 64 & 15).toString(16).toUpperCase();\n                    i += 3;\n                    changed = true;\n                    continue;\n                  }\n                }\n                result += '\\\\c';\n                i += 2;\n                continue;\n              }\n            case 'u':\n              {\n                if (i + 2 < size) {\n                  let nextCh = data[i + 2];\n                  if (TranslateRegExpString.isHexadecimal(nextCh)) {\n                    result += '\\\\x{' + nextCh;\n                    i += 3;\n                    for (let j = 0; j < 3 && i < size; ++i, ++j) {\n                      nextCh = data[i];\n                      if (!TranslateRegExpString.isHexadecimal(nextCh)) {\n                        break;\n                      }\n                      result += nextCh;\n                    }\n                    result += '}';\n                    changed = true;\n                    continue;\n                  } else if (nextCh === '{') {\n                    result += '\\\\x';\n                    i += 2;\n                    changed = true;\n                    continue;\n                  }\n                }\n                result += '\\\\u';\n                i += 2;\n                continue;\n              }\n            default:\n              {\n                result += '\\\\';\n                let symSize = TranslateRegExpString.getUtf8CharSize(ch);\n                result += data.substring(i + 1, i + 1 + symSize);\n                i += symSize + 1;\n                continue;\n              }\n          }\n        }\n      } else if (ch === '/') {\n        result += '\\\\/';\n        i += 1;\n        changed = true;\n        continue;\n      } else if (ch === '(' && i + 2 < size && data[i + 1] === '?' && data[i + 2] === '<') {\n        if (i + 3 >= size || data[i + 3] !== '=' && data[i + 3] !== '!') {\n          result += '(?P<';\n          i += 3;\n          changed = true;\n          continue;\n        }\n      }\n      let symSize = TranslateRegExpString.getUtf8CharSize(ch);\n      result += data.substring(i, i + symSize);\n      i += symSize;\n    }\n    return changed ? result : data;\n  }\n}\n\n/**\n * A compiled representation of an RE2 regular expression\n *\n * The matching functions take {@code String} arguments instead of the more general Java\n * {@code CharSequence} since the latter doesn't provide UTF-16 decoding.\n *\n *\n * @author rsc@google.com (Russ Cox)\n * @class\n */\nclass RE2JS {\n  /**\n   * Flag: case insensitive matching.\n   */\n  static CASE_INSENSITIVE = 1;\n  /**\n   * Flag: dot ({@code .}) matches all characters, including newline.\n   */\n  static DOTALL = 2;\n  /**\n   * Flag: multiline matching: {@code ^} and {@code $} match at beginning and end of line, not just\n   * beginning and end of input.\n   */\n  static MULTILINE = 4;\n  /**\n   * Flag: Unicode groups (e.g. {@code \\p\\ Greek\\} ) will be syntax errors.\n   */\n  static DISABLE_UNICODE_GROUPS = 8;\n  /**\n   * Flag: matches longest possible string.\n   */\n  static LONGEST_MATCH = 16;\n\n  /**\n   * Returns a literal pattern string for the specified string.\n   *\n   * This method produces a string that can be used to create a <code>RE2JS</code> that would\n   * match the string <code>s</code> as if it were a literal pattern.\n   *\n   * Metacharacters or escape sequences in the input sequence will be given no special meaning.\n   *\n   * @param {string} str The string to be literalized\n   * @returns {string} A literal string replacement\n   */\n  static quote(str) {\n    return Utils.quoteMeta(str);\n  }\n\n  /**\n   * Translates a given regular expression string to ensure compatibility with RE2JS.\n   *\n   * This function preprocesses the input regex string by applying necessary transformations,\n   * such as escaping special characters (e.g., `/`), converting named capture groups to\n   * RE2JS-compatible syntax, and handling Unicode sequences properly. It ensures that the\n   * resulting regex is safe and properly formatted before compilation.\n   *\n   * @param {string} expr - The regular expression string to be translated.\n   * @returns {string} - The transformed regular expression string, ready for compilation.\n   */\n  static translateRegExp(expr) {\n    return TranslateRegExpString.translate(expr);\n  }\n\n  /**\n   * Helper: create new RE2JS with given regex and flags. Flregex is the regex with flags applied.\n   * @param {string} regex\n   * @param {number} [flags=0]\n   * @returns {RE2JS}\n   */\n  static compile(regex, flags = 0) {\n    let fregex = regex;\n    if ((flags & RE2JS.CASE_INSENSITIVE) !== 0) {\n      fregex = `(?i)${fregex}`;\n    }\n    if ((flags & RE2JS.DOTALL) !== 0) {\n      fregex = `(?s)${fregex}`;\n    }\n    if ((flags & RE2JS.MULTILINE) !== 0) {\n      fregex = `(?m)${fregex}`;\n    }\n    if ((flags & ~(RE2JS.MULTILINE | RE2JS.DOTALL | RE2JS.CASE_INSENSITIVE | RE2JS.DISABLE_UNICODE_GROUPS | RE2JS.LONGEST_MATCH)) !== 0) {\n      throw new RE2JSFlagsException('Flags should only be a combination of MULTILINE, DOTALL, CASE_INSENSITIVE, DISABLE_UNICODE_GROUPS, LONGEST_MATCH');\n    }\n    let re2Flags = RE2Flags.PERL;\n    if ((flags & RE2JS.DISABLE_UNICODE_GROUPS) !== 0) {\n      re2Flags &= -129;\n    }\n    const p = new RE2JS(regex, flags);\n    // The compiled RE2 regexp.\n    p.re2Input = RE2.compileImpl(fregex, re2Flags, (flags & RE2JS.LONGEST_MATCH) !== 0);\n    return p;\n  }\n\n  /**\n   * Matches a string against a regular expression.\n   *\n   * @param {string} regex the regular expression\n   * @param {string|number[]} input the input\n   * @returns {boolean} true if the regular expression matches the entire input\n   * @throws RE2JSSyntaxException if the regular expression is malformed\n   */\n  static matches(regex, input) {\n    return RE2JS.compile(regex).matcher(input).matches();\n  }\n\n  /**\n   * This is visible for testing.\n   * @private\n   */\n  static initTest(pattern, flags, re2) {\n    if (pattern == null) {\n      throw new Error('pattern is null');\n    }\n    if (re2 == null) {\n      throw new Error('re2 is null');\n    }\n    const p = new RE2JS(pattern, flags);\n    // The compiled RE2 regexp.\n    p.re2Input = re2;\n    return p;\n  }\n\n  /**\n   *\n   * @param {string} pattern\n   * @param {number} flags\n   */\n  constructor(pattern, flags) {\n    // The pattern string at construction time.\n    this.patternInput = pattern;\n    // The flags at construction time.\n    this.flagsInput = flags;\n  }\n\n  /**\n   * Releases memory used by internal caches associated with this pattern. Does not change the\n   * observable behaviour. Useful for tests that detect memory leaks via allocation tracking.\n   */\n  reset() {\n    this.re2Input.reset();\n  }\n\n  /**\n   * Returns the flags used in the constructor.\n   * @returns {number}\n   */\n  flags() {\n    return this.flagsInput;\n  }\n\n  /**\n   * Returns the pattern used in the constructor.\n   * @returns {string}\n   */\n  pattern() {\n    return this.patternInput;\n  }\n  re2() {\n    return this.re2Input;\n  }\n\n  /**\n   * Matches a string against a regular expression.\n   *\n   * @param {string|number[]} input the input\n   * @returns {boolean} true if the regular expression matches the entire input\n   */\n  matches(input) {\n    return this.matcher(input).matches();\n  }\n\n  /**\n   * Creates a new {@code Matcher} matching the pattern against the input.\n   *\n   * @param {string|number[]} input the input string\n   * @returns {Matcher}\n   */\n  matcher(input) {\n    if (Array.isArray(input)) {\n      input = MatcherInput.utf8(input);\n    }\n    return new Matcher(this, input);\n  }\n\n  /**\n   * Splits input around instances of the regular expression. It returns an array giving the strings\n   * that occur before, between, and after instances of the regular expression.\n   *\n   * If {@code limit <= 0}, there is no limit on the size of the returned array. If\n   * {@code limit == 0}, empty strings that would occur at the end of the array are omitted. If\n   * {@code limit > 0}, at most limit strings are returned. The final string contains the remainder\n   * of the input, possibly including additional matches of the pattern.\n   *\n   * @param {string} input the input string to be split\n   * @param {number} [limit=0] the limit\n   * @returns {string[]} the split strings\n   */\n  split(input, limit = 0) {\n    const m = this.matcher(input);\n    const result = [];\n    let emptiesSkipped = 0;\n    let last = 0;\n    while (m.find()) {\n      if (last === 0 && m.end() === 0) {\n        // Zero-width match at the beginning, skip\n        last = m.end();\n        continue;\n      }\n      if (limit > 0 && result.length === limit - 1) {\n        // no more room for matches\n        break;\n      }\n      if (last === m.start()) {\n        // Empty match, may or may not be trailing.\n        if (limit === 0) {\n          emptiesSkipped += 1;\n          last = m.end();\n          continue;\n        }\n      } else {\n        // If emptiesSkipped > 0 then limit == 0 and we have non-trailing empty matches to add before\n        // this non-empty match.\n        while (emptiesSkipped > 0) {\n          result.push('');\n          emptiesSkipped -= 1;\n        }\n      }\n      result.push(m.substring(last, m.start()));\n      last = m.end();\n    }\n    if (limit === 0 && last !== m.inputLength()) {\n      // Unlimited match, no more delimiters but we have a non-empty input at the end. Catch up any skipped empty\n      // matches, then emit the final match.\n      while (emptiesSkipped > 0) {\n        result.push('');\n        emptiesSkipped -= 1;\n      }\n      result.push(m.substring(last, m.inputLength()));\n    }\n    if (limit !== 0 || result.length === 0) {\n      result.push(m.substring(last, m.inputLength()));\n    }\n    return result;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  toString() {\n    return this.patternInput;\n  }\n\n  /**\n   * Returns the program size of this pattern.\n   *\n   * <p>\n   * Similar to the C++ implementation, the program size is a very approximate measure of a regexp's\n   * \"cost\". Larger numbers are more expensive than smaller numbers.\n   * </p>\n   *\n   * @returns {number} the program size of this pattern\n   */\n  programSize() {\n    return this.re2Input.numberOfInstructions();\n  }\n\n  /**\n   * Returns the number of capturing groups in this matcher's pattern. Group zero denotes the entire\n   * pattern and is excluded from this count.\n   *\n   * @returns {number} the number of capturing groups in this pattern\n   */\n  groupCount() {\n    return this.re2Input.numberOfCapturingGroups();\n  }\n\n  /**\n   * Return a map of the capturing groups in this matcher's pattern, where key is the name and value\n   * is the index of the group in the pattern.\n   * @returns {*}\n   */\n  namedGroups() {\n    return this.re2Input.namedGroups;\n  }\n\n  /**\n   *\n   * @param {*} other\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other === null || this.constructor !== other.constructor) {\n      return false;\n    }\n    return this.flagsInput === other.flagsInput && this.patternInput === other.patternInput;\n  }\n}\n\nexport { RE2JS, RE2JSCompileException, RE2JSException, RE2JSFlagsException, RE2JSGroupException, RE2JSSyntaxException };\n//# sourceMappingURL=index.esm.js.map\n"],"names":["RE2Flags","static","CLASS_NL","DOT_NL","ONE_LINE","PERL_X","UNICODE_GROUPS","Codepoint","Map","toUpperCase","codepoint","s","String","fromCodePoint","length","sOrigin","codePointAt","toLowerCase","UnicodeTables","this","Lu","C","Cc","Cf","Co","Cs","L","Ll","Lm","Lo","Lt","M","Mc","Me","Mn","N","Nd","Nl","No","P","Pc","Pd","Pe","Pf","Pi","Po","Ps","S","Sc","Sk","Sm","So","Z","Zl","Zp","Zs","Adlam","Ahom","Anatolian_Hieroglyphs","Arabic","Armenian","Avestan","Balinese","Bamum","Bassa_Vah","Batak","Bengali","Bhaiksuki","Bopomofo","Brahmi","Braille","Buginese","Buhid","Canadian_Aboriginal","Carian","Caucasian_Albanian","Chakma","Cham","Cherokee","Chorasmian","Common","Coptic","Cuneiform","Cypriot","Cypro_Minoan","Cyrillic","Deseret","Devanagari","Dives_Akuru","Dogra","Duployan","Egyptian_Hieroglyphs","Elbasan","Elymaic","Ethiopic","Garay","Georgian","Glagolitic","Gothic","Grantha","Greek","Gujarati","Gunjala_Gondi","Gurmukhi","Gurung_Khema","Han","Hangul","Hanifi_Rohingya","Hanunoo","Hatran","Hebrew","Hiragana","Imperial_Aramaic","Inherited","Inscriptional_Pahlavi","Inscriptional_Parthian","Javanese","Kaithi","Kannada","Katakana","Kawi","Kayah_Li","Kharoshthi","Khitan_Small_Script","Khmer","Khojki","Khudawadi","Kirat_Rai","Lao","Latin","Lepcha","Limbu","Linear_A","Linear_B","Lisu","Lycian","Lydian","Mahajani","Makasar","Malayalam","Mandaic","Manichaean","Marchen","Masaram_Gondi","Medefaidrin","Meetei_Mayek","Mende_Kikakui","Meroitic_Cursive","Meroitic_Hieroglyphs","Miao","Modi","Mongolian","Mro","Multani","Myanmar","Nabataean","Nag_Mundari","Nandinagari","New_Tai_Lue","Newa","Nko","Nushu","Nyiakeng_Puachue_Hmong","Ogham","Ol_Chiki","Ol_Onal","Old_Hungarian","Old_Italic","Old_North_Arabian","Old_Permic","Old_Persian","Old_Sogdian","Old_South_Arabian","Old_Turkic","Old_Uyghur","Oriya","Osage","Osmanya","Pahawh_Hmong","Palmyrene","Pau_Cin_Hau","Phags_Pa","Phoenician","Psalter_Pahlavi","Rejang","Runic","Samaritan","Saurashtra","Sharada","Shavian","Siddham","SignWriting","Sinhala","Sogdian","Sora_Sompeng","Soyombo","Sundanese","Sunuwar","Syloti_Nagri","Syriac","Tagalog","Tagbanwa","Tai_Le","Tai_Tham","Tai_Viet","Takri","Tamil","Tangsa","Tangut","Telugu","Thaana","Thai","Tibetan","Tifinagh","Tirhuta","Todhri","Toto","Tulu_Tigalari","Ugaritic","Vai","Vithkuqi","Wancho","Warang_Citi","Yezidi","Yi","Zanabazar_Square","foldL","foldLl","foldLt","foldLu","foldM","foldMn","foldCommon","foldGreek","foldInherited","Unicode","is32","ranges","r","lo","hi","m","Math","floor","range","is","MAX_LATIN1","isUpper","Upper","isPrint","simpleFold","CASE_ORBIT","has","get","l","equalsIgnoreCase","r1","r2","MAX_ASCII","CODES","Utils","emptyInts","isalnum","c","unhex","escapeRune","rune","out","METACHARACTERS","indexOf","toString","stringToRunes","str","split","map","runeToString","isWordRune","emptyOpContext","op","EMPTY_BEGIN_TEXT","EMPTY_BEGIN_LINE","EMPTY_END_TEXT","EMPTY_END_LINE","EMPTY_WORD_BOUNDARY","EMPTY_NO_WORD_BOUNDARY","quoteMeta","join","charCount","codePoint","MAX_BMP","stringToUtf8ByteArray","globalThis","TextEncoder","Array","from","encode","p","i","charCodeAt","utf8ByteArrayToString","bytes","TextDecoder","decode","Uint8Array","pos","c1","fromCharCode","c2","u","c3","createEnum","values","initNum","enumObject","val","keyVal","Object","freeze","MatcherInputBase","getEncoding","Error","isUTF8Encoding","Encoding","UTF_8","isUTF16Encoding","UTF_16","Utf8MatcherInput","constructor","super","asCharSequence","asBytes","Utf16MatcherInput","charSequence","MatcherInput","utf16","utf8","input","isArray","RE2JSException","message","name","RE2JSSyntaxException","error","getDescription","getPattern","RE2JSCompileException","RE2JSGroupException","RE2JSFlagsException","Matcher","quoteReplacement","pattern","patternInput","re2","patternGroupCount","numberOfCapturingGroups","groups","namedGroups","numberOfInstructions","resetMatcherInput","reset","matcherInputLength","matcherInput","appendPos","hasMatch","hasGroups","anchorFlag","start","group","groupInt","Number","isFinite","loadGroup","end","programSize","substring","groupCount","res","matchMachineInput","matches","genMatch","ANCHOR_BOTH","lookingAt","ANCHOR_START","find","UNANCHORED","startByte","anchor","slice","inputLength","appendReplacement","replacement","perlMode","e","appendReplacementInternalPerl","appendReplacementInternal","last","n","j","groupName","prototype","hasOwnProperty","call","appendTail","replaceAll","replace","replaceFirst","all","MachineInputBase","EOF","canCheckPrefix","endPos","MachineUTF8Input","step","x","index","prefixUTF8","context","lim","source","target","fromIndex","targetLength","sourceLength","MachineUTF16Input","prefix","MachineInput","fromUTF8","fromUTF16","Inst","isRuneOp","RUNE","RUNE_ANY_NOT_NL","escapeRunes","runes","arg","matchRune","r0","FOLD_CASE","ALT","ALT_MATCH","CAPTURE","EMPTY_WIDTH","MATCH","FAIL","NOP","RUNE1","RUNE_ANY","Thread","inst","cap","Queue","sparse","densePcs","denseThreads","size","contains","pc","isEmpty","add","clear","Machine","fromRE2","prog","q0","numInst","q1","pool","poolSize","matched","matchcap","numCap","fill","ncap","fromMachine","machine","init","initNewCap","resetCap","submatches","alloc","t","freeQueue","queue","numberOfThread","requiredPoolLength","max","freeThread","match","startCond","cond","EMPTY_ALL","flag","runq","nextq","width","rune1","width1","prefixRune","advance","nextPos","tmpq","nextCond","atEnd","longest","q","d","opos","Regexp","isPseudoOp","Op","LEFT_PAREN","emptySubs","quoteIfHyphen","fromRegexp","re","regex","flags","subs","min","reinit","appendTo","NO_MATCH","EMPTY_MATCH","STAR","PLUS","QUEST","REPEAT","sub","LITERAL","NON_GREEDY","CONCAT","ALTERNATE","sep","ANY_CHAR_NOT_NL","ANY_CHAR","BEGIN_TEXT","END_TEXT","WAS_DOLLAR","BEGIN_LINE","END_LINE","WORD_BOUNDARY","NO_WORD_BOUNDARY","CHAR_CLASS","MAX_RUNE","maxCap","equals","that","Prog","getInst","addInst","push","skipNop","loop","next","patch","append","l1","l2","len","Frag","nullable","Compiler","ANY_RUNE_NOT_NL","ANY_RUNE","compileRegexp","f","compile","newInst","nop","fail","cat","f1","f2","alt","nongreedy","quest","star","plus","empty","bra","ket","Simplify","simplify","nre","nsub","simplify1","prefixSubs","suffix","nre2","CharGroup","sign","cls","code1","code2","code3","PERL_GROUPS","code4","code5","code6","code7","code8","code9","code10","code11","code12","code13","code14","code15","code16","code17","POSIX_GROUPS","CharClass","charClassToString","result","cmp","array","pivotFrom","pivotTo","qsortIntPair","left","right","pivotIndex","temp","toArray","cleanClass","w","appendLiteral","appendFoldedRange","appendRange","rlo","rhi","MIN_FOLD","MAX_FOLD","appendClass","appendFoldedClass","appendNegatedClass","nextLo","appendTable","table","triple","stride","appendNegatedTable","appendTableWithSign","negateClass","appendClassWithSign","appendGroup","g","foldCase","Pair","of","first","second","StringIterator","position","rewindTo","more","peek","skip","skipString","pop","rest","startsWith","beforePos","Parser","ANY_TABLE","unicodeTable","CATEGORIES","FOLD_CATEGORIES","SCRIPTS","FOLD_SCRIPT","minFoldRune","leadingRegexp","literalRegexp","parse","parseInternal","parseRepeat","parseInt","ERR_INVALID_REPEAT_SIZE","isValidCaptureName","parseFloat","isCharClass","mergeCharClass","dst","src","parseEscape","startPos","ERR_TRAILING_BACKSLASH","bigswitch","nhex","v","y","ERR_INVALID_ESCAPE","parseClassChar","wholeClassPos","ERR_MISSING_BRACKET","concatRunes","wholeRegexp","stack","free","numRegexp","numRunes","repeats","height","newRegexp","reuse","checkLimits","MAX_RUNES","ERR_LARGE","checkSize","checkHeight","MAX_SIZE","reEx","calcSize","force","MAX_HEIGHT","calcHeight","ERR_NESTING_DEPTH","h","hsub","popToPseudo","maybeConcat","re1","newLiteral","literal","repeat","lastRepeatPos","ERR_INVALID_REPEAT_OP","ERR_MISSING_REPEAT_ARGUMENT","repeatIsValid","trunc","concat","collapse","alternate","cleanAlt","newsubs","splice","factor","old","lensub","lenout","strlen","strflags","istr","istrlen","iflags","same","removeLeadingString","ifirst","removeLeadingRegexp","subMax","subJ","tmp","repeatPos","parsePerlFlags","parseVerticalBar","parseRightParen","parseClass","minMax","savedPos","lit","cc","parseUnicodeClass","parsePerlClassEscape","swapVerticalBar","ERR_MISSING_PAREN","begin","charAt","ERR_INVALID_NAMED_CAPTURE","ERR_DUPLICATE_NAMED_CAPTURE","sawFlag","ERR_INVALID_PERL_OP","VERTICAL_BAR","re3","ERR_UNEXPECTED_PAREN","parseNamedClass","ERR_INVALID_CHAR_RANGE","pair","tab","fold","AtomicReference","initialValue","value","set","newValue","compareAndSet","expect","update","RE2","initTest","expr","numSubexp","prefixComplete","compileImpl","PERL","compilePOSIX","POSIX","mode","prefixCompl","prefixStr","pooled","head","put","isNew","doExecute","matchWithGroup","ngroup","machineInput","groupMatch","matchUTF8","b","repl","replaceAllFunc","replFunc","maxReplaces","lastMatchEnd","searchPos","numReplaces","a","pad","a2","allMatches","deliverFun","prevMatchEnd","accept","findUTF8","findUTF8Index","findIndex","findUTF8Submatch","ret","findUTF8SubmatchIndex","findSubmatch","findSubmatchIndex","findAllUTF8","findAllUTF8Index","findAll","findAllIndex","findAllUTF8Submatch","findAllUTF8SubmatchIndex","findAllSubmatch","findAllSubmatchIndex","TranslateRegExpString","isUpperCaseAlpha","ch","isHexadecimal","getUtf8CharSize","code","translate","data","changed","nextCh","symSize","RE2JS","quote","translateRegExp","fregex","CASE_INSENSITIVE","DOTALL","MULTILINE","DISABLE_UNICODE_GROUPS","LONGEST_MATCH","re2Flags","re2Input","matcher","flagsInput","limit","emptiesSkipped","other"],"sourceRoot":""}