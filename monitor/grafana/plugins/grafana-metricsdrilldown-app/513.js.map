{"version":3,"file":"513.js?_cache=bd6b649be2e9bf43de55","mappings":"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","sources":["webpack://grafana-metricsdrilldown-app/./App/ErrorView.tsx","webpack://grafana-metricsdrilldown-app/./App/Routes.tsx","webpack://grafana-metricsdrilldown-app/./App/useCatchExceptions.ts","webpack://grafana-metricsdrilldown-app/./utils/utils.plugin.ts","webpack://grafana-metricsdrilldown-app/./App/App.tsx","webpack://grafana-metricsdrilldown-app/./App/InlineBanner.tsx","webpack://grafana-metricsdrilldown-app/./MetricsDrilldownDataSourceVariable.ts","webpack://grafana-metricsdrilldown-app/./PluginInfo/PluginLogo.tsx","webpack://grafana-metricsdrilldown-app/./PluginInfo/PluginInfo.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/helpers/localCompare.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/Labels/LabelsDataSource.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/Labels/LabelValuesVariable.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SceneByVariableRepeater/SceneByVariableRepeater.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/ListControls/MetricsSorter/EventSortByChanged.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/ListControls/MetricsSorter/metricUsageFetcher.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/ListControls/MetricsSorter/MetricsSorter.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/MetricsVariable.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/EventMetricsVariableActivated.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/EventMetricsVariableDeactivated.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/EventMetricsVariableLoaded.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/withLifecycleEvents.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/FilteredMetricsVariable.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricVizPanel/actions/SelectAction.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricVizPanel/NativeHistogramBadge.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricVizPanel/MetricVizPanel.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricVizPanel/panels/buildStatusHistoryPanel.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricVizPanel/panels/buildHeatmapPanel.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricVizPanel/panels/buildTimeseriesPanel.ts","webpack://grafana-metricsdrilldown-app/./MetricSelect/WithUsageDataPreviewPanel.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/Labels/LabelsVariable.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/ListControls/LayoutSwitcher.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsList/SimpleMetricsList.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/custom-icons/GroupsIcon.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/GroupBy/MetricsWithLabelValue/MetricsWithLabelValueDataSource.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/helpers/isPrometheusRule.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/GroupBy/MetricsWithLabelValue/MetricsWithLabelValueVariable.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/GroupBy/MetricsGroupByRow.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/GroupBy/MetricsGroupByList.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/ListControls/QuickSearch/EventQuickSearchChanged.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/ListControls/QuickSearch/QuickSearch.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/ListControls/ListControls.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/MetricsVariableFilterEngine.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/MetricsVariableSortEngine.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/helpers/areArraysEqual.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricVizPanel/actions/EventApplyFunction.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricVizPanel/actions/ApplyAction.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricVizPanel/actions/EventConfigureFunction.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricVizPanel/actions/ConfigureAction.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SceneDrawer.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/sections/MetricsFilterSection/EventFiltersChanged.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/ListControls/QuickSearch/EventFiltersChanged.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/metricLabels.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/sections/EventSectionValueChanged.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/sections/MetricsFilterSection/CheckboxWithCount.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/sections/MetricsFilterSection/CheckBoxList.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/sections/MetricsFilterSection/MetricsFilterSection.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/computeMetricPrefixGroups.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/computeMetricSuffixGroups.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsVariables/computeRulesGroups.ts","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/sections/LabelsBrowser/LabelsList.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/sections/LabelsBrowser/LabelsBrowser.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/sections/Settings.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/SideBarButton.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/custom-icons/RulesIcon.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/SideBar.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/MetricsReducer.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/helpers/registerRuntimeDataSources.ts","webpack://grafana-metricsdrilldown-app/./DataTrailSettings.tsx","webpack://grafana-metricsdrilldown-app/./DataTrail.tsx","webpack://grafana-metricsdrilldown-app/./MetricSelect/AddToExplorationsButton.tsx","webpack://grafana-metricsdrilldown-app/./Menu/PanelMenu.tsx","webpack://grafana-metricsdrilldown-app/./autoQuery/components/AutoVizPanelQuerySelector.tsx","webpack://grafana-metricsdrilldown-app/./autoQuery/components/AutoVizPanel.tsx","webpack://grafana-metricsdrilldown-app/./autoQuery/queryGenerators/baseQuery.ts","webpack://grafana-metricsdrilldown-app/./autoQuery/queryGenerators/common.ts","webpack://grafana-metricsdrilldown-app/./autoQuery/queryGenerators/default.ts","webpack://grafana-metricsdrilldown-app/./autoQuery/queryGenerators/histogram.ts","webpack://grafana-metricsdrilldown-app/./autoQuery/queryGenerators/summary.ts","webpack://grafana-metricsdrilldown-app/./autoQuery/getAutoQueriesForMetric.ts","webpack://grafana-metricsdrilldown-app/./BreakdownLabelSelector.tsx","webpack://grafana-metricsdrilldown-app/./Breakdown/AddToFiltersGraphAction.tsx","webpack://grafana-metricsdrilldown-app/./Breakdown/utils.ts","webpack://grafana-metricsdrilldown-app/./services/search.ts","webpack://grafana-metricsdrilldown-app/./Breakdown/ByFrameRepeater.tsx","webpack://grafana-metricsdrilldown-app/./Breakdown/SearchInput.tsx","webpack://grafana-metricsdrilldown-app/./Breakdown/BreakdownSearchScene.tsx","webpack://grafana-metricsdrilldown-app/./Breakdown/types.ts","webpack://grafana-metricsdrilldown-app/./Breakdown/LayoutSwitcher.tsx","webpack://grafana-metricsdrilldown-app/./Breakdown/SortByScene.tsx","webpack://grafana-metricsdrilldown-app/./Breakdown/yAxisSyncBehavior.ts","webpack://grafana-metricsdrilldown-app/./services/variables.ts","webpack://grafana-metricsdrilldown-app/./Breakdown/LabelBreakdownScene.tsx","webpack://grafana-metricsdrilldown-app/./MetricGraphScene.tsx","webpack://grafana-metricsdrilldown-app/./Integrations/logs/labelsCrossReference.ts","webpack://grafana-metricsdrilldown-app/./Integrations/logs/lokiRecordingRules.ts","webpack://grafana-metricsdrilldown-app/./RelatedLogs/RelatedLogsOrchestrator.ts","webpack://grafana-metricsdrilldown-app/./RelatedLogs/NoRelatedLogsFound.tsx","webpack://grafana-metricsdrilldown-app/./RelatedLogs/RelatedLogsScene.tsx","webpack://grafana-metricsdrilldown-app/./ShareTrailButton.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene.tsx","webpack://grafana-metricsdrilldown-app/./ActionTabs/RelatedMetricsScene.tsx","webpack://grafana-metricsdrilldown-app/./TrailStore/useBookmarkState.ts","webpack://grafana-metricsdrilldown-app/./groop/parser.ts","webpack://grafana-metricsdrilldown-app/./MetricSelect/api.ts","webpack://grafana-metricsdrilldown-app/./MetricSelect/hideEmptyPreviews.ts","webpack://grafana-metricsdrilldown-app/./MetricSelect/NativeHistogramBadge.tsx","webpack://grafana-metricsdrilldown-app/./MetricSelect/SelectMetricAction.tsx","webpack://grafana-metricsdrilldown-app/./MetricSelect/PreviewPanel.tsx","webpack://grafana-metricsdrilldown-app/./MetricSelect/relatedMetrics.ts","webpack://grafana-metricsdrilldown-app/./MetricSelect/util.ts","webpack://grafana-metricsdrilldown-app/./utils/utils.timerange.ts","webpack://grafana-metricsdrilldown-app/./MetricSelect/MetricSelectScene.tsx","webpack://grafana-metricsdrilldown-app/./utils/utils.layout.ts","webpack://grafana-metricsdrilldown-app/./StatusWrapper.tsx","webpack://grafana-metricsdrilldown-app/./TrailStore/TrailStore.ts","webpack://grafana-metricsdrilldown-app/./TrailStore/utils.tsx","webpack://grafana-metricsdrilldown-app/./DataTrailCard.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/sections/BookmarksList.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/SideBar/sections/SectionTitle.tsx","webpack://grafana-metricsdrilldown-app/./WingmanDataTrail/helpers/displayStatus.ts","webpack://grafana-metricsdrilldown-app/./autoQuery/buildPrometheusQuery.ts","webpack://grafana-metricsdrilldown-app/./autoQuery/graphBuilders.ts","webpack://grafana-metricsdrilldown-app/./autoQuery/units.ts","webpack://grafana-metricsdrilldown-app/./constants/ui.ts","webpack://grafana-metricsdrilldown-app/./helpers/MetricDatasourceHelper.ts","webpack://grafana-metricsdrilldown-app/./interactions.ts","webpack://grafana-metricsdrilldown-app/./otel/api.ts","webpack://grafana-metricsdrilldown-app/./otel/util.ts","webpack://grafana-metricsdrilldown-app/./services/levels.ts","webpack://grafana-metricsdrilldown-app/./services/sorting.ts","webpack://grafana-metricsdrilldown-app/./services/store.ts","webpack://grafana-metricsdrilldown-app/./shared.ts","webpack://grafana-metricsdrilldown-app/./stubs/grafana-plugin-ui.ts","webpack://grafana-metricsdrilldown-app/./stubs/moment-timezone.ts","webpack://grafana-metricsdrilldown-app/./utils.ts","webpack://grafana-metricsdrilldown-app/./utils/utils.datasource.ts","webpack://grafana-metricsdrilldown-app/./utils/utils.queries.ts","webpack://grafana-metricsdrilldown-app/./utils/utils.scopes.ts","webpack://grafana-metricsdrilldown-app/./utils/utils.variables.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { TextLink, useStyles2 } from '@grafana/ui';\nimport React, { useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { InlineBanner } from './InlineBanner';\n\nexport function ErrorView({ error }: { error: Error }) {\n  const styles = useStyles2(getStyles);\n\n  const navigate = useNavigate();\n  const { pathname, search } = useLocation();\n\n  const onClickReload = useCallback(() => {\n    const searchParams = new URLSearchParams(search);\n    const newSearchParams = new URLSearchParams();\n\n    // these are safe keys to keep\n    ['from', 'to', 'timezone']\n      .filter((key) => searchParams.has(key))\n      .forEach((key) => newSearchParams.set(key, searchParams.get(key)!));\n\n    navigate({ pathname, search: newSearchParams.toString() });\n    window.location.reload();\n  }, [navigate, pathname, search]);\n\n  return (\n    <div className={styles.container}>\n      <InlineBanner\n        severity=\"error\"\n        title=\"Fatal error!\"\n        message={\n          <>\n            Please{' '}\n            <TextLink href=\"#\" onClick={onClickReload}>\n              try reloading the page\n            </TextLink>{' '}\n            or, if the problem persists, contact your organization admin. Sorry for the inconvenience.\n          </>\n        }\n        error={error}\n        errorContext={{ handheldBy: 'React error boundary' }}\n      />\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      margin: theme.spacing(2),\n    }),\n  };\n}\n","import React, { lazy, useContext } from 'react';\nimport { Navigate, Route, Routes, useLocation } from 'react-router-dom';\n\nimport { ROUTES } from '../constants';\nimport { MetricsContext } from './App';\n\nconst Wingman = lazy(() => import('../pages/TrailWingman'));\n\n// For /trail links, redirect to /drilldown with the same search params\nconst TrailRedirect = () => {\n  const location = useLocation();\n  return <Navigate to={`${ROUTES.Drilldown}${location.search}`} replace />;\n};\n\nexport const AppRoutes = () => {\n  const { trail } = useContext(MetricsContext);\n\n  return (\n    <Routes>\n      <Route path={ROUTES.Drilldown} element={<Wingman trail={trail} />} />\n      <Route path={ROUTES.Trail} element={<TrailRedirect />} />\n      {/* catch-all route */}\n      <Route path=\"*\" element={<Navigate to={ROUTES.Drilldown} replace />} />\n    </Routes>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nfunction ensureErrorObject(error: any, defaultMessage: string): Error {\n  if (error instanceof Error) {\n    return error;\n  }\n  if (typeof error === 'string') {\n    return new Error(error);\n  }\n  if (typeof error.message === 'string') {\n    return new Error(error.message);\n  }\n  return new Error(defaultMessage);\n}\n\nexport function useCatchExceptions(): [Error | undefined, React.Dispatch<React.SetStateAction<Error | undefined>>] {\n  const [error, setError] = useState<Error>();\n\n  // even though we wrap the app in an ErrorBoundary, some errors are not caught,\n  // so we have to set global handlers to catch these (e.g. error thrown from some click handlers)\n  useEffect(() => {\n    const onError = (errorEvent: ErrorEvent) => {\n      setError(ensureErrorObject(errorEvent.error, 'Uncaught exception!'));\n    };\n\n    const onUnHandledRejection = (event: PromiseRejectionEvent) => {\n      // TODO: remove me when we remove MetricSelectScene\n      // indeed, it seems there's always  a cancelled request when landing on the view :man_shrug:\n      // Ideally, the code in DataTrail should handle the cancellation but we do it here because it's easier\n      if (event.reason.type === 'cancelled') {\n        setError(undefined);\n        return;\n      }\n\n      setError(ensureErrorObject(event.reason, 'Unhandled rejection!'));\n    };\n\n    window.addEventListener('error', onError);\n    window.addEventListener('unhandledrejection', onUnHandledRejection);\n    return () => {\n      window.removeEventListener('unhandledrejection', onUnHandledRejection);\n      window.removeEventListener('error', onError);\n    };\n  }, []);\n\n  return [error, setError];\n}\n","import { type AppRootProps } from '@grafana/data';\nimport { createContext, useContext } from 'react';\n\n// This is used to be able to retrieve the root plugin props anywhere inside the app.\nexport const PluginPropsContext = createContext<AppRootProps | null>(null);\n\nexport const usePluginProps = () => {\n  const pluginProps = useContext(PluginPropsContext);\n\n  return pluginProps;\n};\n\nexport const usePluginMeta = () => {\n  const pluginProps = usePluginProps();\n\n  return pluginProps?.meta;\n};\n","import { css } from '@emotion/css';\nimport { type AppRootProps, type GrafanaTheme2 } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { createContext, useEffect, useState } from 'react';\n\nimport { type DataTrail } from 'DataTrail';\nimport { initFaro } from 'tracking/faro/faro';\nimport { getUrlForTrail, newMetricsTrail } from 'utils';\n\nimport { ErrorView } from './ErrorView';\nimport { AppRoutes } from './Routes';\nimport { useCatchExceptions } from './useCatchExceptions';\nimport { PluginPropsContext } from '../utils/utils.plugin';\nimport { navigationEvents } from '../WingmanDataTrail/SideBar/sections/BookmarksList';\n\ninitFaro();\n\ninterface MetricsAppContext {\n  trail: DataTrail;\n  goToUrlForTrail: (trail: DataTrail) => void;\n}\n\nexport const MetricsContext = createContext<MetricsAppContext>({\n  trail: newMetricsTrail(undefined),\n  goToUrlForTrail: () => {},\n});\n\nfunction App(props: AppRootProps) {\n  const [error] = useCatchExceptions();\n  const [trail, setTrail] = useState<DataTrail>(newMetricsTrail(undefined));\n  const styles = useStyles2(getStyles);\n\n  const goToUrlForTrail = (trail: DataTrail) => {\n    locationService.push(getUrlForTrail(trail));\n    setTrail(trail);\n  };\n\n  // Subscribe to navigation events from BookmarksList\n  useEffect(() => {\n    const handleNavigation = (trail: DataTrail) => {\n      goToUrlForTrail(trail);\n    };\n\n    // Subscribe to navigation events\n    const unsubscribe = navigationEvents.subscribe(handleNavigation);\n\n    // Clean up subscription\n    return () => unsubscribe();\n  }, []);\n\n  if (error) {\n    return (\n      <div className={styles.appContainer} data-testid=\"metrics-drilldown-app\">\n        <ErrorView error={error} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.appContainer} data-testid=\"metrics-drilldown-app\">\n      <PluginPropsContext.Provider value={props}>\n        <MetricsContext.Provider value={{ trail, goToUrlForTrail }}>\n          <AppRoutes />\n        </MetricsContext.Provider>\n      </PluginPropsContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    appContainer: css({\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      backgroundColor: theme.colors.background.primary,\n    }),\n  };\n}\n","import { Alert, type AlertVariant } from '@grafana/ui';\nimport React from 'react';\n\nimport { logger, type ErrorContext } from '../tracking/logger/logger';\n\ntype InlineBannerProps = {\n  severity: AlertVariant;\n  title: string;\n  message?: string | React.ReactNode;\n  error?: Error;\n  errorContext?: ErrorContext;\n  children?: React.ReactNode;\n};\n\nexport function InlineBanner({ severity, title, message, error, errorContext, children }: InlineBannerProps) {\n  let errorObject;\n\n  if (error) {\n    errorObject = typeof error === 'string' ? new Error(error) : error;\n\n    logger.error(errorObject, {\n      ...(errorObject.cause || {}),\n      ...errorContext,\n      bannerTitle: title,\n    });\n  }\n\n  return (\n    <Alert title={title} severity={severity}>\n      {errorObject && (\n        <>\n          {errorObject.message || errorObject.toString()}\n          <br />\n        </>\n      )}\n      {message}\n      {children}\n    </Alert>\n  );\n}\n","import { config } from '@grafana/runtime';\nimport { DataSourceVariable } from '@grafana/scenes';\n\nimport { VAR_DATASOURCE } from 'shared';\n\nexport class MetricsDrilldownDataSourceVariable extends DataSourceVariable {\n  private static LOCAL_STORAGE_KEY = 'metricsDrilldownDataSource';\n\n  constructor({ initialDS }: { initialDS?: string }) {\n    super({\n      key: VAR_DATASOURCE,\n      name: VAR_DATASOURCE,\n      pluginId: 'prometheus',\n      label: 'Data source',\n      description: 'Only prometheus data sources are supported',\n      // if no initialDS is passed to the constructor, we bypass Scenes native behaviour by determining the data source ourselves (see getCurrentDataSource())...\n      skipUrlSync: !initialDS,\n      // ... by doing this, we make sure that we'll always have a data source when the \"var-ds\" URL search param is missing, incorrect, etc.\n      value: initialDS || MetricsDrilldownDataSourceVariable.getCurrentDataSource(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.setState({ skipUrlSync: false }); // restore URL sync\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.value && newState.value !== prevState.value) {\n        // store the new value for future visits\n        localStorage.setItem(MetricsDrilldownDataSourceVariable.LOCAL_STORAGE_KEY, newState.value as string);\n      }\n    });\n  }\n\n  private static getCurrentDataSource(): string {\n    const prometheusDataSources = Object.values(config.datasources).filter((ds) => ds.type === 'prometheus');\n\n    const uidFromUrl = new URL(window.location.href).searchParams.get(`var-${VAR_DATASOURCE}`);\n    const uidFromLocalStorage = localStorage.getItem(MetricsDrilldownDataSourceVariable.LOCAL_STORAGE_KEY);\n\n    const currentDataSource =\n      prometheusDataSources.find((ds) => ds.uid === uidFromUrl) ||\n      prometheusDataSources.find((ds) => ds.uid === uidFromLocalStorage) ||\n      prometheusDataSources.find((ds) => ds.isDefault) ||\n      prometheusDataSources[0];\n\n    if (!currentDataSource) {\n      console.warn('Cannot find any Prometheus data source!');\n      return 'no-data-source-configured';\n    }\n\n    return currentDataSource.uid;\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { memo } from 'react';\n\ntype PluginLogoProps = {\n  size: 'small' | 'large';\n};\n\nexport const PluginLogo = memo(function PluginLogoComponent({ size }: PluginLogoProps) {\n  const styles = useStyles2(getStyles);\n  return <img className={cx(styles.logo, size)} src=\"public/plugins/grafana-metricsdrilldown-app/img/logo.svg\" />;\n});\n\nconst getStyles = () => ({\n  logo: css`\n    &.small {\n      width: 24px;\n      height: 24px;\n      margin-right: 4px;\n      position: relative;\n      top: -2px;\n    }\n\n    &.large {\n      width: 40px;\n      height: 40px;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { usePluginContext, type GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Dropdown, Menu, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { PluginLogo } from './PluginLogo';\nimport { GIT_COMMIT } from '../version';\n\nconst pluginCommitSha: string = GIT_COMMIT;\nconst pluginCommitURL = `https://github.com/grafana/metrics-drilldown/commit/${pluginCommitSha}`;\n\nconst { buildInfo: grafanaBuildInfo } = config;\n\nfunction InfoMenuHeader() {\n  const styles = useStyles2(getStyles);\n\n  const {\n    meta: {\n      info: { version, updated },\n    },\n  } = usePluginContext() || { meta: { info: { version: '?.?.?', updated: '?' } } };\n\n  return (\n    <div className={styles.menuHeader}>\n      <h5>\n        <PluginLogo size=\"small\" />\n        Grafana Metrics Drilldown v{version}\n      </h5>\n      <div className={styles.subTitle}>Last update: {updated}</div>\n    </div>\n  );\n}\n\nfunction InfoMenu() {\n  const isDev = pluginCommitSha === 'dev';\n  const shortCommitSha = isDev ? pluginCommitSha : pluginCommitSha.slice(0, 8);\n\n  return (\n    <Menu header={<InfoMenuHeader />}>\n      <Menu.Item\n        label={`Commit SHA: ${shortCommitSha}`}\n        icon=\"github\"\n        onClick={() => window.open(pluginCommitURL)}\n        disabled={isDev}\n      />\n      <Menu.Item\n        label=\"Changelog\"\n        icon=\"list-ul\"\n        onClick={() => window.open('https://github.com/grafana/metrics-drilldown/blob/main/CHANGELOG.md')}\n      />\n      <Menu.Item\n        label=\"Contribute\"\n        icon=\"external-link-alt\"\n        onClick={() => window.open('https://github.com/grafana/metrics-drilldown/blob/main/docs/contributing.md')}\n      />\n      <Menu.Item\n        label=\"Documentation\"\n        icon=\"document-info\"\n        onClick={() => window.open('https://grafana.com/docs/grafana/latest/explore/simplified-exploration/metrics')}\n      />\n      <Menu.Item\n        label=\"Report an issue\"\n        icon=\"bug\"\n        onClick={() => window.open('https://github.com/grafana/metrics-drilldown/issues/new?template=bug_report.md')}\n      />\n      <Menu.Divider />\n      <Menu.Item\n        label={`Grafana ${grafanaBuildInfo.edition} v${grafanaBuildInfo.version} (${grafanaBuildInfo.env})`}\n        icon=\"grafana\"\n        onClick={() => window.open(`https://github.com/grafana/grafana/commit/${grafanaBuildInfo.commit}`)}\n      />\n    </Menu>\n  );\n}\n\nexport function PluginInfo() {\n  return (\n    <Dropdown overlay={() => <InfoMenu />} placement=\"bottom-end\">\n      <Button\n        icon=\"info-circle\"\n        variant=\"secondary\"\n        tooltip=\"Plugin info\"\n        tooltipPlacement=\"top\"\n        title=\"Plugin info\"\n        data-testid=\"plugin-info-button\"\n      />\n    </Dropdown>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    position: relative;\n    display: flex;\n    align-items: center;\n    width: 32px;\n    height: 32px;\n    line-height: 30px;\n    border: 1px solid ${theme.colors.border.weak};\n    border-radius: 2px;\n    border-left: 0;\n    color: ${theme.colors.text.primary};\n    background: ${theme.colors.background.secondary};\n\n    &:hover {\n      border-color: ${theme.colors.border.medium};\n      background-color: ${theme.colors.background.canvas};\n    }\n  `,\n  menuHeader: css`\n    padding: ${theme.spacing(0.5, 1)};\n    white-space: nowrap;\n  `,\n  subTitle: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","export const localeCompare = new Intl.Collator('en', { sensitivity: 'base' }).compare;\n","import {\n  FieldType,\n  LoadingState,\n  type DataQueryRequest,\n  type DataQueryResponse,\n  type LegacyMetricFindQueryOptions,\n  type MetricFindValue,\n  type TestDataSourceResponse,\n} from '@grafana/data';\nimport { type PrometheusDatasource } from '@grafana/prometheus';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { RuntimeDataSource, sceneGraph, type DataSourceVariable, type SceneObject } from '@grafana/scenes';\n\nimport { MetricDatasourceHelper } from 'helpers/MetricDatasourceHelper';\nimport { VAR_DATASOURCE, VAR_FILTERS } from 'shared';\nimport { isAdHocFiltersVariable } from 'utils/utils.variables';\nimport { displayError, displayWarning } from 'WingmanDataTrail/helpers/displayStatus';\n\nimport { localeCompare } from '../helpers/localCompare';\n\n// TODO can we get rid of it?\nexport const NULL_GROUP_BY_VALUE = '(none)';\n\nexport class LabelsDataSource extends RuntimeDataSource {\n  static uid = 'grafana-prometheus-labels-datasource';\n\n  constructor() {\n    super(LabelsDataSource.uid, LabelsDataSource.uid);\n  }\n\n  async query(request: DataQueryRequest): Promise<DataQueryResponse> {\n    return {\n      state: LoadingState.Done,\n      data: [\n        {\n          name: 'Labels',\n          fields: [\n            {\n              name: null,\n              type: FieldType.other,\n              values: [],\n              config: {},\n            },\n          ],\n          length: 0,\n        },\n      ],\n    };\n  }\n\n  async metricFindQuery(matcher: string, options: LegacyMetricFindQueryOptions): Promise<MetricFindValue[]> {\n    const sceneObject = options.scopedVars?.__sceneObject?.valueOf() as SceneObject;\n\n    const ds = (await LabelsDataSource.getPrometheusDataSource(sceneObject)) as PrometheusDatasource;\n    if (!ds) {\n      return [];\n    }\n\n    const [, labelName] = matcher.match(/valuesOf\\((.+)\\)/) ?? [];\n    if (labelName) {\n      const labelValues = await LabelsDataSource.fetchLabelValues(labelName, sceneObject);\n      return labelValues.map((value) => ({ value, text: value }));\n    }\n\n    let labelOptions: MetricFindValue[] = [];\n\n    try {\n      labelOptions = await this.fetchLabels(ds, sceneObject, matcher);\n    } catch (error) {\n      displayWarning(['Error while fetching labels! Defaulting to an empty array.', (error as Error).toString()]);\n    }\n\n    return [{ value: NULL_GROUP_BY_VALUE, text: '(none)' }, ...labelOptions] as MetricFindValue[];\n  }\n\n  private static async getPrometheusDataSource(sceneObject: SceneObject): Promise<PrometheusDatasource | undefined> {\n    try {\n      const dsVariable = sceneGraph.findByKey(sceneObject, VAR_DATASOURCE) as DataSourceVariable;\n      const uid = (dsVariable?.state.value as string) ?? '';\n      const ds = await getDataSourceSrv().get({ uid });\n\n      return ds as PrometheusDatasource;\n    } catch (error) {\n      displayError(error as Error, ['Error while getting the Prometheus data source!']);\n      return undefined;\n    }\n  }\n\n  private async fetchLabels(ds: PrometheusDatasource, sceneObject: SceneObject, matcher: string) {\n    // there is probably a more graceful way to implement this, but this is what the DS offers us.\n    // if a DS does not support the labels match API, we need getTagKeys to handle the empty matcher\n    if (!LabelsDataSource.getLabelsMatchAPISupport(ds)) {\n      // the Prometheus series endpoint cannot accept an empty matcher\n      // when there are no filters, we cannot send the matcher passed to this function because Prometheus evaluates it as empty and returns an error\n      const filters = LabelsDataSource.getFiltersFromVariable(sceneObject);\n      const response = await ds.getTagKeys(filters);\n\n      return this.processLabelOptions(\n        response.map(({ text }) => ({\n          value: text,\n          text,\n        }))\n      );\n    }\n\n    const args = MetricDatasourceHelper.datasourceUsesTimeRangeInLanguageProviderMethods(ds)\n      ? [sceneGraph.getTimeRange(sceneObject).state.value, matcher]\n      : [matcher];\n\n    // @ts-expect-error: Ignoring type error due to breaking change in fetchLabelsWithMatch signature\n    const response = await ds.languageProvider.fetchLabelsWithMatch(...args);\n\n    return this.processLabelOptions(\n      Object.entries(response).map(([key, value]) => ({\n        value: key,\n        text: Array.isArray(value) ? value[0] : value || key,\n      }))\n    );\n  }\n\n  private static getLabelsMatchAPISupport(ds: PrometheusDatasource) {\n    try {\n      return ds.hasLabelsMatchAPISupport();\n    } catch (error) {\n      displayWarning([\n        'Error while checking if the current data source supports the labels match API! Defaulting to false.',\n        (error as Error).toString(),\n      ]);\n      return false;\n    }\n  }\n\n  private static getFiltersFromVariable(sceneObject: SceneObject): { filters: any[] } {\n    const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, sceneObject);\n\n    if (isAdHocFiltersVariable(filtersVariable)) {\n      return { filters: filtersVariable.state.filters };\n    }\n\n    return { filters: [] };\n  }\n\n  private processLabelOptions(options: Array<{ value: string; text: string }>): Array<{ value: string; text: string }> {\n    return options.filter(({ value }) => !value.startsWith('__')).sort((a, b) => localeCompare(a.value, b.value));\n  }\n\n  static async fetchLabelValues(labelName: string, sceneObject: SceneObject): Promise<string[]> {\n    const ds = await LabelsDataSource.getPrometheusDataSource(sceneObject);\n    if (!ds) {\n      return [];\n    }\n\n    const args = MetricDatasourceHelper.datasourceUsesTimeRangeInLanguageProviderMethods(ds)\n      ? [sceneGraph.getTimeRange(sceneObject).state.value, labelName]\n      : [labelName];\n\n    try {\n      // @ts-expect-error: Ignoring type error due to breaking change in fetchLabelValues signature\n      return await ds.languageProvider.fetchLabelValues(...args);\n    } catch (error) {\n      displayWarning([\n        `Error while retrieving label \"${labelName}\" values! Defaulting to an empty array.`,\n        (error as Error).toString(),\n      ]);\n      return [];\n    }\n  }\n\n  async testDatasource(): Promise<TestDataSourceResponse> {\n    return {\n      status: 'success',\n      message: 'OK',\n    };\n  }\n}\n","import { VariableHide, VariableRefresh } from '@grafana/data';\nimport { QueryVariable } from '@grafana/scenes';\nimport React from 'react';\n\nimport { LabelsDataSource } from './LabelsDataSource';\n\nexport const VAR_LABEL_VALUES = 'wingmanLabelValues';\n\nexport class LabelValuesVariable extends QueryVariable {\n  constructor({ labelName }: { labelName: string }) {\n    super({\n      name: VAR_LABEL_VALUES,\n      datasource: { uid: LabelsDataSource.uid },\n      // just some syntax we make up so that the data source can decide what to fetch\n      query: `valuesOf(${labelName})`,\n      isMulti: false,\n      allowCustomValue: false,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      hide: VariableHide.hideVariable,\n      // BOTH \"value\" and \"includeAll\" below ensure the repetition in SceneByVariableRepeater\n      // // (if not set, it'll render only the 1st variable option)\n      value: '$__all',\n      includeAll: true,\n    });\n  }\n\n  public static Component = () => {\n    return <></>;\n  };\n}\n","import {\n  MultiValueVariable,\n  sceneGraph,\n  SceneObjectBase,\n  VariableDependencyConfig,\n  type SceneComponentProps,\n  type SceneLayout,\n  type SceneObject,\n  type SceneObjectState,\n  type VariableValueOption,\n} from '@grafana/scenes';\nimport React from 'react';\n\n/**\n * This component has been borrowd from Scenes v5,41,1, which is the version Metrics Drilldown currently use.\n *\n * The main purpose of this new component is to create a Scene object that has the capabilities of the original SceneByVariableRepeater and\n * that also to provide:\n *\n *   1. lazy loading/pagination\n *   2. configurable loading/error/empty states\n *   4. minor details (like calling getLayoutChild() and passing an index for multi coloring timeseries)\n *\n *\n */\ninterface SceneByVariableRepeaterState extends SceneObjectState {\n  variableName: string;\n  body: SceneLayout;\n  getLayoutChild(option: VariableValueOption, index: number, options: VariableValueOption[]): SceneObject | null;\n  getLayoutLoading?: () => SceneObject;\n  getLayoutError?: (error: Error) => SceneObject;\n  getLayoutEmpty?: () => SceneObject;\n  currentBatchSize: number;\n  initialPageSize: number;\n  pageSizeIncrement: number;\n  loadingLayout?: SceneObject;\n  errorLayout?: SceneObject;\n  emptyLayout?: SceneObject;\n}\n\nconst DEFAULT_INITIAL_PAGE_SIZE = 6;\nconst DEFAULT_PAGE_SIZE_INCREMENT = 9;\n\nexport class SceneByVariableRepeater extends SceneObjectBase<SceneByVariableRepeaterState> {\n  protected _variableDependency: VariableDependencyConfig<SceneByVariableRepeaterState> = new VariableDependencyConfig(\n    this,\n    {\n      variableNames: [this.state.variableName],\n      onVariableUpdateCompleted: () => this.performRepeat(),\n    }\n  );\n\n  public constructor({\n    variableName,\n    body,\n    getLayoutChild,\n    getLayoutLoading,\n    getLayoutError,\n    getLayoutEmpty,\n    initialPageSize,\n    pageSizeIncrement,\n  }: {\n    variableName: SceneByVariableRepeaterState['variableName'];\n    body: SceneByVariableRepeaterState['body'];\n    getLayoutChild: SceneByVariableRepeaterState['getLayoutChild'];\n    getLayoutLoading?: SceneByVariableRepeaterState['getLayoutLoading'];\n    getLayoutError?: SceneByVariableRepeaterState['getLayoutError'];\n    getLayoutEmpty?: SceneByVariableRepeaterState['getLayoutEmpty'];\n    initialPageSize?: SceneByVariableRepeaterState['initialPageSize'];\n    pageSizeIncrement?: SceneByVariableRepeaterState['pageSizeIncrement'];\n  }) {\n    super({\n      variableName,\n      body,\n      getLayoutChild,\n      getLayoutLoading,\n      getLayoutError,\n      getLayoutEmpty,\n      currentBatchSize: 0,\n      initialPageSize: initialPageSize || DEFAULT_INITIAL_PAGE_SIZE,\n      pageSizeIncrement: pageSizeIncrement || DEFAULT_PAGE_SIZE_INCREMENT,\n      loadingLayout: undefined,\n      errorLayout: undefined,\n      emptyLayout: undefined,\n    });\n\n    this.addActivationHandler(() => this.performRepeat());\n  }\n\n  private performRepeat() {\n    if (this._variableDependency.hasDependencyInLoadingState()) {\n      this.setState({\n        loadingLayout: this.state.getLayoutLoading?.(),\n        errorLayout: undefined,\n        emptyLayout: undefined,\n        currentBatchSize: 0,\n      });\n      return;\n    }\n\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this);\n    if (!(variable instanceof MultiValueVariable)) {\n      console.error('SceneByVariableRepeater: variable is not a MultiValueVariable!', variable);\n      return;\n    }\n\n    if (variable.state.error) {\n      this.setState({\n        errorLayout: this.state.getLayoutError?.(variable.state.error),\n        loadingLayout: undefined,\n        emptyLayout: undefined,\n        currentBatchSize: 0,\n      });\n      return;\n    }\n\n    const values = getMultiVariableValues(variable);\n\n    if (!values.length) {\n      this.setState({\n        emptyLayout: this.state.getLayoutEmpty?.(),\n        errorLayout: undefined,\n        loadingLayout: undefined,\n        currentBatchSize: 0,\n      });\n      return;\n    }\n\n    this.setState({\n      loadingLayout: undefined,\n      errorLayout: undefined,\n      emptyLayout: undefined,\n      currentBatchSize: this.state.initialPageSize,\n    });\n\n    const newChildren: SceneObject[] = values\n      .slice(0, this.state.initialPageSize)\n      .map((option, index) => this.state.getLayoutChild(option, index, values))\n      .filter(Boolean) as SceneObject[];\n\n    this.state.body.setState({\n      children: newChildren,\n    });\n  }\n\n  public increaseBatchSize() {\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this) as MultiValueVariable;\n    const values = getMultiVariableValues(variable);\n\n    const newBatchSize = this.state.currentBatchSize + this.state.pageSizeIncrement;\n\n    const newChildren: SceneObject[] = values\n      .slice(this.state.currentBatchSize, newBatchSize)\n      .map((option, index) => this.state.getLayoutChild(option, this.state.currentBatchSize + index, values))\n      .filter(Boolean) as SceneObject[];\n\n    this.state.body.setState({\n      children: [...this.state.body.state.children, ...newChildren],\n    });\n\n    this.setState({\n      currentBatchSize: newBatchSize,\n    });\n  }\n\n  public useSizes() {\n    const { currentBatchSize, pageSizeIncrement } = this.useState();\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this);\n    return {\n      increment: pageSizeIncrement,\n      current: currentBatchSize,\n      total: (variable as MultiValueVariable).state.options.length,\n    };\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SceneByVariableRepeater>) => {\n    const { body, loadingLayout, errorLayout, emptyLayout } = model.useState();\n\n    if (loadingLayout) {\n      return <loadingLayout.Component model={loadingLayout} />;\n    }\n\n    if (errorLayout) {\n      return <errorLayout.Component model={errorLayout} />;\n    }\n\n    if (emptyLayout) {\n      return <emptyLayout.Component model={emptyLayout} />;\n    }\n\n    return <body.Component model={body} />;\n  };\n}\n\nexport function getMultiVariableValues(variable: MultiValueVariable): VariableValueOption[] {\n  const { value, text, options } = variable.state;\n\n  if (variable.hasAllValue()) {\n    return options;\n  }\n\n  if (Array.isArray(value) && Array.isArray(text)) {\n    return value.map((v, i) => ({ value: v, label: text[i] as string }));\n  }\n\n  return [{ value: value as string, label: text as string }];\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { type SortingOption } from './MetricsSorter';\n\nexport interface EventSortByChangedPayload {\n  sortBy: SortingOption;\n}\n\nexport class EventSortByChanged extends BusEventWithPayload<EventSortByChangedPayload> {\n  public static type = 'sort-by-changed';\n}\n","import { getBackendSrv, type BackendSrvRequest } from '@grafana/runtime';\nimport { type Dashboard } from '@grafana/schema';\nimport { parser } from '@prometheus-io/lezer-promql';\nimport { limitFunction } from 'p-limit';\n\nimport { type SortingOption } from './MetricsSorter';\nimport { logger } from '../../../tracking/logger/logger';\nimport { isPrometheusDataSource } from '../../../utils/utils.datasource';\n\ninterface MetricsUsageState {\n  metrics: Record<string, number>;\n  metricsPromise: Promise<Record<string, number>> | undefined;\n  fetcher: () => Promise<Record<string, number>>;\n}\nexport type MetricUsageType = Exclude<SortingOption, 'default'>;\n\nexport class MetricUsageFetcher {\n  private _usageState: Record<MetricUsageType, MetricsUsageState> = {\n    'dashboard-usage': {\n      metrics: {},\n      metricsPromise: undefined,\n      fetcher: fetchDashboardMetrics,\n    },\n    'alerting-usage': {\n      metrics: {},\n      metricsPromise: undefined,\n      fetcher: fetchAlertingMetrics,\n    },\n  };\n\n  public getUsageMetrics(usageType: MetricUsageType): Promise<Record<string, number>> {\n    const hasExistingMetrics =\n      this._usageState[usageType].metrics && Object.keys(this._usageState[usageType].metrics).length > 0;\n\n    if (hasExistingMetrics) {\n      return Promise.resolve(this._usageState[usageType].metrics);\n    }\n\n    if (!this._usageState[usageType].metricsPromise) {\n      this._usageState[usageType].metricsPromise = this._usageState[usageType].fetcher().then((metrics) => {\n        this._usageState[usageType].metrics = metrics;\n        this._usageState[usageType].metricsPromise = undefined;\n        return metrics;\n      });\n    }\n\n    return this._usageState[usageType].metricsPromise;\n  }\n\n  public getUsageForMetric(metricName: string, usageType: MetricUsageType): Promise<number> {\n    return this.getUsageMetrics(usageType).then((metrics) => metrics[metricName] ?? 0);\n  }\n}\n\ninterface DashboardSearchItem {\n  id: number;\n  uid: string;\n  title: string;\n  url: string;\n  folderTitle?: string;\n  folderUid?: string;\n  tags: string[];\n  isStarred: boolean;\n}\n\nconst usageRequestOptions: Partial<BackendSrvRequest> = {\n  showSuccessAlert: false,\n  showErrorAlert: false,\n};\nconst dashboardRequestMap = new Map<string, Promise<{ dashboard: Dashboard } | null>>();\nconst limitedFunction = limitFunction(\n  async (dashboardUid: string, dashboardRequestsFailedCount: number) => {\n    let promise = dashboardRequestMap.get(dashboardUid);\n\n    if (!promise) {\n      promise = getBackendSrv()\n        .get<{ dashboard: Dashboard }>(\n          `/api/dashboards/uid/${dashboardUid}`,\n          undefined,\n          `grafana-metricsdrilldown-app-dashboard-metric-usage-${dashboardUid}`,\n          usageRequestOptions\n        )\n        .catch((error) => {\n          // Prevent excessive noise\n          if (dashboardRequestsFailedCount <= 5) {\n            logger.error(error, {\n              dashboardUid,\n            });\n          }\n\n          dashboardRequestsFailedCount++;\n          return Promise.resolve(null);\n        })\n        .finally(() => {\n          dashboardRequestMap.delete(dashboardUid);\n        });\n      dashboardRequestMap.set(dashboardUid, promise);\n    }\n\n    return promise;\n  },\n  { concurrency: 50 }\n);\n\n/**\n * Fetches metric usage data from dashboards\n * @returns A record mapping metric names to their occurrence count in dashboards\n */\nexport async function fetchDashboardMetrics(): Promise<Record<string, number>> {\n  try {\n    const dashboards = await getBackendSrv().get<DashboardSearchItem[]>(\n      '/api/search',\n      {\n        type: 'dash-db',\n        limit: 500,\n      },\n      'grafana-metricsdrilldown-app-dashboard-search',\n      usageRequestOptions\n    );\n\n    let dashboardRequestsFailedCount = 0;\n\n    const metricCounts = await Promise.all(\n      dashboards.map(({ uid: dashboardUid }) => limitedFunction(dashboardUid, dashboardRequestsFailedCount))\n    ).then((dashboardSearchResponse) => {\n      // Create a map to count metric occurrences\n      const counts: Record<string, number> = {};\n      const dashboards = dashboardSearchResponse.filter((d): d is { dashboard: Dashboard } => d !== null);\n\n      for (const { dashboard } of dashboards) {\n        if (!dashboard.panels?.length) {\n          continue;\n        }\n\n        for (const panel of dashboard.panels) {\n          const { datasource } = panel;\n          if (!isPrometheusDataSource(datasource) || !('targets' in panel) || !panel.targets?.length) {\n            continue;\n          }\n\n          for (const target of panel.targets) {\n            const expr = typeof target.expr === 'string' ? target.expr : '';\n            const metrics = extractMetricNames(expr);\n\n            // Count each metric occurrence\n            for (const metric of metrics) {\n              if (!metric) {\n                continue;\n              }\n\n              counts[metric] = (counts[metric] || 0) + 1;\n            }\n          }\n        }\n      }\n\n      return counts;\n    });\n\n    return metricCounts;\n  } catch (err) {\n    const error = typeof err === 'string' ? new Error(err) : (err as Error);\n    logger.error(error, {\n      message: 'Failed to fetch dashboard metrics',\n    });\n    return {};\n  }\n}\n\ninterface AlertingRule {\n  id: number;\n  uid: string;\n  title: string;\n  data: Array<{\n    refId: string;\n    queryType: string;\n    datasourceUid: string;\n    model: {\n      expr?: string;\n      expression?: string;\n      type?: string;\n      datasource?: {\n        type: string;\n        uid: string;\n      };\n    };\n  }>;\n}\n\n/**\n * Fetches metric usage data from alerting rules\n * @returns A record mapping metric names to their occurrence count in alerting rules\n */\nexport async function fetchAlertingMetrics(): Promise<Record<string, number>> {\n  try {\n    const alertingRules = await getBackendSrv().get<AlertingRule[]>(\n      '/api/v1/provisioning/alert-rules',\n      undefined,\n      'grafana-metricsdrilldown-app-alert-rule-metric-usage',\n      usageRequestOptions\n    );\n\n    // Create a map to count metric occurrences\n    const metricCounts: Record<string, number> = {};\n\n    // Process each alert rule\n    for (const rule of alertingRules) {\n      if (!rule.data?.length) {\n        continue;\n      }\n\n      // Process each query in the rule\n      for (const query of rule.data) {\n        // Skip non-Prometheus queries or expression queries (like threshold or reduce expressions)\n        if (!query.model || query.datasourceUid === '__expr__') {\n          continue;\n        }\n\n        // Extract expression from the model\n        const expr = query.model.expr;\n        if (!expr || typeof expr !== 'string') {\n          continue;\n        }\n\n        try {\n          // Extract metrics from the PromQL expression\n          const metrics = extractMetricNames(expr);\n\n          // Count each metric occurrence\n          for (const metric of metrics) {\n            if (!metric) {\n              continue;\n            }\n\n            metricCounts[metric] = (metricCounts[metric] || 0) + 1;\n          }\n        } catch (error) {\n          // Log parsing errors but continue processing other expressions\n          logger.warn(error, {\n            message: `Failed to parse PromQL expression in alert rule ${rule.title}`,\n          });\n        }\n      }\n    }\n\n    return metricCounts;\n  } catch (err) {\n    const error = typeof err === 'string' ? new Error(err) : (err as Error);\n    logger.error(error, {\n      message: 'Failed to fetch alerting rules',\n    });\n    // Return empty object when fetch fails\n    return {};\n  }\n}\n/**\n * Extracts all metric names from a PromQL expression\n * @param {string} promqlExpression - The PromQL expression to parse\n * @returns {string[]} An array of unique metric names found in the expression\n */\nexport function extractMetricNames(promqlExpression: string): string[] {\n  const tree = parser.parse(promqlExpression);\n  const metricNames = new Set<string>();\n  const cursor = tree.cursor();\n\n  do {\n    // when we find a VectorSelector...\n    if (cursor.type.is('VectorSelector')) {\n      // go to its first child\n      if (cursor.firstChild()) {\n        do {\n          // look for the Identifier node\n          if (cursor.type.is('Identifier')) {\n            const metricName = promqlExpression.slice(cursor.from, cursor.to);\n            metricNames.add(metricName);\n          }\n        } while (cursor.nextSibling());\n        cursor.parent();\n      }\n    }\n  } while (cursor.next());\n\n  return Array.from(metricNames);\n}\n","import {\n  CustomVariable,\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n  VariableValueSelectors,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n  type VariableValueOption,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { localeCompare } from 'WingmanDataTrail/helpers/localCompare';\n\nimport { EventSortByChanged } from './EventSortByChanged';\nimport { MetricUsageFetcher, type MetricUsageType } from './metricUsageFetcher';\nimport { logger } from '../../../tracking/logger/logger';\nexport type SortingOption = 'default' | 'dashboard-usage' | 'alerting-usage';\n\nconst RECENT_METRICS_STORAGE_KEY = 'metrics-drilldown-recent-metrics/v1';\nconst MAX_RECENT_METRICS = 6;\nconst RECENT_METRICS_EXPIRY_DAYS = 30;\n\ninterface RecentMetric {\n  name: string;\n  timestamp: number;\n}\n\n/**\n * Adds a metric to the recent metrics list in localStorage\n * @param metricName The name of the metric to add\n */\nexport function addRecentMetric(metricName: string): void {\n  try {\n    const recentMetrics = getRecentMetrics();\n    const now = Date.now();\n\n    // Remove the metric if it already exists and add it with new timestamp\n    const filteredMetrics = recentMetrics.filter((m) => m.name !== metricName);\n    filteredMetrics.unshift({ name: metricName, timestamp: now });\n\n    // Keep only the most recent metrics\n    const updatedMetrics = filteredMetrics.slice(0, MAX_RECENT_METRICS);\n    localStorage.setItem(RECENT_METRICS_STORAGE_KEY, JSON.stringify(updatedMetrics));\n  } catch (error) {\n    const errorObject = error instanceof Error ? error : new Error(String(error));\n\n    logger.error(errorObject, {\n      ...(errorObject.cause || {}),\n      metricName,\n    });\n  }\n}\n\n/**\n * Gets the list of recent metrics from localStorage, removing expired ones\n * @returns Array of recent metric names\n */\nexport function getRecentMetrics(): RecentMetric[] {\n  try {\n    const stored = localStorage.getItem(RECENT_METRICS_STORAGE_KEY);\n    if (!stored) {\n      return [];\n    }\n\n    const recentMetrics: RecentMetric[] = JSON.parse(stored);\n    const now = Date.now();\n    const thirtyDaysAgo = now - RECENT_METRICS_EXPIRY_DAYS * 24 * 60 * 60 * 1000;\n\n    // Filter out expired metrics\n    const validMetrics = recentMetrics.filter((metric) => metric.timestamp > thirtyDaysAgo);\n\n    // If any metrics were removed, update storage\n    if (validMetrics.length !== recentMetrics.length) {\n      localStorage.setItem(RECENT_METRICS_STORAGE_KEY, JSON.stringify(validMetrics));\n    }\n\n    return validMetrics;\n  } catch (error) {\n    console.error('Failed to get recent metrics:', error);\n    return [];\n  }\n}\n\ninterface MetricsSorterState extends SceneObjectState {\n  $variables: SceneVariableSet;\n  inputControls: SceneObject;\n}\n\nexport const sortByOptions: VariableValueOption[] = [\n  { label: 'Default', value: 'default' },\n  { label: 'Dashboard Usage', value: 'dashboard-usage' },\n  { label: 'Alerting Usage', value: 'alerting-usage' },\n];\n\nexport const VAR_WINGMAN_SORT_BY = 'metrics-reducer-sort-by';\n\nexport class MetricsSorter extends SceneObjectBase<MetricsSorterState> {\n  initialized = false;\n  supportedSortByOptions = new Set<SortingOption>(['default', 'dashboard-usage', 'alerting-usage']);\n  private usageFetcher = new MetricUsageFetcher();\n\n  constructor(state: Partial<MetricsSorterState>) {\n    super({\n      ...state,\n      key: 'metrics-sorter',\n      $variables: new SceneVariableSet({\n        variables: [\n          new CustomVariable({\n            name: VAR_WINGMAN_SORT_BY,\n            label: 'Sort by',\n            value: 'default',\n            query: sortByOptions.map((option) => `${option.label} : ${option.value}`).join(','),\n            description:\n              'Sort metrics by default (alphabetically, with recently-selected metrics first), by prevalence in dashboard panel queries, or by prevalence in alerting rules',\n          }),\n        ],\n      }),\n      inputControls: new VariableValueSelectors({ layout: 'horizontal' }),\n    });\n\n    this.addActivationHandler(() => this.activationHandler());\n  }\n\n  private activationHandler() {\n    const sortByVar = sceneGraph.getVariables(this).getByName(VAR_WINGMAN_SORT_BY) as CustomVariable;\n\n    if (!this.supportedSortByOptions.has(sortByVar.getValue() as SortingOption)) {\n      // Migration for the old sortBy values\n      sortByVar.changeValueTo('default');\n    }\n\n    this._subs.add(\n      sortByVar.subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          this.publishEvent(new EventSortByChanged({ sortBy: newState.value as SortingOption }), true);\n        }\n      })\n    );\n  }\n\n  public getUsageForMetric(metricName: string, usageType: MetricUsageType): Promise<number> {\n    return this.usageFetcher.getUsageForMetric(metricName, usageType);\n  }\n\n  public getUsageMetrics(usageType: MetricUsageType): Promise<Record<string, number>> {\n    return this.usageFetcher.getUsageMetrics(usageType);\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MetricsSorter>) => {\n    const { inputControls } = model.useState();\n\n    return <inputControls.Component model={inputControls} data-testid=\"sort-by-select\" />;\n  };\n}\n\n/**\n * Sort metrics by an arbitrary count (descending)\n * @param metrics Array of metric names\n * @param counts A record mapping metric names to an arbitrary count\n * @returns Sorted array of metric names\n */\nexport function sortMetricsByCount(metrics: string[], counts: Record<string, number>): string[] {\n  return [...metrics].sort((a, b) => {\n    const scoreA = counts[a] || 0;\n    const scoreB = counts[b] || 0;\n\n    // Primary sort by score (descending)\n    if (scoreB !== scoreA) {\n      return scoreB - scoreA;\n    }\n\n    // Secondary sort alphabetically for metrics with the same score\n    return localeCompare(a, b);\n  });\n}\n\n/**\n * Sort metrics in alphabetical order\n * @param metrics Array of metric names\n * @returns Sorted array of metric names in alphabetical order\n */\nexport function sortMetricsAlphabetically(metrics: string[]): string[] {\n  return [...metrics].sort((a, b) => localeCompare(a, b));\n}\n\n/**\n * Sort metrics with recent metrics first (by recency), then alphabetically\n * @param metrics Array of metric names\n * @returns Sorted array of metric names\n */\nexport function sortMetricsWithRecentFirst(metrics: string[]): string[] {\n  const allRecentMetrics = getRecentMetrics().map((m) => m.name);\n  const allRecentMetricsSet = new Set(allRecentMetrics);\n  const [recent, nonRecent] = metrics.reduce<[string[], string[]]>(\n    ([recent, nonRecent], metric) => {\n      if (allRecentMetricsSet.has(metric)) {\n        recent.push(metric);\n      } else {\n        nonRecent.push(metric);\n      }\n      return [recent, nonRecent];\n    },\n    [[], []]\n  );\n  const sortedNonRecent = sortMetricsAlphabetically(nonRecent);\n  // `recentMetrics` are already sorted by recency, so we just need to filter them\n  const sortedRecent = allRecentMetrics.filter((m) => recent.includes(m));\n\n  return [...sortedRecent, ...sortedNonRecent];\n}\n","import { VariableHide, VariableRefresh, VariableSort } from '@grafana/data';\nimport { QueryVariable, type SceneObjectState } from '@grafana/scenes';\n\nimport { trailDS, VAR_FILTERS } from 'shared';\n\nexport const VAR_METRICS_VARIABLE = 'metrics-wingman';\n\nexport type MetricOptions = Array<{ label: string; value: string }>;\n\ninterface MetricsVariableState extends SceneObjectState {\n  key: string;\n  name?: string;\n  label?: string;\n}\n\nexport class MetricsVariable extends QueryVariable {\n  constructor(state?: MetricsVariableState) {\n    super({\n      key: VAR_METRICS_VARIABLE,\n      name: VAR_METRICS_VARIABLE,\n      label: 'Metrics',\n      ...state,\n      datasource: trailDS,\n      query: `label_values({$${VAR_FILTERS}}, __name__)`,\n      includeAll: true,\n      value: '$__all',\n      skipUrlSync: true,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      sort: VariableSort.alphabeticalAsc,\n      hide: VariableHide.hideVariable,\n    });\n  }\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventMetricsVariableActivatedPayload {\n  key: string;\n}\n\nexport class EventMetricsVariableActivated extends BusEventWithPayload<EventMetricsVariableActivatedPayload> {\n  public static type = 'metrics-variable-activated';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventMetricsVariableDeactivatedPayload {\n  key: string;\n}\n\nexport class EventMetricsVariableDeactivated extends BusEventWithPayload<EventMetricsVariableDeactivatedPayload> {\n  public static type = 'metrics-variable-deactivated';\n}\n","import { BusEventWithPayload } from '@grafana/data';\nimport { type VariableValueOption } from '@grafana/scenes';\n\nexport interface EventMetricsVariableLoadedPayload {\n  key: string;\n  options: VariableValueOption[];\n}\n\nexport class EventMetricsVariableLoaded extends BusEventWithPayload<EventMetricsVariableLoadedPayload> {\n  public static type = 'metrics-variable-loaded';\n}\n","import { type MultiValueVariable, type MultiValueVariableState } from '@grafana/scenes';\n\nimport { EventMetricsVariableActivated } from './EventMetricsVariableActivated';\nimport { EventMetricsVariableDeactivated } from './EventMetricsVariableDeactivated';\nimport { EventMetricsVariableLoaded } from './EventMetricsVariableLoaded';\n\n/**\n * Adds the publication of lifecycle events to a metrics variable:\n *\n * - `EventMetricsVariableActivated`\n * - `EventMetricsVariableDeactivated`\n * - `EventMetricsVariableLoaded`\n *\n * This is particularly useful for filtering and sorting the variable options, while keeping the\n * different pieces of code decoupled.\n *\n * The filtering and sorting logic is centralized in the `MetricsReducer` class.\n */\nexport function withLifecycleEvents<T extends MultiValueVariable>(variable: T): T {\n  const key = variable.state.key as string;\n\n  if (!key) {\n    throw new TypeError(\n      `Variable \"${variable.state.name}\" has no key. Please provide a key in order to publish its lifecycle events.`\n    );\n  }\n\n  variable.addActivationHandler(() => {\n    variable.publishEvent(new EventMetricsVariableActivated({ key }), true);\n\n    variable.subscribeToState((newState: MultiValueVariableState, prevState: MultiValueVariableState) => {\n      if (!newState.loading && prevState.loading) {\n        variable.publishEvent(new EventMetricsVariableLoaded({ key, options: newState.options }), true);\n      }\n    });\n\n    return () => {\n      variable.publishEvent(new EventMetricsVariableDeactivated({ key }), true);\n    };\n  });\n\n  return variable;\n}\n","import { VAR_FILTERS } from 'shared';\nimport { NULL_GROUP_BY_VALUE } from 'WingmanDataTrail/Labels/LabelsDataSource';\n\nimport { MetricsVariable } from './MetricsVariable';\nimport { withLifecycleEvents } from './withLifecycleEvents';\n\nexport const VAR_FILTERED_METRICS_VARIABLE = 'filtered-metrics-wingman';\n\nexport class FilteredMetricsVariable extends MetricsVariable {\n  constructor() {\n    super({\n      key: VAR_FILTERED_METRICS_VARIABLE,\n      name: VAR_FILTERED_METRICS_VARIABLE,\n      label: 'Filtered Metrics',\n    });\n\n    // required for filtering and sorting\n    return withLifecycleEvents<FilteredMetricsVariable>(this);\n  }\n\n  public updateGroupByQuery(groupByValue: string) {\n    const matcher =\n      groupByValue && groupByValue !== NULL_GROUP_BY_VALUE ? `${groupByValue}!=\"\",$${VAR_FILTERS}` : `$${VAR_FILTERS}`;\n\n    const query = `label_values({${matcher}}, __name__)`;\n\n    if (query !== this.state.query) {\n      this.setState({ query });\n      this.refreshOptions();\n    }\n  }\n}\n","import { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Button } from '@grafana/ui';\nimport React from 'react';\n\nimport { MetricSelectedEvent } from 'shared';\n\ninterface SelectActionState extends SceneObjectState {\n  metricName: string;\n  variant: 'primary' | 'secondary';\n  fill: 'solid' | 'outline' | 'text';\n}\n\nexport class SelectAction extends SceneObjectBase<SelectActionState> {\n  constructor({\n    metricName,\n    variant,\n    fill,\n  }: {\n    metricName: SelectActionState['metricName'];\n    variant?: SelectActionState['variant'];\n    fill?: SelectActionState['fill'];\n  }) {\n    super({\n      key: `select-action-${metricName}`,\n      metricName,\n      variant: variant || 'primary',\n      fill: fill || 'outline',\n    });\n  }\n\n  public onClick = () => {\n    this.publishEvent(new MetricSelectedEvent(this.state.metricName), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SelectAction>) => {\n    const { variant, fill } = model.useState();\n\n    return (\n      <Button\n        variant={variant}\n        fill={fill}\n        size=\"sm\"\n        onClick={model.onClick}\n        data-testid={`select-action-${model.state.metricName}`}\n      >\n        Select\n      </Button>\n    );\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase } from '@grafana/scenes';\nimport { Badge, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nexport class NativeHistogramBadge extends SceneObjectBase {\n  public static Component = () => {\n    const styles = useStyles2(getStyles);\n    return <Badge className={styles.badge} color=\"blue\" text=\"Native Histogram\" />;\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    badge: css({\n      borderRadius: theme.shape.radius.pill,\n      border: `1px solid ${theme.colors.info.text}`,\n      background: theme.colors.info.transparent,\n      cursor: 'auto',\n      width: '112px',\n      padding: '0rem 0.25rem 0 0.35rem',\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { FieldMatcherID, LoadingState, type GrafanaTheme2 } from '@grafana/data';\nimport {\n  SceneObjectBase,\n  SceneQueryRunner,\n  type SceneComponentProps,\n  type SceneDataQuery,\n  type SceneObject,\n  type SceneObjectState,\n  type VizPanel,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { buildPrometheusQuery, getPromqlFunction, type NonRateQueryFunction } from 'autoQuery/buildPrometheusQuery';\nimport { getUnit } from 'autoQuery/units';\nimport { trailDS } from 'shared';\n\nimport { type PrometheusFn } from './actions/ConfigureAction';\nimport { SelectAction } from './actions/SelectAction';\nimport { NativeHistogramBadge } from './NativeHistogramBadge';\nimport { buildHeatmapPanel } from './panels/buildHeatmapPanel';\nimport { buildStatusHistoryPanel } from './panels/buildStatusHistoryPanel';\nimport { buildTimeseriesPanel } from './panels/buildTimeseriesPanel';\n\ninterface MetricVizPanelProps {\n  metricName: string;\n  color: string;\n  headerActions?: SceneObject[];\n  height?: string;\n  hideLegend?: boolean;\n  highlight?: boolean;\n  isNativeHistogram: boolean;\n  matchers?: string[];\n  prometheusFunction?: PrometheusFn;\n  title?: string;\n}\n\ninterface MetricVizPanelState\n  extends SceneObjectState,\n    Pick<Required<MetricVizPanelProps>, 'height' | 'highlight' | 'prometheusFunction'> {\n  body: VizPanel;\n}\n\nexport const METRICS_VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW = '240px';\nexport const METRICS_VIZ_PANEL_HEIGHT = '200px';\nexport const METRICS_VIZ_PANEL_HEIGHT_SMALL = '160px';\nconst rateQueryMetricSuffixes = new Set(['count', 'total', 'sum', 'bucket']);\n\nexport class MetricVizPanel extends SceneObjectBase<MetricVizPanelState> {\n  private static readonly MAX_DATA_POINTS = 250;\n\n  constructor(props: MetricVizPanelProps) {\n    const { isRateQuery } = MetricVizPanel.determineQueryProperties(props.metricName, props.isNativeHistogram);\n    const stateWithDefaults = {\n      ...props,\n      prometheusFunction: props.prometheusFunction ?? (getPromqlFunction(isRateQuery) as PrometheusFn),\n      isNativeHistogram: props.isNativeHistogram,\n      matchers: props.matchers || [],\n      title: props.title || props.metricName,\n      height: props.height || METRICS_VIZ_PANEL_HEIGHT,\n      hideLegend: Boolean(props.hideLegend),\n      highlight: Boolean(props.highlight),\n      headerActions: [\n        ...(props.isNativeHistogram ? [new NativeHistogramBadge({})] : []),\n        ...(props.headerActions || [new SelectAction({ metricName: props.metricName })]),\n      ],\n    };\n\n    super({\n      key: `metric-viz-panel-${stateWithDefaults.metricName}`,\n      ...stateWithDefaults,\n      body: MetricVizPanel.buildVizPanel({\n        ...stateWithDefaults,\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const { body, prometheusFunction } = this.state;\n\n    this._subs.add(\n      (body.state.$data as SceneQueryRunner).subscribeToState((newState) => {\n        if (newState.data?.state !== LoadingState.Done) {\n          return;\n        }\n\n        const { series } = newState.data;\n\n        if (series?.length) {\n          body.setState({\n            fieldConfig: {\n              defaults: body.state.fieldConfig.defaults,\n              overrides: [\n                {\n                  matcher: { id: FieldMatcherID.byFrameRefID, options: series[0].refId },\n                  properties: [\n                    {\n                      id: 'displayName',\n                      value: prometheusFunction,\n                    },\n                  ],\n                },\n              ],\n            },\n          });\n        }\n      })\n    );\n  }\n\n  private static buildVizPanel({\n    metricName,\n    title,\n    highlight,\n    color,\n    hideLegend,\n    prometheusFunction,\n    matchers,\n    headerActions,\n    isNativeHistogram = false,\n  }: Required<Omit<MetricVizPanelProps, 'prometheusFunction'>> & {\n    prometheusFunction?: MetricVizPanelProps['prometheusFunction'];\n  }) {\n    const panelTitle = highlight ? `${title} (current)` : title;\n    const unit = getUnit(metricName);\n\n    // check if metric is a histogram (either classic or native)\n    const isHistogram = metricName.endsWith('_bucket') || isNativeHistogram;\n\n    const isUptime = metricName === 'up' || metricName.endsWith('_up');\n    if (isUptime) {\n      // For uptime metrics, use a status history panel which is better for binary states\n      return buildStatusHistoryPanel({\n        panelTitle,\n        headerActions,\n        // TODO: custom uptime query runner to prevent if/else in buildPrometheusQuery() (see below)\n        queryRunner: MetricVizPanel.buildQueryRunner({\n          metricName,\n          matchers,\n          prometheusFunction: 'min',\n          isHistogram,\n        }),\n      })\n        .setUnit(unit) // Set the appropriate unit for status history panel as well\n        .build();\n    }\n\n    if (isHistogram) {\n      return buildHeatmapPanel({\n        panelTitle,\n        color,\n        headerActions,\n        hideLegend,\n        queryRunner: MetricVizPanel.buildQueryRunner({\n          metricName,\n          matchers,\n          prometheusFunction: 'rate',\n          isHistogram,\n          queryOptions: {\n            format: 'heatmap',\n          },\n        }),\n      })\n        .setUnit(unit)\n        .build();\n    }\n\n    // Default settings for non-uptime metrics - use timeseries\n    return buildTimeseriesPanel({\n      panelTitle,\n      headerActions,\n      color,\n      hideLegend,\n      queryRunner: MetricVizPanel.buildQueryRunner({\n        metricName,\n        matchers,\n        prometheusFunction,\n        isHistogram,\n      }),\n    })\n      .setUnit(unit) // Set the appropriate unit\n      .build();\n  }\n\n  private static buildQueryRunner({\n    metricName,\n    matchers,\n    isHistogram,\n    prometheusFunction,\n    queryOptions = {},\n  }: {\n    metricName: string;\n    matchers: string[];\n    isHistogram: boolean;\n    prometheusFunction?: PrometheusFn;\n    queryOptions?: Partial<SceneDataQuery>;\n  }): SceneQueryRunner {\n    const filters = matchers.map((matcher) => {\n      const [key, value] = matcher.split('=');\n      return {\n        key,\n        value: value.replace(/['\"]/g, ''),\n        operator: '=',\n      };\n    });\n    const { isRateQuery, groupings } = MetricVizPanel.determineQueryProperties(metricName, isHistogram);\n    const expr = buildPrometheusQuery({\n      metric: metricName,\n      filters,\n      isRateQuery,\n      useOtelJoin: false,\n      ignoreUsage: true,\n      groupings,\n      ...(prometheusFunction ? { nonRateQueryFunction: prometheusFunction as NonRateQueryFunction } : {}),\n    });\n\n    return new SceneQueryRunner({\n      datasource: trailDS,\n      maxDataPoints: MetricVizPanel.MAX_DATA_POINTS,\n      queries: [\n        {\n          ...queryOptions,\n          refId: metricName,\n          expr,\n          fromExploreMetrics: true,\n        },\n      ],\n    });\n  }\n\n  static determineQueryProperties(metricName: string, isHistogram: boolean) {\n    const parts = metricName.split('_');\n    const suffix = parts.at(-1);\n\n    // Determine if this is a rate query based on metric suffix\n    const isRateQuery = rateQueryMetricSuffixes.has(suffix || '');\n\n    // Determine groupings based on metric suffix and native histogram status\n    let groupings: string[] | undefined;\n\n    if (isHistogram) {\n      groupings = ['le'];\n    }\n\n    return { isRateQuery, groupings };\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MetricVizPanel>) => {\n    const { body, height, highlight } = model.useState();\n    const styles = useStyles2(getStyles, height);\n\n    return (\n      <div className={cx(styles.container, highlight && styles.highlight)}>\n        {body && <body.Component model={body} />}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2, height: string) {\n  return {\n    container: css({\n      height,\n    }),\n    highlight: css({\n      border: `2px solid ${theme.colors.primary.main}`,\n    }),\n  };\n}\n","import { PanelBuilders, type SceneObject, type SceneQueryRunner } from '@grafana/scenes';\nimport { MappingType, ThresholdsMode, VisibilityMode } from '@grafana/schema';\n\ninterface PanelProps {\n  panelTitle: string;\n  headerActions: SceneObject[];\n  queryRunner: SceneQueryRunner;\n}\n\nexport function buildStatusHistoryPanel({ panelTitle, headerActions, queryRunner }: PanelProps) {\n  queryRunner.setState({ maxDataPoints: 100 });\n\n  return (\n    PanelBuilders.statushistory()\n      .setTitle(panelTitle)\n      // we clone to prevent Scenes warnings \"SceneObject already has a parent set that is different from the new parent. You cannot share the same SceneObject instance in multiple scenes or in multiple different places of the same scene graph. Use SceneObject.clone() to duplicate a SceneObject or store a state key reference and use sceneGraph.findObject to locate it.\"\n      .setHeaderActions(headerActions.map((action) => action.clone()))\n      .setData(queryRunner)\n      .setColor({ mode: 'thresholds' }) // Set color mode to enable threshold coloring\n      .setMappings([\n        {\n          type: MappingType.ValueToText,\n          options: {\n            '0': {\n              color: 'red',\n              text: 'down',\n            },\n            '1': {\n              color: 'green',\n              text: 'up',\n            },\n          },\n        },\n      ])\n      .setThresholds({\n        mode: ThresholdsMode.Absolute,\n        steps: [\n          { value: 0, color: 'red' },\n          { value: 1, color: 'green' },\n        ],\n      })\n      // Hide the threshold annotations\n      .setOption('legend', { showLegend: false })\n      .setOption('showValue', VisibilityMode.Never)\n  );\n}\n","import { PanelBuilders, type SceneObject, type SceneQueryRunner } from '@grafana/scenes';\nimport { HeatmapColorMode } from '@grafana/schema/dist/esm/raw/composable/heatmap/panelcfg/x/HeatmapPanelCfg_types.gen';\n\ninterface PanelProps {\n  panelTitle: string;\n  color: string;\n  queryRunner: SceneQueryRunner;\n  hideLegend: boolean;\n  headerActions: SceneObject[];\n}\n\nexport function buildHeatmapPanel({ panelTitle, queryRunner, color, headerActions, hideLegend }: PanelProps) {\n  return (\n    PanelBuilders.heatmap()\n      .setTitle(panelTitle)\n      .setData(queryRunner)\n      .setOption('calculate', false)\n      .setOption('color', {\n        mode: HeatmapColorMode.Scheme,\n        exponent: 0.5,\n        scheme: 'Spectral',\n        steps: 32,\n        reverse: false,\n      })\n      // we clone to prevent Scenes warnings \"SceneObject already has a parent set that is different from the new parent. You cannot share the same SceneObject instance in multiple scenes or in multiple different places of the same scene graph. Use SceneObject.clone() to duplicate a SceneObject or store a state key reference and use sceneGraph.findObject to locate it.\"\n      .setHeaderActions(headerActions.map((action) => action.clone()))\n      .setOption('legend', { show: !hideLegend })\n  );\n}\n","import { PanelBuilders, type SceneObject, type SceneQueryRunner } from '@grafana/scenes';\n\ninterface PanelProps {\n  panelTitle: string;\n  color: string;\n  queryRunner: SceneQueryRunner;\n  hideLegend: boolean;\n  headerActions: SceneObject[];\n}\n\nexport function buildTimeseriesPanel({ panelTitle, queryRunner, color, headerActions, hideLegend }: PanelProps) {\n  return (\n    PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setData(queryRunner)\n      .setColor({ mode: 'fixed', fixedColor: color })\n      .setCustomFieldConfig('fillOpacity', 9)\n      // we clone to prevent Scenes warnings \"SceneObject already has a parent set that is different from the new parent. You cannot share the same SceneObject instance in multiple scenes or in multiple different places of the same scene graph. Use SceneObject.clone() to duplicate a SceneObject or store a state key reference and use sceneGraph.findObject to locate it.\"\n      .setHeaderActions(headerActions.map((action) => action.clone()))\n      .setOption('legend', { showLegend: !hideLegend })\n  );\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { Icon, Tooltip, useStyles2, type IconName } from '@grafana/ui';\nimport React from 'react';\n\nimport { isCustomVariable } from 'utils/utils.variables';\nimport {\n  MetricsSorter,\n  VAR_WINGMAN_SORT_BY,\n  type SortingOption,\n} from 'WingmanDataTrail/ListControls/MetricsSorter/MetricsSorter';\nimport { type MetricUsageType } from 'WingmanDataTrail/ListControls/MetricsSorter/metricUsageFetcher';\nimport { MetricsReducer } from 'WingmanDataTrail/MetricsReducer';\nimport { VAR_FILTERED_METRICS_VARIABLE } from 'WingmanDataTrail/MetricsVariables/FilteredMetricsVariable';\nimport {\n  METRICS_VIZ_PANEL_HEIGHT,\n  METRICS_VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW,\n  type MetricVizPanel,\n} from 'WingmanDataTrail/MetricVizPanel/MetricVizPanel';\n\ntype WithUsageDataPreviewPanelState = SceneObjectState & {\n  [key in MetricUsageType]: number;\n} & {\n  vizPanelInGridItem: MetricVizPanel;\n  metric: string;\n  sortBy: SortingOption;\n};\n\nexport class WithUsageDataPreviewPanel extends SceneObjectBase<WithUsageDataPreviewPanelState> {\n  constructor(state: Pick<WithUsageDataPreviewPanelState, 'vizPanelInGridItem' | 'metric'>) {\n    super({\n      ...state,\n      sortBy: 'default',\n      'alerting-usage': 0,\n      'dashboard-usage': 0,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    const metricsReducer = sceneGraph.getAncestor(this, MetricsReducer);\n    const filteredMetricsEngine = metricsReducer.state.enginesMap.get(VAR_FILTERED_METRICS_VARIABLE);\n    if (!filteredMetricsEngine) {\n      return;\n    }\n    const metricsSorter = sceneGraph.findByKeyAndType(this, 'metrics-sorter', MetricsSorter);\n    const sortByVar = sceneGraph.getVariables(metricsSorter).getByName(VAR_WINGMAN_SORT_BY);\n\n    if (isCustomVariable(sortByVar)) {\n      this.updateSortBy(metricsSorter, sortByVar.getValue() as SortingOption);\n      this._subs.add(\n        sortByVar.subscribeToState(({ value }) => {\n          this.updateSortBy(metricsSorter, value as SortingOption);\n        })\n      );\n    }\n  }\n  private updateSortBy(metricsSorter: MetricsSorter, sortBy: SortingOption) {\n    this.setState({ sortBy });\n    const gridLayout = sceneGraph.getAncestor(this, SceneCSSGridLayout);\n    const currentGridLayoutHeight = gridLayout?.state.autoRows;\n\n    switch (sortBy) {\n      case 'dashboard-usage':\n      case 'alerting-usage':\n        metricsSorter.getUsageForMetric(this.state.metric, sortBy).then((usage) => {\n          this.setState({\n            [sortBy]: usage,\n          });\n        });\n        if (currentGridLayoutHeight !== METRICS_VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW) {\n          gridLayout.setState({ autoRows: METRICS_VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW });\n        }\n        break;\n      default:\n        if (currentGridLayoutHeight !== METRICS_VIZ_PANEL_HEIGHT) {\n          gridLayout.setState({ autoRows: METRICS_VIZ_PANEL_HEIGHT });\n        }\n        break;\n    }\n  }\n\n  public static Component = ({ model }: SceneComponentProps<WithUsageDataPreviewPanel>) => {\n    const {\n      vizPanelInGridItem,\n      sortBy,\n      'alerting-usage': metricUsedInAlertingRulesCount,\n      'dashboard-usage': metricUsedInDashboardsCount,\n    } = model.useState();\n    if (!vizPanelInGridItem) {\n      console.log('no viz panel');\n      return;\n    }\n\n    const styles = useStyles2(getStyles);\n\n    if (sortBy === 'default') {\n      return (\n        <div className={styles.panelContainer} data-testid=\"with-usage-data-preview-panel\">\n          <vizPanelInGridItem.Component model={vizPanelInGridItem} />\n        </div>\n      );\n    }\n    const usageDetails: Record<MetricUsageType, Omit<UsageSectionProps, 'usageType'>> = {\n      'dashboard-usage': {\n        usageCount: metricUsedInDashboardsCount,\n        singularUsageType: 'dashboard panel query',\n        pluralUsageType: 'dashboard panel queries',\n        icon: 'apps',\n      },\n      'alerting-usage': {\n        usageCount: metricUsedInAlertingRulesCount,\n        singularUsageType: 'alert rule',\n        pluralUsageType: 'alert rules',\n        icon: 'bell',\n      },\n    };\n\n    return (\n      <div className={styles.panelContainer} data-testid=\"with-usage-data-preview-panel\">\n        <vizPanelInGridItem.Component model={vizPanelInGridItem} />\n        <UsageData\n          usageType={sortBy}\n          usageCount={usageDetails[sortBy].usageCount}\n          singularUsageType={usageDetails[sortBy].singularUsageType}\n          pluralUsageType={usageDetails[sortBy].pluralUsageType}\n          icon={usageDetails[sortBy].icon as IconName}\n        />\n      </div>\n    );\n  };\n}\n\ninterface UsageSectionProps {\n  usageType: MetricUsageType;\n  usageCount: number;\n  singularUsageType: string;\n  pluralUsageType: string;\n  icon: IconName;\n}\n\nfunction UsageData({ usageType, usageCount, singularUsageType, pluralUsageType, icon }: UsageSectionProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.usageContainer} data-testid=\"usage-data-panel\">\n      <Tooltip\n        content={`Metric is used in ${usageCount} ${usageCount === 1 ? singularUsageType : pluralUsageType}`}\n        placement=\"top\"\n      >\n        <span className={styles.usageItem} data-testid={usageType}>\n          <Icon name={icon} /> {usageCount}\n        </span>\n      </Tooltip>\n    </div>\n  );\n}\nexport function getStyles(theme: GrafanaTheme2) {\n  return {\n    panelContainer: css({\n      // height: '175px',\n    }),\n    usageContainer: css({\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      gap: '17px',\n      padding: '8px 12px',\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderTopWidth: 0,\n      backgroundColor: theme.colors.background.primary,\n      alignItems: 'center',\n    }),\n    usageItem: css({\n      display: 'flex',\n      alignItems: 'center',\n      gap: '4px',\n      color: theme.colors.text.secondary,\n      opacity: '65%',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { VariableHide, VariableRefresh, type GrafanaTheme2 } from '@grafana/data';\nimport {\n  QueryVariable,\n  sceneGraph,\n  type DataSourceVariable,\n  type MultiValueVariable,\n  type SceneComponentProps,\n} from '@grafana/scenes';\nimport { Label, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { VAR_DATASOURCE, VAR_FILTERS_EXPR } from 'shared';\nimport {\n  VAR_FILTERED_METRICS_VARIABLE,\n  type FilteredMetricsVariable,\n} from 'WingmanDataTrail/MetricsVariables/FilteredMetricsVariable';\n\nimport { LabelsDataSource, NULL_GROUP_BY_VALUE } from './LabelsDataSource';\n\nexport const VAR_WINGMAN_GROUP_BY = 'labelsWingman';\n\nexport class LabelsVariable extends QueryVariable {\n  constructor() {\n    super({\n      name: VAR_WINGMAN_GROUP_BY,\n      label: 'Group by label',\n      placeholder: 'Group by label...',\n      datasource: { uid: LabelsDataSource.uid },\n      query: '',\n      includeAll: false,\n      isMulti: false,\n      allowCustomValue: false,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      hide: VariableHide.hideVariable,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const filteredMetricsVariable = sceneGraph.lookupVariable(\n      VAR_FILTERED_METRICS_VARIABLE,\n      this\n    ) as FilteredMetricsVariable;\n\n    // TODO: publish event instead?\n    filteredMetricsVariable.updateGroupByQuery(this.state.value as string);\n\n    this._subs.add(\n      this.subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          filteredMetricsVariable.updateGroupByQuery(this.state.value as string);\n        }\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToState((newState, prevState) => {\n        if (newState.query !== prevState.query) {\n          // preserve the value from the URL search param when landing\n          if (prevState.query) {\n            this.setState({ value: NULL_GROUP_BY_VALUE });\n          }\n\n          this.refreshOptions();\n        }\n      })\n    );\n\n    this._subs.add(\n      (sceneGraph.findByKey(this, VAR_DATASOURCE) as DataSourceVariable).subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          this.setState({ value: NULL_GROUP_BY_VALUE });\n          this.refreshOptions();\n        }\n      })\n    );\n\n    // hack to ensure that labels are loaded when landing: sometimes filters are not interpolated and fetching labels give no results\n    const filterExpression = sceneGraph.interpolate(this, VAR_FILTERS_EXPR, {});\n    this.setState({ query: `{__name__=~\".+\",${filterExpression}}` });\n  }\n\n  static Component = ({ model }: SceneComponentProps<MultiValueVariable>) => {\n    const styles = useStyles2(getStyles);\n    const { label } = model.useState();\n\n    return (\n      <div className={styles.container}>\n        <Label className={styles.label}>{label}</Label>\n        <QueryVariable.Component model={model} />\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    align-items: center;\n    gap: 0;\n\n    [class*='input-wrapper'] {\n      width: 240px;\n    }\n  `,\n  label: css`\n    height: 32px;\n    white-space: nowrap;\n    margin: 0;\n    background-color: ${theme.colors.background.primary};\n    padding: ${theme.spacing(1)};\n    border-radius: ${theme.shape.radius.default};\n    border: 1px solid ${theme.colors.border.weak};\n    border-right: none;\n  `,\n});\n","import {\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  type SceneComponentProps,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport React from 'react';\n\nexport enum LayoutType {\n  GRID = 'grid',\n  ROWS = 'rows',\n}\n\nexport interface LayoutSwitcherState extends SceneObjectState {\n  layout: LayoutType;\n  onChange?: (layout: LayoutType) => void;\n}\n\nexport class LayoutSwitcher extends SceneObjectBase<LayoutSwitcherState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['layout'] });\n\n  static OPTIONS = [\n    { label: 'Grid', value: LayoutType.GRID },\n    { label: 'Rows', value: LayoutType.ROWS },\n  ];\n\n  static DEFAULT_LAYOUT = LayoutType.GRID;\n\n  constructor() {\n    super({\n      key: 'layout-switcher',\n      layout: LayoutSwitcher.DEFAULT_LAYOUT,\n    });\n  }\n\n  getUrlState() {\n    return {\n      layout: this.state.layout,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<LayoutSwitcherState> = {};\n\n    if (typeof values.layout === 'string' && values.layout !== this.state.layout) {\n      stateUpdate.layout = Object.values(LayoutType).includes(values.layout as LayoutType)\n        ? (values.layout as LayoutType)\n        : LayoutSwitcher.DEFAULT_LAYOUT;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  onChange = (layout: LayoutType) => {\n    this.setState({ layout });\n  };\n\n  static Component = ({ model }: SceneComponentProps<LayoutSwitcher>) => {\n    const { layout } = model.useState();\n\n    return (\n      <RadioButtonGroup\n        aria-label=\"Layout switcher\"\n        options={LayoutSwitcher.OPTIONS}\n        value={layout}\n        onChange={model.onChange}\n        fullWidth={false}\n      />\n    );\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  behaviors,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneReactObject,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { DashboardCursorSync } from '@grafana/schema';\nimport { Button, Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { InlineBanner } from 'App/InlineBanner';\nimport { WithUsageDataPreviewPanel } from 'MetricSelect/WithUsageDataPreviewPanel';\nimport { VAR_FILTERS } from 'shared';\nimport { getColorByIndex, getTrailFor } from 'utils';\nimport { isAdHocFiltersVariable } from 'utils/utils.variables';\nimport { LayoutSwitcher, LayoutType, type LayoutSwitcherState } from 'WingmanDataTrail/ListControls/LayoutSwitcher';\nimport {\n  VAR_FILTERED_METRICS_VARIABLE,\n  type FilteredMetricsVariable,\n} from 'WingmanDataTrail/MetricsVariables/FilteredMetricsVariable';\nimport {\n  METRICS_VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW,\n  MetricVizPanel,\n} from 'WingmanDataTrail/MetricVizPanel/MetricVizPanel';\nimport { SceneByVariableRepeater } from 'WingmanDataTrail/SceneByVariableRepeater/SceneByVariableRepeater';\n\nexport const GRID_TEMPLATE_COLUMNS = 'repeat(auto-fit, minmax(400px, 1fr))';\nexport const GRID_TEMPLATE_ROWS = '1fr';\n\ninterface SimpleMetricsListState extends SceneObjectState {\n  body: SceneByVariableRepeater;\n}\n\nexport class SimpleMetricsList extends SceneObjectBase<SimpleMetricsListState> {\n  constructor() {\n    super({\n      key: 'simple-metrics-list',\n      body: new SceneByVariableRepeater({\n        variableName: VAR_FILTERED_METRICS_VARIABLE,\n        initialPageSize: 120,\n        pageSizeIncrement: 9,\n        body: new SceneCSSGridLayout({\n          children: [],\n          isLazy: true,\n          templateColumns: GRID_TEMPLATE_COLUMNS,\n          autoRows: METRICS_VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW,\n          $behaviors: [\n            new behaviors.CursorSync({\n              key: 'metricCrosshairSync',\n              sync: DashboardCursorSync.Crosshair,\n            }),\n          ],\n        }),\n        getLayoutLoading: () =>\n          new SceneReactObject({\n            reactNode: <Spinner inline />,\n          }),\n        getLayoutEmpty: () =>\n          new SceneReactObject({\n            reactNode: (\n              <InlineBanner title=\"\" severity=\"info\">\n                No metrics found for the current filters and time range.\n              </InlineBanner>\n            ),\n          }),\n        getLayoutError: (error: Error) =>\n          new SceneReactObject({\n            reactNode: <InlineBanner severity=\"error\" title=\"Error while loading metrics!\" error={error} />,\n          }),\n        getLayoutChild: (option, colorIndex) => {\n          const trail = getTrailFor(this);\n          const isNativeHistogram = trail.isNativeHistogram(option.value as string);\n\n          // get the VAR_FILTERS variable to pass in the correct matchers for the functions\n          const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, this);\n\n          const matchers = isAdHocFiltersVariable(filtersVariable)\n            ? filtersVariable.state.filters.map((filter) => `${filter.key}${filter.operator}${filter.value}`)\n            : [];\n\n          return new SceneCSSGridItem({\n            body: new WithUsageDataPreviewPanel({\n              vizPanelInGridItem: new MetricVizPanel({\n                metricName: option.value as string,\n                color: getColorByIndex(colorIndex),\n                isNativeHistogram,\n                matchers,\n              }),\n              metric: option.value as string,\n            }),\n          });\n        },\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.subscribeToLayoutChange();\n  }\n\n  private subscribeToLayoutChange() {\n    const layoutSwitcher = sceneGraph.findByKeyAndType(this, 'layout-switcher', LayoutSwitcher);\n    const body = this.state.body.state.body as SceneCSSGridLayout;\n\n    const onChangeState = (newState: LayoutSwitcherState, prevState?: LayoutSwitcherState) => {\n      if (newState.layout !== prevState?.layout) {\n        body.setState({\n          templateColumns: newState.layout === LayoutType.ROWS ? GRID_TEMPLATE_ROWS : GRID_TEMPLATE_COLUMNS,\n        });\n      }\n    };\n\n    onChangeState(layoutSwitcher.state); // ensure layout when landing on the page\n\n    this._subs.add(layoutSwitcher.subscribeToState(onChangeState));\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SimpleMetricsList>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    const variable = sceneGraph.lookupVariable(VAR_FILTERED_METRICS_VARIABLE, model) as FilteredMetricsVariable;\n    const { loading, error } = variable.useState();\n\n    const batchSizes = body.useSizes();\n    const shouldDisplayShowMoreButton =\n      !loading && !error && batchSizes.total > 0 && batchSizes.current < batchSizes.total;\n\n    const onClickShowMore = () => {\n      body.increaseBatchSize();\n    };\n\n    return (\n      <div data-testid=\"metrics-list\">\n        <div className={styles.container}>\n          <body.Component model={body} />\n        </div>\n        {shouldDisplayShowMoreButton && (\n          <div className={styles.footer}>\n            <Button variant=\"secondary\" fill=\"outline\" onClick={onClickShowMore}>\n              Show {batchSizes.increment} more metrics ({batchSizes.current}/{batchSizes.total})\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({}),\n    footer: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: theme.spacing(4),\n\n      '& button': {\n        height: '40px',\n        borderRadius: '8px',\n      },\n    }),\n  };\n}\n","import React from 'react';\n\nexport function GroupsIcon() {\n  return (\n    <svg stroke=\"currentColor\" width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\">\n      <circle cx=\"8.92688\" cy=\"3.63132\" r=\"2.375\" strokeWidth=\"1.5\" />\n      <path d=\"M13.6469 4.37965C14.6813 4.76699 15.3235 7.03139 14.9362 8.06582\" strokeWidth=\"1.5\" />\n      <path d=\"M4.35309 4.37965C3.31866 4.76699 2.67651 7.03139 3.06384 8.06582\" strokeWidth=\"1.5\" />\n      <path d=\"M10.3408 14.2531C9.75237 14.8415 8.11813 14.7799 7.50903 14.1708\" strokeWidth=\"1.5\" />\n      <circle cx=\"4.00195\" cy=\"12.251\" r=\"2.375\" strokeWidth=\"1.5\" />\n      <circle cx=\"13.8478\" cy=\"12.251\" r=\"2.375\" strokeWidth=\"1.5\" />\n    </svg>\n  );\n}\n","import {\n  FieldType,\n  LoadingState,\n  type DataQueryRequest,\n  type DataQueryResponse,\n  type DataSourceApi,\n  type LegacyMetricFindQueryOptions,\n  type MetricFindValue,\n  type TestDataSourceResponse,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { RuntimeDataSource, sceneGraph, type DataSourceVariable, type SceneObject } from '@grafana/scenes';\n\nimport { MetricDatasourceHelper } from 'helpers/MetricDatasourceHelper';\nimport { VAR_DATASOURCE } from 'shared';\nimport { isPrometheusRule } from 'WingmanDataTrail/helpers/isPrometheusRule';\n\nimport type { PrometheusDatasource } from '@grafana/prometheus';\n\nexport const NULL_GROUP_BY_VALUE = '(none)';\n\nexport class MetricsWithLabelValueDataSource extends RuntimeDataSource {\n  static uid = 'grafana-prometheus-metrics-with-label-values-datasource';\n\n  constructor() {\n    super(MetricsWithLabelValueDataSource.uid, MetricsWithLabelValueDataSource.uid);\n  }\n\n  async query(request: DataQueryRequest): Promise<DataQueryResponse> {\n    return {\n      state: LoadingState.Done,\n      data: [\n        {\n          name: 'Labels',\n          fields: [\n            {\n              name: null,\n              type: FieldType.other,\n              values: [],\n              config: {},\n            },\n          ],\n          length: 0,\n        },\n      ],\n    };\n  }\n\n  async metricFindQuery(query: string, options: LegacyMetricFindQueryOptions): Promise<MetricFindValue[]> {\n    const sceneObject = options.scopedVars?.__sceneObject?.valueOf() as SceneObject;\n\n    const ds = (await MetricsWithLabelValueDataSource.getPrometheusDataSource(sceneObject)) as PrometheusDatasource;\n    if (!ds) {\n      return [];\n    }\n\n    const timeRange = sceneGraph.getTimeRange(sceneObject).state.value;\n    let metricsList: string[] = [];\n\n    const removeRules = query.startsWith('removeRules');\n    const matcher = removeRules ? query.replace('removeRules', '') : query;\n\n    if (MetricDatasourceHelper.datasourceUsesTimeRangeInLanguageProviderMethods(ds)) {\n      // @ts-expect-error: Ignoring type error due to breaking change in fetchSeriesValuesWithMatch signature\n      metricsList = await ds.languageProvider.fetchSeriesValuesWithMatch(timeRange, '__name__', matcher);\n    } else {\n      metricsList = await ds.languageProvider.fetchSeriesValuesWithMatch('__name__', matcher);\n    }\n\n    if (removeRules) {\n      metricsList = metricsList.filter((metricName) => !isPrometheusRule(metricName));\n    }\n\n    return metricsList.map((metricName) => ({ value: metricName, text: metricName }));\n  }\n\n  static async getPrometheusDataSource(sceneObject: SceneObject): Promise<DataSourceApi | undefined> {\n    try {\n      const dsVariable = sceneGraph.findByKey(sceneObject, VAR_DATASOURCE) as DataSourceVariable;\n      const uid = (dsVariable?.state.value as string) ?? '';\n\n      return await getDataSourceSrv().get({ uid });\n    } catch (error) {\n      console.error('Error getting Prometheus data source!');\n      console.error(error);\n\n      return undefined;\n    }\n  }\n\n  async testDatasource(): Promise<TestDataSourceResponse> {\n    return {\n      status: 'success',\n      message: 'OK',\n    };\n  }\n}\n","export const isPrometheusRule = (metricName: string) =>\n  metricName === 'ALERTS' || metricName === 'ALERTS_FOR_STATE' || metricName.includes(':');\n","import { VariableHide, VariableRefresh } from '@grafana/data';\nimport { QueryVariable, sceneGraph } from '@grafana/scenes';\n\nimport { VAR_FILTERS, VAR_FILTERS_EXPR } from 'shared';\nimport { withLifecycleEvents } from 'WingmanDataTrail/MetricsVariables/withLifecycleEvents';\n\nimport { MetricsWithLabelValueDataSource } from './MetricsWithLabelValueDataSource';\n\nexport const VAR_METRIC_WITH_LABEL_VALUE = 'metrics-with-label-value';\n\nexport class MetricsWithLabelValueVariable extends QueryVariable {\n  constructor({\n    labelName,\n    labelValue,\n    removeRules,\n  }: {\n    labelName: string;\n    labelValue: string;\n    removeRules?: boolean;\n  }) {\n    super({\n      key: `${VAR_METRIC_WITH_LABEL_VALUE}-${labelName}-${labelValue}`,\n      name: VAR_METRIC_WITH_LABEL_VALUE,\n      datasource: { uid: MetricsWithLabelValueDataSource.uid },\n      query: MetricsWithLabelValueVariable.buildQuery(labelName, labelValue, removeRules),\n      isMulti: false,\n      allowCustomValue: false,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      hide: VariableHide.hideVariable,\n      skipUrlSync: true,\n      // BOTH \"value\" and \"includeAll\" below ensure the repetition in SceneByVariableRepeater\n      // // (if not set, it'll render only the 1st variable option)\n      value: '$__all',\n      includeAll: true,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, labelName, labelValue, removeRules));\n\n    // required for filtering and sorting\n    return withLifecycleEvents<MetricsWithLabelValueVariable>(this);\n  }\n\n  protected onActivate(labelName: string, labelValue: string, removeRules?: boolean) {\n    const adHocFiltersVariable = sceneGraph.lookupVariable(VAR_FILTERS, this);\n\n    if (adHocFiltersVariable?.state.hide !== VariableHide.hideVariable) {\n      this.setState({\n        query: MetricsWithLabelValueVariable.buildQuery(labelName, labelValue, removeRules),\n      });\n    }\n  }\n\n  private static buildQuery(labelName: string, labelValue: string, removeRules?: boolean) {\n    return removeRules\n      ? `removeRules{${labelName}=\"${labelValue}\",${VAR_FILTERS_EXPR}}`\n      : `{${labelName}=\"${labelValue}\",${VAR_FILTERS_EXPR}}`;\n  }\n}\n","import { css } from '@emotion/css';\nimport { DashboardCursorSync, type GrafanaTheme2 } from '@grafana/data';\nimport {\n  behaviors,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneReactObject,\n  SceneVariableSet,\n  type AdHocFiltersVariable,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { Button, CollapsableSection, Spinner, useStyles2 } from '@grafana/ui';\nimport React, { useState } from 'react';\n\nimport { InlineBanner } from 'App/InlineBanner';\nimport { WithUsageDataPreviewPanel } from 'MetricSelect/WithUsageDataPreviewPanel';\nimport { VAR_FILTERS } from 'shared';\nimport { getColorByIndex, getTrailFor } from 'utils';\nimport { NULL_GROUP_BY_VALUE } from 'WingmanDataTrail/Labels/LabelsDataSource';\nimport { VAR_WINGMAN_GROUP_BY, type LabelsVariable } from 'WingmanDataTrail/Labels/LabelsVariable';\nimport { LayoutSwitcher, LayoutType, type LayoutSwitcherState } from 'WingmanDataTrail/ListControls/LayoutSwitcher';\nimport { GRID_TEMPLATE_COLUMNS, GRID_TEMPLATE_ROWS } from 'WingmanDataTrail/MetricsList/SimpleMetricsList';\nimport { SelectAction } from 'WingmanDataTrail/MetricVizPanel/actions/SelectAction';\nimport {\n  METRICS_VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW,\n  MetricVizPanel,\n} from 'WingmanDataTrail/MetricVizPanel/MetricVizPanel';\nimport { SceneByVariableRepeater } from 'WingmanDataTrail/SceneByVariableRepeater/SceneByVariableRepeater';\nimport { GroupsIcon } from 'WingmanDataTrail/SideBar/custom-icons/GroupsIcon';\n\nimport {\n  MetricsWithLabelValueVariable,\n  VAR_METRIC_WITH_LABEL_VALUE,\n} from './MetricsWithLabelValue/MetricsWithLabelValueVariable';\n\nexport interface MetricsGroupByRowState extends SceneObjectState {\n  index: number;\n  labelName: string;\n  labelValue: string;\n  labelCardinality: number;\n  $variables: SceneVariableSet;\n  body: SceneByVariableRepeater;\n}\n\nexport class MetricsGroupByRow extends SceneObjectBase<MetricsGroupByRowState> {\n  public constructor({\n    index,\n    labelName,\n    labelValue,\n    labelCardinality,\n  }: {\n    index: MetricsGroupByRowState['index'];\n    labelName: MetricsGroupByRowState['labelName'];\n    labelValue: MetricsGroupByRowState['labelValue'];\n    labelCardinality: MetricsGroupByRowState['labelCardinality'];\n  }) {\n    super({\n      index,\n      labelName,\n      labelValue,\n      labelCardinality,\n      key: `${labelName || ''}-${labelValue || ''}`,\n      $variables: new SceneVariableSet({\n        variables: [new MetricsWithLabelValueVariable({ labelName, labelValue })],\n      }),\n      body: new SceneByVariableRepeater({\n        variableName: VAR_METRIC_WITH_LABEL_VALUE,\n        initialPageSize: 3,\n        body: new SceneCSSGridLayout({\n          children: [],\n          isLazy: true,\n          templateColumns: GRID_TEMPLATE_COLUMNS,\n          autoRows: METRICS_VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW,\n          $behaviors: [\n            new behaviors.CursorSync({\n              key: 'metricCrosshairSync',\n              sync: DashboardCursorSync.Crosshair,\n            }),\n          ],\n        }),\n        getLayoutLoading: () =>\n          new SceneReactObject({\n            reactNode: <Spinner inline />,\n          }),\n        getLayoutEmpty: () =>\n          new SceneReactObject({\n            reactNode: (\n              <InlineBanner title=\"\" severity=\"info\">\n                No metrics found for the current filters and time range.\n              </InlineBanner>\n            ),\n          }),\n        getLayoutError: (error: Error) =>\n          new SceneReactObject({\n            reactNode: <InlineBanner severity=\"error\" title=\"Error while loading metrics!\" error={error} />,\n          }),\n        getLayoutChild: (option, colorIndex) => {\n          const trail = getTrailFor(this);\n          const isNativeHistogram = trail.isNativeHistogram(option.value as string);\n\n          return new SceneCSSGridItem({\n            body: new WithUsageDataPreviewPanel({\n              vizPanelInGridItem: new MetricVizPanel({\n                metricName: option.value as string,\n                color: getColorByIndex(colorIndex),\n                matchers: [`${labelName}=\"${labelValue}\"`],\n                headerActions: [new SelectAction({ metricName: option.value as string })],\n                isNativeHistogram,\n              }),\n              metric: option.value as string,\n            }),\n          });\n        },\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.subscribeToLayoutChange();\n  }\n\n  private subscribeToLayoutChange() {\n    const layoutSwitcher = sceneGraph.findByKeyAndType(this, 'layout-switcher', LayoutSwitcher);\n    const body = this.state.body.state.body as SceneCSSGridLayout;\n\n    const onChangeState = (newState: LayoutSwitcherState, prevState?: LayoutSwitcherState) => {\n      if (newState.layout !== prevState?.layout) {\n        body.setState({\n          templateColumns: newState.layout === LayoutType.ROWS ? GRID_TEMPLATE_ROWS : GRID_TEMPLATE_COLUMNS,\n        });\n      }\n    };\n\n    onChangeState(layoutSwitcher.state); // ensure layout when landing on the page\n\n    this._subs.add(layoutSwitcher.subscribeToState(onChangeState));\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MetricsGroupByRow>) => {\n    const [isCollapsed, setIsCollapsed] = useState(false);\n    const styles = useStyles2(getStyles);\n\n    const { index, labelName, labelValue, labelCardinality, $variables, body } = model.useState();\n\n    const variable = $variables.state.variables[0] as MetricsWithLabelValueVariable;\n    const { loading, error } = variable.useState();\n\n    const batchSizes = body.useSizes();\n    const shouldDisplayShowMoreButton =\n      !loading && !error && batchSizes.total > 0 && batchSizes.current < batchSizes.total;\n\n    const onClickShowMore = () => {\n      body.increaseBatchSize();\n    };\n\n    const onClickSelect = () => {\n      const adHocFiltersVariable = sceneGraph.lookupVariable(VAR_FILTERS, model) as AdHocFiltersVariable;\n\n      adHocFiltersVariable.setState({\n        // TOOD: keep unique filters\n        filters: [...adHocFiltersVariable.state.filters, { key: labelName, operator: '=', value: labelValue }],\n      });\n\n      (sceneGraph.lookupVariable(VAR_WINGMAN_GROUP_BY, model) as LabelsVariable)?.changeValueTo(NULL_GROUP_BY_VALUE);\n    };\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.containerHeader}>\n          <div className={styles.headerButtons}>\n            <Button className={styles.selectButton} variant=\"secondary\" onClick={onClickSelect}>\n              Select\n            </Button>\n          </div>\n        </div>\n\n        {\n          <CollapsableSection\n            isOpen={!isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            label={\n              <div className={styles.groupName}>\n                <GroupsIcon />\n                <div className={styles.labelValue}>{labelValue}</div>\n                {labelCardinality > 1 && (\n                  <div className={styles.index}>\n                    ({index + 1}/{labelCardinality})\n                  </div>\n                )}\n              </div>\n            }\n          >\n            <div className={styles.collapsableSectionBody}>\n              <body.Component model={body} />\n            </div>\n\n            {shouldDisplayShowMoreButton && (\n              <div className={styles.footer}>\n                <Button\n                  variant=\"secondary\"\n                  fill=\"outline\"\n                  onClick={onClickShowMore}\n                  tooltip={`Show more metrics for ${labelName}=\"${labelValue}\"`}\n                  tooltipPlacement=\"top\"\n                >\n                  Show {batchSizes.increment} more metrics ({batchSizes.current}/{batchSizes.total})\n                </Button>\n              </div>\n            )}\n          </CollapsableSection>\n        }\n\n        {/* required to trigger its activation handlers */}\n        <div className={styles.variable}>\n          <variable.Component key={variable.state.name} model={variable} />\n        </div>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      background: theme.colors.background.canvas,\n      margin: theme.spacing(1, 0, 0, 0),\n\n      '& div:focus-within': {\n        boxShadow: 'none !important',\n      },\n    }),\n    containerHeader: css({\n      display: 'flex',\n      alignItems: 'center',\n      gap: '8px',\n      marginBottom: '-36px',\n      paddingBottom: theme.spacing(1.5),\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n    }),\n    headerButtons: css({\n      position: 'relative',\n      top: '3px',\n      marginLeft: 'auto',\n      marginRight: '30px',\n      zIndex: 100,\n    }),\n    selectButton: css({\n      height: '28px',\n    }),\n    collapsableSectionBody: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '24px',\n      padding: theme.spacing(1),\n    }),\n    groupName: css({\n      display: 'flex',\n      alignItems: 'center',\n      fontSize: '1.3rem',\n      lineHeight: '1.3rem',\n    }),\n    labelValue: css({\n      fontSize: '16px',\n      marginLeft: '8px',\n    }),\n    index: css({\n      fontSize: '12px',\n      color: theme.colors.text.secondary,\n      marginLeft: '8px',\n    }),\n    footer: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: theme.spacing(1),\n\n      '& button': {\n        height: '40px',\n      },\n    }),\n    variable: css({\n      display: 'none',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  SceneObjectBase,\n  SceneReactObject,\n  SceneVariableSet,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { Button, Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { InlineBanner } from 'App/InlineBanner';\nimport { LabelValuesVariable, VAR_LABEL_VALUES } from 'WingmanDataTrail/Labels/LabelValuesVariable';\nimport { SceneByVariableRepeater } from 'WingmanDataTrail/SceneByVariableRepeater/SceneByVariableRepeater';\n\nimport { MetricsGroupByRow } from './MetricsGroupByRow';\n\ninterface MetricsGroupByListState extends SceneObjectState {\n  labelName: string;\n  $variables: SceneVariableSet;\n  body: SceneByVariableRepeater;\n}\n\nexport class MetricsGroupByList extends SceneObjectBase<MetricsGroupByListState> {\n  constructor({ labelName }: { labelName: MetricsGroupByListState['labelName'] }) {\n    super({\n      key: 'metrics-group-list',\n      labelName,\n      $variables: new SceneVariableSet({\n        variables: [new LabelValuesVariable({ labelName })],\n      }),\n      body: new SceneByVariableRepeater({\n        variableName: VAR_LABEL_VALUES,\n        initialPageSize: 20,\n        pageSizeIncrement: 10,\n        body: new SceneCSSGridLayout({\n          children: [],\n          isLazy: true,\n          templateColumns: '1fr',\n          autoRows: 'auto',\n          rowGap: 1,\n        }),\n        getLayoutLoading: () =>\n          new SceneReactObject({\n            reactNode: <Spinner inline />,\n          }),\n        getLayoutEmpty: () =>\n          new SceneReactObject({\n            reactNode: (\n              <InlineBanner title=\"\" severity=\"info\">\n                No label values found for label &quot;{labelName}&quot;.\n              </InlineBanner>\n            ),\n          }),\n        getLayoutError: (error: Error) =>\n          new SceneReactObject({\n            reactNode: (\n              <InlineBanner severity=\"error\" title={`Error while loading label \"${labelName}\" values!`} error={error} />\n            ),\n          }),\n        getLayoutChild: (option, index, options) => {\n          return new SceneCSSGridItem({\n            body: new MetricsGroupByRow({\n              index,\n              labelName,\n              labelValue: option.value as string,\n              labelCardinality: options.length,\n            }),\n          });\n        },\n      }),\n    });\n  }\n\n  static Component = ({ model }: SceneComponentProps<MetricsGroupByList>) => {\n    const styles = useStyles2(getStyles);\n    const { body, $variables, labelName } = model.useState();\n\n    const variable = $variables.state.variables[0] as LabelValuesVariable;\n    const { loading, error } = variable.useState();\n\n    const batchSizes = body.useSizes();\n    const shouldDisplayShowMoreButton =\n      !loading && !error && batchSizes.total > 0 && batchSizes.current < batchSizes.total;\n\n    const onClickShowMore = () => {\n      body.increaseBatchSize();\n    };\n\n    return (\n      <div data-testid=\"metrics-groupby-list\">\n        <body.Component model={body} />\n\n        {shouldDisplayShowMoreButton && (\n          <div className={styles.footer}>\n            <Button variant=\"secondary\" fill=\"outline\" onClick={onClickShowMore}>\n              Show {batchSizes.increment} more &quot;{labelName}&quot; values ({batchSizes.current}/{batchSizes.total})\n            </Button>\n          </div>\n        )}\n\n        {/* required to trigger its activation handlers */}\n        <div className={styles.variable}>\n          <variable.Component key={variable.state.name} model={variable} />\n        </div>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    footer: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      margin: theme.spacing(3, 0, 1, 0),\n\n      '& button': {\n        height: '40px',\n      },\n    }),\n    variable: css({\n      display: 'none',\n    }),\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventQuickSearchChangedPayload {\n  searchText: string;\n}\n\nexport class EventQuickSearchChanged extends BusEventWithPayload<EventQuickSearchChangedPayload> {\n  public static type = 'quick-search-changed';\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  VariableDependencyConfig,\n  type MultiValueVariable,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { IconButton, Input, Tag, Tooltip, useStyles2 } from '@grafana/ui';\nimport { debounce } from 'lodash';\nimport React, { type KeyboardEvent } from 'react';\n\nimport { VAR_DATASOURCE } from 'shared';\nimport { NULL_GROUP_BY_VALUE } from 'WingmanDataTrail/Labels/LabelsDataSource';\nimport { VAR_WINGMAN_GROUP_BY } from 'WingmanDataTrail/Labels/LabelsVariable';\nimport {\n  VAR_FILTERED_METRICS_VARIABLE,\n  type FilteredMetricsVariable,\n} from 'WingmanDataTrail/MetricsVariables/FilteredMetricsVariable';\nimport { VAR_METRICS_VARIABLE, type MetricsVariable } from 'WingmanDataTrail/MetricsVariables/MetricsVariable';\n\nimport { EventQuickSearchChanged } from './EventQuickSearchChanged';\ninterface QuickSearchState extends SceneObjectState {\n  value: string;\n  counts: { current: number; total: number };\n  disableRatioDisplay: boolean;\n}\n\nexport class QuickSearch extends SceneObjectBase<QuickSearchState> {\n  public static readonly URL_SEARCH_PARAM_NAME = 'search_txt';\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_DATASOURCE, VAR_METRICS_VARIABLE, VAR_FILTERED_METRICS_VARIABLE, VAR_WINGMAN_GROUP_BY],\n    onAnyVariableChanged: (variable) => {\n      if ([VAR_METRICS_VARIABLE, VAR_FILTERED_METRICS_VARIABLE].includes(variable.state.name)) {\n        const { counts } = this.state;\n        const key = variable.state.name === VAR_METRICS_VARIABLE ? 'total' : 'current';\n        const newCount = (sceneGraph.lookupVariable(variable.state.name, this) as MultiValueVariable).state.options\n          .length;\n\n        if (newCount !== counts[key]) {\n          this.setState({ counts: { ...counts, [key]: newCount } });\n        }\n        return;\n      }\n\n      if (variable.state.name === VAR_WINGMAN_GROUP_BY) {\n        const value = (variable as MultiValueVariable).state.value;\n        this.setState({ disableRatioDisplay: Boolean(value && value !== NULL_GROUP_BY_VALUE) });\n        return;\n      }\n\n      this.setState({ disableRatioDisplay: false });\n\n      if (variable.state.name === VAR_DATASOURCE) {\n        this.setState({ value: '' });\n      }\n    },\n  });\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, {\n    keys: [QuickSearch.URL_SEARCH_PARAM_NAME],\n  });\n\n  getUrlState() {\n    return { [QuickSearch.URL_SEARCH_PARAM_NAME]: this.state.value };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const newValue = (values[QuickSearch.URL_SEARCH_PARAM_NAME] as string) || '';\n\n    if (newValue !== this.state.value) {\n      this.setState({ value: newValue });\n    }\n  }\n\n  public constructor() {\n    super({\n      key: 'quick-search',\n      value: '',\n      counts: {\n        current: 0,\n        total: 0,\n      },\n      disableRatioDisplay: false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.setState({\n      counts: {\n        current: (sceneGraph.lookupVariable(VAR_FILTERED_METRICS_VARIABLE, this) as FilteredMetricsVariable).state\n          .options.length,\n        total: (sceneGraph.lookupVariable(VAR_METRICS_VARIABLE, this) as MetricsVariable).state.options.length,\n      },\n    });\n\n    this.updateDisableRatioDisplay();\n  }\n\n  private updateDisableRatioDisplay() {\n    const groupByVariable = sceneGraph.lookupVariable(VAR_WINGMAN_GROUP_BY, this) as MultiValueVariable;\n    const groupByValue = groupByVariable.state.value;\n\n    this.setState({\n      disableRatioDisplay: Boolean(groupByValue && groupByValue !== NULL_GROUP_BY_VALUE),\n    });\n  }\n\n  private notifyValueChange = debounce((value: string) => {\n    this.publishEvent(new EventQuickSearchChanged({ searchText: value }), true);\n  }, 250);\n\n  private updateValue(value: string) {\n    this.setState({ value });\n    this.notifyValueChange(value);\n  }\n\n  private onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    this.updateValue(e.currentTarget.value);\n  };\n\n  public clear = () => {\n    this.updateValue('');\n  };\n\n  private onKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Escape') {\n      e.preventDefault();\n      this.clear();\n    }\n  };\n\n  private getHumanFriendlyCountsMessage() {\n    const { counts, disableRatioDisplay } = this.state;\n\n    if (disableRatioDisplay || counts.current === counts.total) {\n      // we keep current because it's the count of the active variable (e.g. MetricsWithLabelValueVariable) after selecting a \"Group by\" value\n      // (total is always the count of options of MetricsVariable)\n      return {\n        tagName: `${counts.current}`,\n        tooltipContent: counts.current !== 1 ? `${counts.current} metrics in total` : '1 metric in total',\n      };\n    }\n\n    return {\n      tagName: `${counts.current}/${counts.total}`,\n      tooltipContent:\n        counts.current !== 1\n          ? `${counts.current} out of ${counts.total} metrics in total`\n          : `1 out of ${counts.total} metrics in total`,\n    };\n  }\n\n  static Component = ({ model }: { model: QuickSearch }) => {\n    const styles = useStyles2(getStyles);\n    const { value } = model.useState();\n\n    const { tagName, tooltipContent } = model.getHumanFriendlyCountsMessage();\n\n    return (\n      <Input\n        value={value}\n        onChange={model.onChange}\n        onKeyDown={model.onKeyDown}\n        placeholder=\"Quick search metrics...\"\n        prefix={<i className=\"fa fa-search\" />}\n        suffix={\n          <>\n            <Tooltip content={tooltipContent} placement=\"top\">\n              <Tag className={styles.counts} name={tagName} colorIndex={9} />\n            </Tooltip>\n            <IconButton\n              name=\"times\"\n              variant=\"secondary\"\n              tooltip=\"Clear search\"\n              onClick={model.clear}\n              disabled={!value}\n            />\n          </>\n        }\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  counts: css`\n    margin-right: ${theme.spacing(1)};\n    border-radius: 11px;\n    padding: 2px ${theme.spacing(1)};\n    color: ${theme.colors.text.primary};\n    background-color: ${theme.colors.background.secondary};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { type SelectableValue } from '@grafana/data';\nimport {\n  EmbeddedScene,\n  SceneFlexItem,\n  SceneFlexLayout,\n  type SceneComponentProps,\n  type SceneObjectState,\n  type SceneReactObject,\n  type SceneVariableSet,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { LayoutSwitcher } from './LayoutSwitcher';\nimport { MetricsSorter } from './MetricsSorter/MetricsSorter';\nimport { QuickSearch } from './QuickSearch/QuickSearch';\n\ninterface ListControlsState extends SceneObjectState {\n  $variables?: SceneVariableSet;\n  inputControls?: SceneReactObject;\n  onChange?: (value: SelectableValue<string>) => void; // Keeping for backward compatibility\n}\n\n// @ts-ignore to fix build error. Is there a Scenes friend way of doing this?\nexport class ListControls extends EmbeddedScene {\n  constructor(state: Partial<ListControlsState>) {\n    super({\n      ...state,\n      key: 'list-controls',\n      body: new SceneFlexLayout({\n        direction: 'row',\n        width: '100%',\n        maxHeight: '32px',\n        children: [\n          new SceneFlexItem({\n            body: new QuickSearch(),\n          }),\n          new SceneFlexItem({\n            width: 'auto',\n            body: new MetricsSorter({}),\n          }),\n          new SceneFlexItem({\n            width: 'auto',\n            body: new LayoutSwitcher(),\n          }),\n        ],\n      }),\n    });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<ListControls>) => {\n    const styles = useStyles2(getStyles);\n    const { body } = model.useState();\n\n    return (\n      <div className={styles.headerWrapper}>\n        <body.Component model={body} />\n      </div>\n    );\n  };\n}\n\nfunction getStyles() {\n  return {\n    headerWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n      '& > div': {\n        display: 'flex',\n        alignItems: 'center',\n        '& > div': {\n          display: 'flex',\n          alignItems: 'center',\n        },\n      },\n    }),\n  };\n}\n","import { SceneVariableValueChangedEvent, type QueryVariable, type VariableValueOption } from '@grafana/scenes';\nimport { cloneDeep, isEqual } from 'lodash';\n\nimport { type MetricOptions } from './MetricsVariable';\n\nexport type MetricFilters = {\n  categories: string[];\n  prefixes: string[];\n  suffixes: string[];\n  names: string[];\n};\n\nexport class MetricsVariableFilterEngine {\n  private variable: QueryVariable;\n  private initOptions: VariableValueOption[] = [];\n  private filters: MetricFilters = {\n    categories: [],\n    prefixes: [],\n    suffixes: [],\n    names: [],\n  };\n\n  constructor(variable: QueryVariable) {\n    this.variable = variable;\n  }\n\n  public setInitOptions(options: VariableValueOption[]) {\n    this.initOptions = cloneDeep(options);\n  }\n\n  /**\n   * Get a copy of the current filters\n   */\n  public getFilters(): MetricFilters {\n    return this.filters;\n  }\n\n  /**\n   * Compute options based on filters.\n   * @param options The options to filter\n   * @param filters The filters to apply\n   * @returns Filtered options\n   */\n  public static getFilteredOptions(options: VariableValueOption[], filters: MetricFilters): MetricOptions {\n    let filteredOptions = options as MetricOptions;\n\n    if (filters.categories.length > 0) {\n      filteredOptions = MetricsVariableFilterEngine.applyCategoryFilters(filteredOptions, filters.categories);\n    }\n\n    if (filters.prefixes.length > 0) {\n      filteredOptions = MetricsVariableFilterEngine.applyPrefixFilters(filteredOptions, filters.prefixes);\n    }\n\n    if (filters.suffixes.length > 0) {\n      filteredOptions = MetricsVariableFilterEngine.applySuffixFilters(filteredOptions, filters.suffixes);\n    }\n\n    if (filters.names.length > 0) {\n      filteredOptions = MetricsVariableFilterEngine.applyNameFilters(filteredOptions, filters.names);\n    }\n\n    return filteredOptions;\n  }\n\n  public applyFilters(filters: Partial<MetricFilters> = this.filters, settings = { forceUpdate: false, notify: true }) {\n    const updatedFilters: MetricFilters = {\n      ...this.filters,\n      ...filters,\n    };\n\n    if (!settings.forceUpdate && isEqual(this.filters, updatedFilters)) {\n      return;\n    }\n\n    if (\n      !updatedFilters.categories.length &&\n      !updatedFilters.prefixes.length &&\n      !updatedFilters.suffixes.length &&\n      !updatedFilters.names.length\n    ) {\n      this.filters = updatedFilters;\n\n      this.variable.setState({ options: this.initOptions });\n\n      if (settings.notify) {\n        this.notifyUpdate();\n      }\n\n      return;\n    }\n\n    this.filters = updatedFilters;\n\n    const filteredOptions = MetricsVariableFilterEngine.getFilteredOptions(this.initOptions, this.filters);\n\n    this.variable.setState({ options: filteredOptions });\n\n    if (settings.notify) {\n      this.notifyUpdate();\n    }\n  }\n\n  private static applyCategoryFilters(options: MetricOptions, categories: string[]): MetricOptions {\n    let filteredOptions: MetricOptions = [];\n\n    for (const category of categories) {\n      const categoryRegex = MetricsVariableFilterEngine.buildRegex(category, 'i'); // see e.g. computeRulesGroups (could apply to other categories in the future)\n      filteredOptions = filteredOptions.concat(options.filter((option) => categoryRegex.test(option.value)));\n    }\n\n    return filteredOptions;\n  }\n\n  private static applyPrefixFilters(options: MetricOptions, prefixes: string[]): MetricOptions {\n    const pattern = prefixes\n      .map((prefix) => {\n        // Multi-value support (see computeMetricPrefixGroups)\n        if (prefix.includes('|')) {\n          return `${prefix\n            .split('|')\n            .map((p) => `^${p}([^a-z0-9]|$)`)\n            .join('|')}`;\n        }\n\n        return `^${prefix}([^a-z0-9]|$)`;\n      })\n      .join('|');\n\n    const prefixesRegex = MetricsVariableFilterEngine.buildRegex(`(${pattern})`);\n\n    const filteredOptions = options.filter((option) => prefixesRegex.test(option.value as string));\n\n    return filteredOptions;\n  }\n\n  private static applySuffixFilters(options: MetricOptions, suffixes: string[]): MetricOptions {\n    const pattern = suffixes\n      .map((suffix) => {\n        // Multi-value support (see computeMetricSuffixGroups)\n        if (suffix.includes('|')) {\n          return `${suffix\n            .split('|')\n            .map((s) => `(^|[^a-z0-9])${s}$`)\n            .join('|')}`;\n        }\n\n        return `(^|[^a-z0-9])${suffix}$`;\n      })\n      .join('|');\n\n    const suffixesRegex = MetricsVariableFilterEngine.buildRegex(`(${pattern})`);\n\n    const filteredOptions = options.filter((option) => suffixesRegex.test(option.value as string));\n\n    return filteredOptions;\n  }\n\n  private static applyNameFilters(options: MetricOptions, names: string[]): MetricOptions {\n    const [namePatterns] = names;\n\n    const regexes = namePatterns\n      .split(',')\n      .map((p) => p.trim())\n      .filter(Boolean)\n      .map((r) => {\n        try {\n          return new RegExp(r);\n        } catch {\n          return null;\n        }\n      })\n      .filter(Boolean) as RegExp[];\n\n    return options.filter((option) => regexes.some((regex) => regex.test(option.value as string)));\n  }\n\n  private static buildRegex(pattern: string, flags?: string) {\n    try {\n      return new RegExp(pattern, flags);\n    } catch {\n      return new RegExp('.*');\n    }\n  }\n\n  private notifyUpdate() {\n    // hack to force SceneByVariableRepeater to re-render\n    this.variable.publishEvent(new SceneVariableValueChangedEvent(this.variable), true);\n  }\n}\n","import { sceneGraph, SceneVariableValueChangedEvent, type QueryVariable } from '@grafana/scenes';\n\nimport { logger } from 'tracking/logger/logger';\nimport {\n  MetricsSorter,\n  sortMetricsByCount,\n  sortMetricsWithRecentFirst,\n  type SortingOption,\n} from 'WingmanDataTrail/ListControls/MetricsSorter/MetricsSorter';\nimport { type MetricUsageType } from 'WingmanDataTrail/ListControls/MetricsSorter/metricUsageFetcher';\n\nimport { areArraysEqual } from './helpers/areArraysEqual';\n\nexport class MetricsVariableSortEngine {\n  private variable: QueryVariable;\n  private lastMetrics: string[];\n  private sortBy?: SortingOption;\n\n  constructor(variable: QueryVariable) {\n    this.variable = variable;\n    this.sortBy = undefined;\n    this.lastMetrics = [];\n  }\n\n  public async sort(sortBy = this.sortBy) {\n    const metrics = this.variable.state.options.map((option) => option.value as string);\n\n    if (sortBy === this.sortBy && areArraysEqual(metrics, this.lastMetrics)) {\n      return;\n    }\n\n    let sortedMetrics: string[];\n\n    switch (sortBy) {\n      case 'dashboard-usage':\n      case 'alerting-usage':\n        sortedMetrics = await this.sortByUsage(metrics, sortBy);\n        break;\n      default:\n        sortedMetrics = sortMetricsWithRecentFirst(metrics);\n        break;\n    }\n\n    this.sortBy = sortBy;\n    this.lastMetrics = sortedMetrics;\n\n    this.variable.setState({\n      options: sortedMetrics.map((metricName) => ({\n        label: metricName,\n        value: metricName,\n      })),\n    });\n\n    this.notifyUpdate();\n  }\n\n  private async sortByUsage(metrics: string[], usageType: MetricUsageType) {\n    try {\n      const metricsSorter = sceneGraph.findByKeyAndType(this.variable, 'metrics-sorter', MetricsSorter);\n      if (!metricsSorter) {\n        logger.warn('Metrics sorter not found. Returning unsorted metrics.', { usageType });\n        return metrics;\n      }\n      const usageMetrics = await metricsSorter.getUsageMetrics(usageType);\n      return sortMetricsByCount(metrics, usageMetrics);\n    } catch (err) {\n      const error = typeof err === 'string' ? new Error(err) : (err as Error);\n      logger.error(error, {\n        usageType,\n      });\n      return metrics;\n    }\n  }\n\n  private notifyUpdate() {\n    // hack to force SceneByVariableRepeater to re-render\n    this.variable.publishEvent(new SceneVariableValueChangedEvent(this.variable), true);\n  }\n}\n","import { isEqual } from 'lodash';\n\nexport const areArraysEqual = (array1: any[], array2: any[]) =>\n  array1.length === array2.length && isEqual(array1, array2);\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventApplyFunctionPayload {\n  metricName: string;\n  prometheusFunction: string;\n}\n\nexport class EventApplyFunction extends BusEventWithPayload<EventApplyFunctionPayload> {\n  public static type = 'apply-function';\n}\n","import { css } from '@emotion/css';\nimport { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { type PrometheusFn } from './ConfigureAction';\nimport { EventApplyFunction } from './EventApplyFunction';\n\ninterface ApplyActionState extends SceneObjectState {\n  metricName: string;\n  prometheusFunction: PrometheusFn;\n  disabled?: boolean;\n}\n\nexport class ApplyAction extends SceneObjectBase<ApplyActionState> {\n  constructor({ metricName, prometheusFunction, disabled }: ApplyActionState) {\n    super({\n      key: `apply-action-${metricName}`,\n      metricName,\n      prometheusFunction,\n      disabled: Boolean(disabled),\n    });\n  }\n\n  public onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const { metricName, prometheusFunction } = this.state;\n\n    event.preventDefault();\n\n    this.publishEvent(\n      new EventApplyFunction({\n        metricName,\n        prometheusFunction,\n      }),\n      true\n    );\n  };\n\n  public static Component = ({ model }: SceneComponentProps<ApplyAction>) => {\n    const styles = useStyles2(getStyles);\n    const { disabled } = model.useState();\n\n    return (\n      <Button\n        variant=\"primary\"\n        fill=\"outline\"\n        size=\"sm\"\n        className={styles.selectButton}\n        onClick={model.onClick}\n        disabled={disabled}\n      >\n        Apply\n      </Button>\n    );\n  };\n}\n\nconst getStyles = () => ({\n  selectButton: css``,\n});\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventConfigureFunctionPayload {\n  metricName: string;\n}\n\nexport class EventConfigureFunction extends BusEventWithPayload<EventConfigureFunctionPayload> {\n  public static type = 'configure-function';\n}\n","import { css } from '@emotion/css';\nimport { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { EventConfigureFunction } from './EventConfigureFunction';\n\ninterface ConfigureActionState extends SceneObjectState {\n  metricName: string;\n}\n\nexport class ConfigureAction extends SceneObjectBase<ConfigureActionState> {\n  static PROMETHEUS_FN_OPTIONS = [\n    { label: 'Average', value: 'avg' },\n    { label: 'Sum', value: 'sum' },\n    { label: 'Minimum', value: 'min' },\n    { label: 'Maximum', value: 'max' },\n    { label: 'Rate', value: 'rate' },\n  ] as const;\n\n  constructor({ metricName }: { metricName: ConfigureActionState['metricName'] }) {\n    super({\n      key: `configure-action-${metricName}`,\n      metricName,\n    });\n  }\n\n  public onClick = () => {\n    this.publishEvent(new EventConfigureFunction({ metricName: this.state.metricName }), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<ConfigureAction>) => {\n    const styles = useStyles2(getStyles);\n\n    return (\n      <Button\n        className={styles.selectButton}\n        aria-label=\"Configure\"\n        variant=\"secondary\"\n        size=\"sm\"\n        fill=\"text\"\n        onClick={model.onClick}\n        icon=\"cog\"\n        tooltip=\"Configure the Prometheus function\"\n        tooltipPlacement=\"top\"\n      />\n    );\n  };\n}\n\nconst getStyles = () => ({\n  selectButton: css`\n    margin: 0;\n    padding: 0;\n  `,\n});\n\nexport type PrometheusFn = (typeof ConfigureAction.PROMETHEUS_FN_OPTIONS)[number]['value'];\n","import { SceneObjectBase, type SceneComponentProps, type SceneObject, type SceneObjectState } from '@grafana/scenes';\nimport { Drawer } from '@grafana/ui';\nimport React from 'react';\n\ninterface SceneDrawerState extends SceneObjectState {\n  key?: string;\n  isOpen?: boolean;\n  title?: string;\n  subTitle?: string;\n  body?: SceneObject;\n}\n\nexport class SceneDrawer extends SceneObjectBase<SceneDrawerState> {\n  constructor(state?: SceneDrawerState) {\n    super({\n      key: 'drawer',\n      isOpen: false,\n      ...state,\n    });\n  }\n\n  open = ({\n    title,\n    subTitle,\n    body,\n  }: {\n    title?: SceneDrawerState['title'];\n    subTitle?: SceneDrawerState['subTitle'];\n    body?: SceneDrawerState['body'];\n  }) => {\n    this.setState({ ...this.state, isOpen: true, title, subTitle, body });\n  };\n\n  close = () => {\n    this.setState({ isOpen: false });\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneDrawer>) => {\n    const { isOpen, title, subTitle, body } = model.useState();\n\n    return (\n      <>\n        {body && isOpen && (\n          <Drawer size=\"lg\" title={title} subtitle={subTitle} closeOnMaskClick onClose={model.close}>\n            <body.Component model={body} />\n          </Drawer>\n        )}\n      </>\n    );\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventFiltersChangedPayload {\n  type: 'prefixes' | 'suffixes';\n  filters: string[];\n}\n\nexport class EventFiltersChanged extends BusEventWithPayload<EventFiltersChangedPayload> {\n  public static type = 'filters-changed';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { type MetricFilters } from 'WingmanDataTrail/MetricsVariables/MetricsVariableFilterEngine';\n\nexport interface EventFiltersChangedPayload {\n  type: keyof MetricFilters;\n  filters: string[];\n}\n\nexport class EventFiltersChanged extends BusEventWithPayload<EventFiltersChangedPayload> {\n  public static type = 'filters-changed';\n}\n","// Constants for metric rule type labels\nexport const LABEL_METRICS = 'Non-rules metrics';\nexport const LABEL_RULES = 'Recording rules';\n\nexport const ruleGroupLabels = {\n  metrics: LABEL_METRICS,\n  rules: LABEL_RULES,\n} as const;\n\nexport type RuleGroupLabel = (typeof ruleGroupLabels)[keyof typeof ruleGroupLabels];\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventSectionValueChangedPayload {\n  key: string;\n  values: string[];\n}\n\nexport class EventSectionValueChanged extends BusEventWithPayload<EventSectionValueChangedPayload> {\n  public static type = 'section-value-changed';\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { Checkbox, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nexport const CheckboxWithCount = ({\n  label,\n  count,\n  checked,\n  onChange,\n}: {\n  label: string;\n  count: number;\n  checked: boolean;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.checkboxWrapper} title={label}>\n      <Checkbox label={label} value={checked} onChange={onChange} />\n      <span className={styles.count}>({count})</span>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    checkboxWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n      '& label *': {\n        fontSize: '14px !important',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n    }),\n    count: css({\n      color: theme.colors.text.secondary,\n      marginLeft: theme.spacing(0.5),\n      display: 'inline-block',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { type RuleGroupLabel } from 'WingmanDataTrail/MetricsVariables/metricLabels';\n\nimport { CheckboxWithCount } from './CheckboxWithCount';\nimport { type MetricsFilterSectionState } from './MetricsFilterSection';\n\nexport function CheckBoxList({\n  groups,\n  selectedGroups,\n  onSelectionChange,\n}: {\n  groups: MetricsFilterSectionState['groups'];\n  selectedGroups: MetricsFilterSectionState['selectedGroups'];\n  onSelectionChange: (newGroups: MetricsFilterSectionState['selectedGroups']) => void;\n}) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <div className={styles.checkboxListHeader}>\n        <div>{selectedGroups.length} selected</div>\n        <Button variant=\"secondary\" fill=\"text\" onClick={() => onSelectionChange([])} disabled={!selectedGroups.length}>\n          clear\n        </Button>\n      </div>\n\n      {!groups.length && <div className={styles.noResults}>No results.</div>}\n\n      {groups.length > 0 && (\n        <ul className={styles.checkboxList} data-testid=\"checkbox-filters-list\">\n          {groups.map((group) => (\n            <li key={group.value} className={styles.checkboxItem}>\n              <CheckboxWithCount\n                label={group.label}\n                count={group.count}\n                checked={selectedGroups.some((g) => g.value === group.value)}\n                onChange={(e) => {\n                  const newGroups = e.currentTarget.checked\n                    ? [...selectedGroups, { label: group.label as RuleGroupLabel, value: group.value }]\n                    : selectedGroups.filter((v) => v.value !== group.value);\n\n                  onSelectionChange(newGroups);\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    checkboxListHeader: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      color: theme.colors.text.secondary,\n      margin: theme.spacing(0),\n      padding: theme.spacing(0, 0, 0, 1),\n    }),\n    checkboxList: css({\n      height: '100%',\n      margin: 0,\n      padding: theme.spacing(0, 1, 1, 1),\n      overflowY: 'auto',\n      '& .css-1n4u71h-Label': {\n        fontSize: '14px !important',\n      },\n      '&::-webkit-scrollbar': {\n        '-webkit-appearance': 'none',\n        width: '7px',\n      },\n      '&::-webkit-scrollbar-thumb': {\n        borderRadius: '4px',\n        backgroundColor: theme.colors.secondary.main,\n        '-webkit-box-shadow': `0 0 1px ${theme.colors.secondary.shade}`,\n      },\n    }),\n    checkboxItem: css({\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n      padding: theme.spacing(0.5, 0),\n    }),\n    noResults: css({\n      fontStyle: 'italic',\n      padding: theme.spacing(0, 1, 1, 1),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  VariableDependencyConfig,\n  type MultiValueVariable,\n  type SceneComponentProps,\n  type SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { Icon, IconButton, Input, Spinner, Switch, useStyles2 } from '@grafana/ui';\nimport React, { useMemo, useState, type KeyboardEventHandler } from 'react';\n\nimport { logger } from 'tracking/logger/logger';\nimport { EventFiltersChanged } from 'WingmanDataTrail/ListControls/QuickSearch/EventFiltersChanged';\nimport { MetricsReducer } from 'WingmanDataTrail/MetricsReducer';\nimport {\n  VAR_FILTERED_METRICS_VARIABLE,\n  type FilteredMetricsVariable,\n} from 'WingmanDataTrail/MetricsVariables/FilteredMetricsVariable';\nimport { ruleGroupLabels, type RuleGroupLabel } from 'WingmanDataTrail/MetricsVariables/metricLabels';\nimport {\n  VAR_METRICS_VARIABLE,\n  type MetricOptions,\n  type MetricsVariable,\n} from 'WingmanDataTrail/MetricsVariables/MetricsVariable';\nimport {\n  MetricsVariableFilterEngine,\n  type MetricFilters,\n} from 'WingmanDataTrail/MetricsVariables/MetricsVariableFilterEngine';\n\nimport { reportExploreMetrics } from '../../../../interactions';\nimport { EventSectionValueChanged } from '../EventSectionValueChanged';\nimport { SectionTitle } from '../SectionTitle';\nimport { type SideBarSectionState } from '../types';\nimport { CheckBoxList } from './CheckBoxList';\n\nexport interface MetricsFilterSectionState extends SideBarSectionState {\n  type: keyof MetricFilters;\n  computeGroups: (\n    options: Array<{ label: string; value: string }>\n  ) => Array<{ label: string; value: string; count: number }>;\n  showHideEmpty: boolean;\n  showSearch: boolean;\n  groups: Array<{ label: string; value: string; count: number }>;\n  selectedGroups: Array<{ label: RuleGroupLabel; value: string }>; // we need labels for displaying tooltips in `SideBar.tsx`\n  loading: boolean;\n}\n\nexport class MetricsFilterSection extends SceneObjectBase<MetricsFilterSectionState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_METRICS_VARIABLE, VAR_FILTERED_METRICS_VARIABLE],\n    onReferencedVariableValueChanged: (variable) => {\n      const { name, options } = (variable as MultiValueVariable).state;\n\n      if (name === VAR_METRICS_VARIABLE) {\n        this.updateLists(options as MetricOptions);\n        return;\n      }\n\n      if (name === VAR_FILTERED_METRICS_VARIABLE) {\n        this.updateCounts();\n      }\n    },\n  });\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: [this.state.key] });\n\n  getUrlState() {\n    return {\n      [this.state.key]: this.state.selectedGroups.map((g) => g.value).join(','),\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<MetricsFilterSectionState> = {};\n\n    if (\n      typeof values[this.state.key] === 'string' &&\n      values[this.state.key] !== this.state.selectedGroups.map((g) => g.value).join(',')\n    ) {\n      stateUpdate.selectedGroups = (values[this.state.key] as string)\n        .split(',')\n        .map((v) => ({ label: v as RuleGroupLabel, value: v })) as Array<{ label: RuleGroupLabel; value: string }>;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  constructor({\n    key,\n    type,\n    title,\n    description,\n    icon,\n    computeGroups,\n    showHideEmpty,\n    showSearch,\n    disabled,\n    active,\n  }: {\n    key: MetricsFilterSectionState['key'];\n    type: MetricsFilterSectionState['type'];\n    title: MetricsFilterSectionState['title'];\n    description: MetricsFilterSectionState['description'];\n    icon: MetricsFilterSectionState['icon'];\n    computeGroups: MetricsFilterSectionState['computeGroups'];\n    showHideEmpty?: MetricsFilterSectionState['showHideEmpty'];\n    showSearch?: MetricsFilterSectionState['showSearch'];\n    disabled?: MetricsFilterSectionState['disabled'];\n    active?: MetricsFilterSectionState['active'];\n  }) {\n    super({\n      key,\n      type,\n      title,\n      description,\n      icon,\n      groups: [],\n      computeGroups,\n      selectedGroups: [],\n      loading: true,\n      showHideEmpty: showHideEmpty ?? true,\n      showSearch: showSearch ?? true,\n      disabled: disabled ?? false,\n      active: active ?? false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const metricsVariable = sceneGraph.lookupVariable(VAR_METRICS_VARIABLE, this) as MetricsVariable;\n    const filteredMetricsVariable = sceneGraph.lookupVariable(\n      VAR_FILTERED_METRICS_VARIABLE,\n      this\n    ) as FilteredMetricsVariable;\n\n    this.updateLists(metricsVariable.state.options as MetricOptions);\n    this.updateCounts();\n\n    const { selectedGroups } = this.state;\n\n    this.setState({\n      loading: filteredMetricsVariable.state.loading,\n      active: selectedGroups.length > 0,\n    });\n  }\n\n  private updateLists(options: MetricOptions) {\n    this.setState({\n      groups: this.state.computeGroups(options),\n      loading: false,\n    });\n  }\n\n  private updateCounts() {\n    const { groups, computeGroups, type } = this.state;\n\n    // Access the original unfiltered options\n    const metricsVariable = sceneGraph.lookupVariable(VAR_METRICS_VARIABLE, this) as MetricsVariable;\n    const originalOptions = metricsVariable.state.options as MetricOptions;\n\n    const metricsReducer = sceneGraph.getAncestor(this, MetricsReducer);\n    const filterEngine = metricsReducer.state.enginesMap.get(VAR_FILTERED_METRICS_VARIABLE)?.filterEngine;\n\n    if (!filterEngine) {\n      logger.warn('MetricsFilterSection: No filter engine found');\n      return;\n    }\n\n    // Create a copy of current filters excluding the current filter type\n    const filtersWithoutCurrentType = { ...filterEngine.getFilters(), [type]: [] };\n\n    // Get options filtered by everything except the current filter type\n    const optionsForCounting = MetricsVariableFilterEngine.getFilteredOptions(\n      originalOptions,\n      filtersWithoutCurrentType\n    );\n\n    // Calculate counts based on these options\n    const newGroups = new Map<string, number>(\n      computeGroups(optionsForCounting).map((option) => [option.label, option.count])\n    );\n\n    const newGroupsWithCount = groups.map((group) => ({\n      ...group,\n      count: newGroups.get(group.label) ?? 0,\n    }));\n\n    this.setState({\n      groups: newGroupsWithCount,\n      loading: false,\n    });\n  }\n\n  private onSelectionChange = (selectedGroups: MetricsFilterSectionState['selectedGroups']) => {\n    this.setState({ selectedGroups, active: selectedGroups.length > 0 });\n\n    this.publishEvent(\n      new EventFiltersChanged({ type: this.state.type, filters: selectedGroups.map((g) => g.value) }),\n      true\n    );\n\n    this.publishEvent(\n      new EventSectionValueChanged({ key: this.state.key, values: selectedGroups.map((g) => g.label) }),\n      true\n    );\n\n    if (this.state.type === 'prefixes') {\n      reportExploreMetrics('sidebar_prefix_filter_applied', {\n        filter_count: selectedGroups.length,\n      });\n    }\n\n    if (this.state.type === 'suffixes') {\n      reportExploreMetrics('sidebar_suffix_filter_applied', {\n        filter_count: selectedGroups.length,\n      });\n    }\n\n    // Track rule filter selection events\n    if (this.state.key === 'filters-rule' && selectedGroups.length > 0) {\n      // Map the label to the appropriate filter_type for the event\n      selectedGroups.forEach((group) => {\n        let filterType: 'non_rules_metrics' | 'recording_rules' | 'alerting_rules';\n\n        switch (group.label) {\n          case ruleGroupLabels.metrics:\n            filterType = 'non_rules_metrics';\n            break;\n          case ruleGroupLabels.rules:\n            filterType = 'recording_rules';\n            break;\n          default:\n            return; // Skip if it's not a recognized rules filter\n        }\n\n        reportExploreMetrics('sidebar_rules_filter_selected', { filter_type: filterType });\n      });\n    }\n  };\n\n  public static Component = ({ model }: SceneComponentProps<MetricsFilterSection>) => {\n    const styles = useStyles2(getStyles);\n    const { groups, selectedGroups, loading, title, description, showHideEmpty, showSearch } = model.useState();\n\n    const [hideEmpty, setHideEmpty] = useState(false);\n    const [searchValue, setSearchValue] = useState('');\n\n    const filteredGroups = useMemo(() => {\n      const filters: Array<(item: { label: string; value: string; count: number }) => boolean> = [];\n\n      if (hideEmpty) {\n        filters.push((item) => item.count > 0);\n      }\n\n      filters.push((item) => item.label.toLowerCase().includes(searchValue.toLowerCase()));\n\n      return groups.filter((group) => filters.every((filter) => filter(group)));\n    }, [hideEmpty, groups, searchValue]);\n\n    const onKeyDown: KeyboardEventHandler<HTMLInputElement> = (e) => {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        setSearchValue('');\n      }\n    };\n\n    return (\n      <div className={styles.container}>\n        <SectionTitle title={title} description={description} />\n\n        {showHideEmpty && (\n          <div className={styles.switchContainer}>\n            <span className={styles.switchLabel}>Hide empty</span>\n            <Switch value={hideEmpty} onChange={(e) => setHideEmpty(e.currentTarget.checked)} />\n          </div>\n        )}\n\n        {showSearch && (\n          <Input\n            className={styles.searchInput}\n            prefix={<Icon name=\"search\" />}\n            placeholder=\"Search...\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.currentTarget.value)}\n            onKeyDown={onKeyDown}\n            suffix={\n              <IconButton name=\"times\" variant=\"secondary\" tooltip=\"Clear search\" onClick={(e) => setSearchValue('')} />\n            }\n          />\n        )}\n\n        {loading && <Spinner inline />}\n\n        {!loading && (\n          <CheckBoxList\n            groups={filteredGroups}\n            selectedGroups={selectedGroups}\n            onSelectionChange={model.onSelectionChange}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n      height: '100%',\n      overflowY: 'hidden',\n    }),\n    switchContainer: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      gap: theme.spacing(1),\n    }),\n    switchLabel: css({\n      fontSize: '12px',\n      color: theme.colors.text.primary,\n    }),\n    searchInput: css({\n      flexBasis: '32px',\n      flexShrink: 0,\n      marginBottom: theme.spacing(1),\n      padding: theme.spacing(0, 0.5),\n    }),\n  };\n}\n","import { localeCompare } from 'WingmanDataTrail/helpers/localCompare';\n\nconst NONE_PREFIX = '<none>';\n\nexport function computeMetricPrefixGroups(options: Array<{ label: string; value: string }>) {\n  const rawPrefixesMap = new Map<string, string[]>();\n\n  for (const option of options) {\n    const parts = option.value.split(/[^a-z0-9]/i);\n    const key = parts.length <= 1 ? option.value : parts[0];\n    const values = rawPrefixesMap.get(key) ?? [];\n\n    values.push(option.value);\n    rawPrefixesMap.set(key || NONE_PREFIX, values);\n  }\n\n  const prefixesMap = new Map<string, number>();\n\n  for (const [prefix, values] of rawPrefixesMap) {\n    prefixesMap.set(prefix, values.length);\n  }\n\n  return Array.from(prefixesMap.entries())\n    .sort((a, b) => {\n      if (a[1] !== b[1]) {\n        return b[1] - a[1];\n      }\n\n      return localeCompare(a[0], b[0]);\n    })\n    .map(([value, count]) => ({\n      value,\n      count,\n      label: value,\n    }));\n}\n","import { localeCompare } from 'WingmanDataTrail/helpers/localCompare';\n\nconst NONE_SUFFIX = '<none>';\n\nexport function computeMetricSuffixGroups(options: Array<{ label: string; value: string }>) {\n  const rawSuffixesMap = new Map<string, string[]>();\n\n  for (const option of options) {\n    const parts = option.value.split(/[^a-z0-9]/i);\n    const key = parts.length <= 1 ? option.value : parts[parts.length - 1];\n    const values = rawSuffixesMap.get(key) ?? [];\n\n    values.push(option.value);\n    rawSuffixesMap.set(key || NONE_SUFFIX, values);\n  }\n\n  const suffixesMap = new Map<string, number>();\n\n  for (const [suffix, values] of rawSuffixesMap) {\n    suffixesMap.set(suffix, values.length);\n  }\n\n  return Array.from(suffixesMap.entries())\n    .sort((a, b) => {\n      if (a[1] !== b[1]) {\n        return b[1] - a[1];\n      }\n\n      return localeCompare(a[0], b[0]);\n    })\n    .map(([value, count]) => ({\n      value,\n      count,\n      label: value,\n    }));\n}\n","import { ruleGroupLabels } from './metricLabels';\n\ntype MetricType = 'metrics' | 'rules';\n\nexport function computeRulesGroups(options: Array<{ label: string; value: string }>) {\n  const rulesMap = new Map<MetricType, string[]>([\n    ['metrics', []],\n    ['rules', []],\n  ]);\n\n  for (const option of options) {\n    const { value } = option;\n    const key: MetricType = /:/i.test(value) ? 'rules' : 'metrics';\n\n    const values = rulesMap.get(key) ?? [];\n    values.push(value);\n    rulesMap.set(key, values);\n  }\n\n  return [\n    { value: '^(?!.*:.*)', label: ruleGroupLabels.metrics, count: rulesMap.get('metrics')!.length },\n    { value: ':', label: ruleGroupLabels.rules, count: rulesMap.get('rules')!.length },\n  ];\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2, type SelectableValue } from '@grafana/data';\nimport { Button, RadioButtonList, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { NULL_GROUP_BY_VALUE } from 'WingmanDataTrail/Labels/LabelsDataSource';\n\ntype LabelsListProps = {\n  labels: Array<SelectableValue<string>>;\n  selectedLabel: string;\n  onClickLabel: (label: string) => void;\n  onClickClearSelection: () => void;\n};\n\nexport function LabelsList({ labels, selectedLabel, onClickLabel, onClickClearSelection }: LabelsListProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <div className={styles.listHeader}>\n        <div className={styles.selected}>\n          {selectedLabel === NULL_GROUP_BY_VALUE ? 'No selection' : `Selected: \"${selectedLabel}\"`}\n        </div>\n        <Button\n          variant=\"secondary\"\n          fill=\"text\"\n          onClick={onClickClearSelection}\n          disabled={selectedLabel === NULL_GROUP_BY_VALUE}\n        >\n          clear\n        </Button>\n      </div>\n\n      {!labels.length && <div className={styles.noResults}>No results.</div>}\n\n      {labels.length > 0 && (\n        <div className={styles.list} data-testid=\"labels-list\">\n          {/* TODO: use a custom one to have option labels with ellipsis and title/tooltip when hovering\n      now we're customizing too much the component CSS */}\n          <RadioButtonList name=\"labels-list\" options={labels} onChange={onClickLabel} value={selectedLabel} />\n        </div>\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    listHeader: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      color: theme.colors.text.secondary,\n      margin: theme.spacing(0),\n      padding: theme.spacing(0, 0, 0, 1),\n    }),\n    selected: css({\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n    }),\n    list: css({\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n      gap: 0,\n      overflowY: 'auto',\n\n      '& [role=\"radiogroup\"]': {\n        gap: 0,\n      },\n\n      '& label': {\n        cursor: 'pointer',\n        padding: theme.spacing(0.5, 1),\n        '&:hover': {\n          background: theme.colors.background.secondary,\n        },\n      },\n\n      '& label div': {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n    }),\n    noResults: css({\n      fontStyle: 'italic',\n      padding: theme.spacing(0, 1, 1, 1),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2, type SelectableValue } from '@grafana/data';\nimport { sceneGraph, SceneObjectBase, type SceneComponentProps } from '@grafana/scenes';\nimport { Icon, IconButton, Input, Spinner, useStyles2 } from '@grafana/ui';\nimport React, { useMemo, useState } from 'react';\n\nimport { NULL_GROUP_BY_VALUE } from 'WingmanDataTrail/Labels/LabelsDataSource';\nimport { type LabelsVariable } from 'WingmanDataTrail/Labels/LabelsVariable';\n\nimport { reportExploreMetrics } from '../../../../interactions';\nimport { EventSectionValueChanged } from '../EventSectionValueChanged';\nimport { SectionTitle } from '../SectionTitle';\nimport { type SideBarSectionState } from '../types';\nimport { LabelsList } from './LabelsList';\n\ninterface LabelsBrowserState extends SideBarSectionState {\n  variableName: string;\n}\n\nexport class LabelsBrowser extends SceneObjectBase<LabelsBrowserState> {\n  constructor({\n    key,\n    variableName,\n    title,\n    description,\n    icon,\n    disabled,\n    active,\n  }: {\n    key: LabelsBrowserState['key'];\n    variableName: LabelsBrowserState['variableName'];\n    title: LabelsBrowserState['title'];\n    description: LabelsBrowserState['description'];\n    icon: LabelsBrowserState['icon'];\n    disabled?: LabelsBrowserState['disabled'];\n    active?: LabelsBrowserState['active'];\n  }) {\n    super({\n      key,\n      variableName,\n      title,\n      description,\n      icon,\n      disabled: disabled ?? false,\n      active: active ?? false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const labelsVariable = sceneGraph.lookupVariable(this.state.variableName, this) as LabelsVariable;\n    const labelValue = labelsVariable.state.value;\n\n    this.setState({ active: Boolean(labelValue && labelValue !== NULL_GROUP_BY_VALUE) });\n  }\n\n  private selectLabel(label: string) {\n    const labelsVariable = sceneGraph.lookupVariable(this.state.variableName, this) as LabelsVariable;\n    labelsVariable.changeValueTo(label);\n\n    const active = Boolean(label && label !== NULL_GROUP_BY_VALUE);\n\n    this.setState({ active });\n\n    this.publishEvent(new EventSectionValueChanged({ key: this.state.key, values: active ? [label] : [] }), true);\n  }\n\n  private onClickLabel = (label: string) => {\n    this.selectLabel(label);\n    reportExploreMetrics('sidebar_group_by_label_filter_applied', { label });\n  };\n\n  private onClickClearSelection = () => {\n    this.selectLabel(NULL_GROUP_BY_VALUE);\n  };\n\n  private useLabelsBrowser = () => {\n    const { variableName, title, description } = this.useState();\n\n    const labelsVariable = sceneGraph.lookupVariable(variableName, this) as LabelsVariable;\n    const { loading, options: labels, value: labelValue } = labelsVariable.useState();\n\n    const [searchValue, setSearchValue] = useState('');\n\n    const labelsList: Array<SelectableValue<string>> = useMemo(() => {\n      const filters = [\n        (item: string) => item !== NULL_GROUP_BY_VALUE,\n        (item: string) => item.toLowerCase().includes(searchValue.toLowerCase()),\n      ];\n\n      return labels.filter((item) => filters.every((filter) => filter(item.value as string))) as Array<\n        SelectableValue<string>\n      >;\n    }, [labels, searchValue]);\n\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchValue(e.currentTarget.value);\n    };\n\n    const onInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        setSearchValue('');\n      }\n    };\n\n    const onInputClear = () => {\n      setSearchValue('');\n    };\n\n    return {\n      title,\n      description,\n      loading,\n      selectedLabel: labelValue as string,\n      labelsList,\n      searchValue,\n      onInputChange,\n      onInputKeyDown,\n      onInputClear,\n    };\n  };\n\n  public static Component = ({ model }: SceneComponentProps<LabelsBrowser>) => {\n    const styles = useStyles2(getStyles);\n\n    const {\n      title,\n      description,\n      loading,\n      labelsList,\n      selectedLabel,\n      searchValue,\n      onInputChange,\n      onInputKeyDown,\n      onInputClear,\n    } = model.useLabelsBrowser();\n\n    return (\n      <div className={styles.container} data-testid=\"labels-browser\">\n        <SectionTitle title={title} description={description} />\n\n        <Input\n          className={styles.search}\n          prefix={<Icon name=\"search\" />}\n          placeholder=\"Search...\"\n          value={searchValue}\n          onChange={onInputChange}\n          onKeyDown={onInputKeyDown}\n          suffix={<IconButton name=\"times\" variant=\"secondary\" tooltip=\"Clear search\" onClick={onInputClear} />}\n        />\n\n        {loading && <Spinner inline />}\n\n        {!loading && (\n          <LabelsList\n            labels={labelsList}\n            selectedLabel={selectedLabel}\n            onClickLabel={model.onClickLabel}\n            onClickClearSelection={model.onClickClearSelection}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n      height: '100%',\n      overflowY: 'hidden',\n    }),\n    search: css({\n      marginBottom: theme.spacing(1),\n      padding: theme.spacing(0, 0.5),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase, type SceneComponentProps } from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { SectionTitle } from './SectionTitle';\nimport { type SideBarSectionState } from './types';\n\nexport interface SettingsState extends SideBarSectionState {}\n\nexport class Settings extends SceneObjectBase<SettingsState> {\n  constructor({\n    key,\n    title,\n    description,\n    icon,\n    disabled,\n  }: {\n    key: SettingsState['key'];\n    title: SettingsState['title'];\n    description: SettingsState['description'];\n    icon: SettingsState['icon'];\n    disabled?: SettingsState['disabled'];\n  }) {\n    super({\n      key,\n      title,\n      description,\n      icon,\n      disabled: disabled ?? false,\n      active: false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {}\n\n  public static Component = ({ model }: SceneComponentProps<Settings>) => {\n    const styles = useStyles2(getStyles);\n    const { title, description } = model.useState();\n\n    return (\n      <div className={styles.container}>\n        <SectionTitle title={title} description={description} />\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n      height: '100%',\n      overflowY: 'hidden',\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { availableIconsIndex, type GrafanaTheme2, type IconName } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { GroupsIcon } from './custom-icons/GroupsIcon';\nimport { RulesIcon } from './custom-icons/RulesIcon';\n\nconst CustomIcons = new Map<string, React.FC>([\n  ['rules', RulesIcon],\n  ['groups', GroupsIcon],\n]);\n\ntype SideBarButtonProps = {\n  ariaLabel: string;\n  disabled: boolean;\n  visible: boolean;\n  active: boolean;\n  tooltip: string;\n  onClick: () => void;\n  iconOrText: string | IconName;\n};\n\nexport function SideBarButton({\n  ariaLabel,\n  disabled,\n  visible,\n  active,\n  tooltip,\n  iconOrText,\n  onClick,\n}: SideBarButtonProps) {\n  const styles = useStyles2(getStyles);\n\n  let buttonIcon;\n  let ButtonChild;\n\n  if (iconOrText in availableIconsIndex) {\n    buttonIcon = iconOrText as IconName;\n  } else if (CustomIcons.has(iconOrText)) {\n    // some icons are not available in the Saga Design System and have been added as SVG files to the code base\n    ButtonChild = CustomIcons.get(iconOrText);\n  } else {\n    ButtonChild = function ButtonChildText() {\n      return <>{iconOrText}</>;\n    };\n  }\n\n  return (\n    <Button\n      className={cx(styles.button, disabled && 'disabled', visible && 'visible', active && 'active')}\n      size=\"md\"\n      variant=\"secondary\"\n      fill=\"text\"\n      icon={buttonIcon}\n      aria-label={ariaLabel}\n      tooltip={tooltip}\n      tooltipPlacement=\"right\"\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {ButtonChild && <ButtonChild />}\n    </Button>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    button: css({\n      margin: 0,\n      color: theme.colors.text.secondary,\n      '&:hover': {\n        color: theme.colors.text.maxContrast,\n        background: 'transparent',\n      },\n      '&.disabled:hover': {\n        color: theme.colors.text.secondary,\n      },\n      '&.visible': {\n        color: theme.colors.text.maxContrast,\n      },\n      '&.active': {\n        color: theme.colors.text.maxContrast,\n      },\n    }),\n  };\n}\n","import React from 'react';\n\nexport function RulesIcon() {\n  return (\n    <svg stroke=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n      <rect x=\"1.25\" y=\"1.625\" width=\"5.25\" height=\"5.25\" rx=\"1\" strokeWidth=\"1.5\" />\n      <circle cx=\"12.25\" cy=\"4.25\" r=\"2.75\" strokeWidth=\"1.5\" />\n      <circle cx=\"3.75\" cy=\"11.75\" r=\"2.75\" strokeWidth=\"1.5\" />\n      <rect x=\"9.5\" y=\"9.125\" width=\"5.25\" height=\"5.25\" rx=\"1\" strokeWidth=\"1.5\" />\n    </svg>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { VariableHide, type GrafanaTheme2 } from '@grafana/data';\nimport {\n  AdHocFiltersVariable,\n  sceneGraph,\n  SceneObjectBase,\n  type AdHocFilterWithLabels,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { IconButton, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { VAR_OTHER_METRIC_FILTERS } from 'shared';\nimport { getTrailFor } from 'utils';\nimport { isAdHocFiltersVariable } from 'utils/utils.variables';\nimport { NULL_GROUP_BY_VALUE } from 'WingmanDataTrail/Labels/LabelsDataSource';\nimport { VAR_WINGMAN_GROUP_BY } from 'WingmanDataTrail/Labels/LabelsVariable';\nimport { computeMetricPrefixGroups } from 'WingmanDataTrail/MetricsVariables/computeMetricPrefixGroups';\nimport { computeMetricSuffixGroups } from 'WingmanDataTrail/MetricsVariables/computeMetricSuffixGroups';\nimport { computeRulesGroups } from 'WingmanDataTrail/MetricsVariables/computeRulesGroups';\n\nimport { reportExploreMetrics } from '../../interactions';\nimport { BookmarksList } from './sections/BookmarksList';\nimport { EventSectionValueChanged } from './sections/EventSectionValueChanged';\nimport { LabelsBrowser } from './sections/LabelsBrowser/LabelsBrowser';\nimport { MetricsFilterSection } from './sections/MetricsFilterSection/MetricsFilterSection';\nimport { Settings } from './sections/Settings';\nimport { SideBarButton } from './SideBarButton';\n\ntype Section = MetricsFilterSection | LabelsBrowser | BookmarksList | Settings;\n\ninterface SideBarState extends SceneObjectState {\n  sections: Section[];\n  visibleSection: Section | null;\n  sectionValues: Map<string, string[]>;\n}\n\nexport const metricFiltersVariables = ['filters-rule', 'filters-prefix', 'filters-suffix'] as const;\ntype MetricFiltersVariable = (typeof metricFiltersVariables)[number];\n\nexport class SideBar extends SceneObjectBase<SideBarState> {\n  constructor(state: Partial<SideBarState>) {\n    const sectionValues = SideBar.getSectionValuesFromUrl();\n\n    super({\n      key: 'sidebar',\n      visibleSection: null,\n      sections: [\n        new MetricsFilterSection({\n          key: 'filters-rule',\n          type: 'categories',\n          title: 'Rules filters',\n          description: 'Filter metrics and recording rules',\n          icon: 'rules',\n          computeGroups: computeRulesGroups,\n          showHideEmpty: false,\n          showSearch: false,\n          active: Boolean(sectionValues.get('filters-rule')?.length),\n        }),\n        new MetricsFilterSection({\n          key: 'filters-prefix',\n          type: 'prefixes',\n          title: 'Prefix filters',\n          description: 'Filter metrics based on their name prefix (Prometheus namespace)',\n          icon: 'A_',\n          computeGroups: computeMetricPrefixGroups,\n          active: Boolean(sectionValues.get('filters-prefix')?.length),\n        }),\n        new MetricsFilterSection({\n          key: 'filters-suffix',\n          type: 'suffixes',\n          title: 'Suffix filters',\n          description: 'Filter metrics based on their name suffix',\n          icon: '_Z',\n          computeGroups: computeMetricSuffixGroups,\n          active: Boolean(sectionValues.get('filters-suffix')?.length),\n        }),\n        new LabelsBrowser({\n          key: 'groupby-labels',\n          variableName: VAR_WINGMAN_GROUP_BY,\n          title: 'Group by labels',\n          description: 'Group metrics by their label values',\n          icon: 'groups',\n          active: sectionValues.has('groupby-labels'),\n        }),\n        new BookmarksList({\n          key: 'bookmarks',\n          title: 'Bookmarks',\n          description: 'Access your saved metrics for quick reference',\n          icon: 'star',\n        }),\n        new Settings({\n          key: 'settings',\n          title: 'Settings',\n          description: 'Settings',\n          icon: 'cog',\n          disabled: true,\n        }),\n      ],\n      sectionValues,\n      ...state,\n    });\n\n    // TODO: FIXME\n    // rule values are regexes, we do this only to disable adding the values to the button tooltip\n    sectionValues.set('filters-rule', []);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const cleanupOtherMetricsVar = this.initOtherMetricsVar();\n\n    this._subs.add(\n      this.subscribeToEvent(EventSectionValueChanged, (event) => {\n        const { key, values } = event.payload;\n        const { sectionValues } = this.state;\n        const newSectionValues = new Map(sectionValues).set(key, values);\n        this.setOtherMetricFilters(newSectionValues);\n        this.setState({ sectionValues: newSectionValues });\n      })\n    );\n\n    return () => {\n      cleanupOtherMetricsVar();\n    };\n  }\n\n  private setOtherMetricFilters(sectionValues: Map<string, string[]>) {\n    const otherMetricFiltersVar = sceneGraph.lookupVariable(VAR_OTHER_METRIC_FILTERS, this);\n    if (!isAdHocFiltersVariable(otherMetricFiltersVar)) {\n      return;\n    }\n\n    const varToTextMap: Record<MetricFiltersVariable, string> = {\n      'filters-rule': 'rule group',\n      'filters-prefix': 'prefix',\n      'filters-suffix': 'suffix',\n    };\n\n    const newFilters = Array.from(sectionValues.entries()).reduce<Array<AdHocFilterWithLabels<{}>>>(\n      (acc, [key, value]) => {\n        if (value.length && metricFiltersVariables.includes(key as MetricFiltersVariable)) {\n          acc.push({\n            key,\n            operator: '=',\n            value: value.join(', '),\n            keyLabel: varToTextMap[key as MetricFiltersVariable],\n          });\n        }\n\n        return acc;\n      },\n      []\n    );\n\n    otherMetricFiltersVar.setState({\n      filters: newFilters,\n      hide: newFilters.length ? VariableHide.hideLabel : VariableHide.hideVariable,\n    });\n  }\n\n  /**\n   * Initialize the other metrics variable and set the filters from the current sidebar selections.\n   * This powers the read-only, \"other metric filters\" UI next to the label filters.\n   * The purpose of this is to provide users with at-a-glance feedback about the current sidebar\n   * selections, without needing to interact with the sidebar.\n   */\n  private initOtherMetricsVar() {\n    const currentVariableSet = getTrailFor(this).state.$variables;\n    if (!currentVariableSet) {\n      return () => {};\n    }\n\n    const otherMetricFiltersVar = new AdHocFiltersVariable({\n      name: VAR_OTHER_METRIC_FILTERS,\n      readOnly: true,\n      skipUrlSync: true,\n      datasource: null,\n      hide: VariableHide.hideVariable,\n      layout: 'combobox',\n      applyMode: 'manual',\n      allowCustomValue: true,\n    });\n\n    currentVariableSet.setState({\n      variables: [...currentVariableSet.state.variables, otherMetricFiltersVar],\n    });\n\n    this.setOtherMetricFilters(this.state.sectionValues);\n\n    return () => {\n      currentVariableSet.setState({\n        variables: [...currentVariableSet.state.variables.filter((v) => v !== otherMetricFiltersVar)],\n      });\n    };\n  }\n\n  private static getSectionValuesFromUrl() {\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const sectionValues = new Map();\n\n    for (const filterKey of metricFiltersVariables) {\n      const filterValueFromUrl = urlSearchParams.get(filterKey);\n      sectionValues.set(filterKey, filterValueFromUrl ? filterValueFromUrl.split(',').map((v) => v.trim()) : []);\n    }\n\n    const labelValue = urlSearchParams.get(`var-${VAR_WINGMAN_GROUP_BY}`);\n    const isLabelsBrowserActive = Boolean(labelValue && labelValue !== NULL_GROUP_BY_VALUE);\n    if (isLabelsBrowserActive) {\n      sectionValues.set('groupby-labels', [labelValue!]);\n    }\n\n    return sectionValues;\n  }\n\n  private setActiveSection(sectionKey: string) {\n    const { visibleSection, sections } = this.state;\n\n    if (!sectionKey || sectionKey === visibleSection?.state.key) {\n      // Report closing the sidebar\n      reportExploreMetrics('metrics_sidebar_toggled', {\n        action: 'closed',\n        section: visibleSection?.state.key,\n      });\n\n      this.setState({ visibleSection: null });\n      return;\n    }\n\n    // Report opening the sidebar with the selected section\n    reportExploreMetrics('metrics_sidebar_toggled', {\n      action: 'opened',\n      section: sectionKey,\n    });\n\n    this.setState({\n      visibleSection: sections.find((section) => section.state.key === sectionKey) ?? null,\n    });\n\n    if (sectionKey === 'filters-prefix') {\n      reportExploreMetrics('sidebar_prefix_filter_section_clicked', {});\n    }\n\n    if (sectionKey === 'filters-suffix') {\n      reportExploreMetrics('sidebar_suffix_filter_section_clicked', {});\n    }\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SideBar>) => {\n    const styles = useStyles2(getStyles);\n    const { sections, visibleSection, sectionValues } = model.useState();\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.buttonsBar} data-testid=\"sidebar-buttons\">\n          {sections.map((section) => {\n            const { key, title, icon: iconOrText, disabled, active } = section.state;\n            const visible = visibleSection?.state.key === key;\n            const tooltip = sectionValues.get(key)?.length ? `${title}: ${sectionValues.get(key)?.join(', ')}` : title;\n\n            return (\n              <div\n                key={key}\n                className={cx(styles.buttonContainer, visible && 'visible', active && 'active', disabled && 'disabled')}\n              >\n                <SideBarButton\n                  ariaLabel={title}\n                  disabled={disabled}\n                  visible={visible}\n                  active={active}\n                  tooltip={tooltip}\n                  onClick={() => model.setActiveSection(key)}\n                  iconOrText={iconOrText}\n                />\n              </div>\n            );\n          })}\n        </div>\n        {visibleSection && (\n          <div className={styles.content} data-testid=\"sidebar-content\">\n            <IconButton\n              className={styles.closeButton}\n              name=\"times\"\n              aria-label=\"Close\"\n              tooltip=\"Close\"\n              tooltipPlacement=\"top\"\n              onClick={() => model.setActiveSection('')}\n            />\n            {/* TODO: find a better way */}\n            {visibleSection instanceof MetricsFilterSection && <visibleSection.Component model={visibleSection} />}\n            {visibleSection instanceof LabelsBrowser && <visibleSection.Component model={visibleSection} />}\n            {visibleSection instanceof BookmarksList && <visibleSection.Component model={visibleSection} />}\n            {visibleSection instanceof Settings && <visibleSection.Component model={visibleSection} />}\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      position: 'relative',\n      display: 'flex',\n      flexDirection: 'row',\n      height: '100%',\n      overflow: 'hidden',\n    }),\n    buttonsBar: css({\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      gap: 0,\n      width: '42px',\n      padding: 0,\n      margin: 0,\n      boxSizing: 'border-box',\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderRadius: theme.shape.radius.default,\n      backgroundColor: theme.colors.background.primary,\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n      position: 'relative',\n    }),\n    buttonContainer: css({\n      marginTop: theme.spacing(1),\n      '&::before': {\n        transition: '0.5s ease',\n        content: '\"\"',\n        position: 'absolute',\n        left: 0,\n        height: '32px',\n        borderLeft: `2px solid ${theme.colors.action.selectedBorder}`,\n        boxSizing: 'border-box',\n        opacity: 0,\n        visibility: 'hidden',\n      },\n      '&:hover::before': {\n        opacity: 1,\n        visibility: 'visible',\n      },\n      '&.visible::before': {\n        opacity: 1,\n        visibility: 'visible',\n      },\n      '&.disabled::before': {\n        opacity: 0,\n        visibility: 'hidden',\n      },\n      '&.active::after': {\n        content: '\"\"',\n        position: 'absolute',\n        right: 0,\n        width: '8px',\n        height: '8px',\n        backgroundColor: theme.colors.action.selectedBorder,\n        borderRadius: '50%',\n        margin: '2px 4px 0 0',\n      },\n    }),\n    content: css({\n      width: 'calc(300px - 42px)', // we want 300px in total\n      boxSizing: 'border-box',\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderLeft: 'none',\n      borderRadius: theme.shape.radius.default,\n      backgroundColor: theme.colors.background.canvas,\n      padding: theme.spacing(1.5),\n    }),\n    closeButton: css({\n      position: 'absolute',\n      top: theme.spacing(1.5),\n      right: theme.spacing(1),\n      margin: 0,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { DashboardCursorSync, type GrafanaTheme2 } from '@grafana/data';\nimport { useChromeHeaderHeight } from '@grafana/runtime';\nimport {\n  behaviors,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n  VariableDependencyConfig,\n  type CustomVariable,\n  type QueryVariable,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport { debounce } from 'lodash';\nimport React from 'react';\n\nimport { reportExploreMetrics } from 'interactions';\nimport { getColorByIndex, getTrailFor } from 'utils';\n\nimport { MetricSelectedEvent } from '../shared';\nimport { MetricsGroupByList } from './GroupBy/MetricsGroupByList';\nimport { MetricsWithLabelValueDataSource } from './GroupBy/MetricsWithLabelValue/MetricsWithLabelValueDataSource';\nimport { registerRuntimeDataSources } from './helpers/registerRuntimeDataSources';\nimport { LabelsDataSource, NULL_GROUP_BY_VALUE } from './Labels/LabelsDataSource';\nimport { LabelsVariable, VAR_WINGMAN_GROUP_BY } from './Labels/LabelsVariable';\nimport { ListControls } from './ListControls/ListControls';\nimport { EventSortByChanged } from './ListControls/MetricsSorter/EventSortByChanged';\nimport {\n  addRecentMetric,\n  MetricsSorter,\n  VAR_WINGMAN_SORT_BY,\n  type SortingOption,\n} from './ListControls/MetricsSorter/MetricsSorter';\nimport { EventQuickSearchChanged } from './ListControls/QuickSearch/EventQuickSearchChanged';\nimport { QuickSearch } from './ListControls/QuickSearch/QuickSearch';\nimport { GRID_TEMPLATE_COLUMNS, SimpleMetricsList } from './MetricsList/SimpleMetricsList';\nimport { EventMetricsVariableActivated } from './MetricsVariables/EventMetricsVariableActivated';\nimport { EventMetricsVariableDeactivated } from './MetricsVariables/EventMetricsVariableDeactivated';\nimport { EventMetricsVariableLoaded } from './MetricsVariables/EventMetricsVariableLoaded';\nimport { FilteredMetricsVariable } from './MetricsVariables/FilteredMetricsVariable';\nimport { MetricsVariable } from './MetricsVariables/MetricsVariable';\nimport { MetricsVariableFilterEngine, type MetricFilters } from './MetricsVariables/MetricsVariableFilterEngine';\nimport { MetricsVariableSortEngine } from './MetricsVariables/MetricsVariableSortEngine';\nimport { ApplyAction } from './MetricVizPanel/actions/ApplyAction';\nimport { ConfigureAction } from './MetricVizPanel/actions/ConfigureAction';\nimport { EventApplyFunction } from './MetricVizPanel/actions/EventApplyFunction';\nimport { EventConfigureFunction } from './MetricVizPanel/actions/EventConfigureFunction';\nimport { METRICS_VIZ_PANEL_HEIGHT_SMALL, MetricVizPanel } from './MetricVizPanel/MetricVizPanel';\nimport { SceneDrawer } from './SceneDrawer';\nimport { EventFiltersChanged } from './SideBar/sections/MetricsFilterSection/EventFiltersChanged';\nimport { MetricsFilterSection } from './SideBar/sections/MetricsFilterSection/MetricsFilterSection';\nimport { SideBar } from './SideBar/SideBar';\n\ninterface MetricsReducerState extends SceneObjectState {\n  listControls: ListControls;\n  sidebar: SideBar;\n  body: SceneObjectBase;\n  drawer: SceneDrawer;\n  enginesMap: Map<string, { filterEngine: MetricsVariableFilterEngine; sortEngine: MetricsVariableSortEngine }>;\n}\n\nexport class MetricsReducer extends SceneObjectBase<MetricsReducerState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_WINGMAN_GROUP_BY],\n    onReferencedVariableValueChanged: (variable) => {\n      this.updateBodyBasedOnGroupBy((variable as LabelsVariable).state.value as string);\n    },\n  });\n\n  // Report when a user completes typing (after 1 second)\n  private readonly _debounceReportQuickSearchChange = debounce((searchText: string) => {\n    if (searchText) {\n      reportExploreMetrics('quick_search_used', {});\n    }\n  }, 1000);\n\n  public constructor() {\n    super({\n      $variables: new SceneVariableSet({\n        variables: [new MetricsVariable(), new FilteredMetricsVariable(), new LabelsVariable()],\n      }),\n      listControls: new ListControls({}),\n      sidebar: new SideBar({}),\n      body: new SimpleMetricsList() as unknown as SceneObjectBase,\n      drawer: new SceneDrawer({}),\n      enginesMap: new Map(),\n    });\n\n    registerRuntimeDataSources([new LabelsDataSource(), new MetricsWithLabelValueDataSource()]);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.updateBodyBasedOnGroupBy(\n      (sceneGraph.lookupVariable(VAR_WINGMAN_GROUP_BY, this) as LabelsVariable).state.value as string\n    );\n\n    this.subscribeToEvents();\n  }\n\n  private subscribeToEvents() {\n    this.initVariablesFilteringAndSorting();\n\n    this._subs.add(\n      this.subscribeToEvent(EventConfigureFunction, (event) => {\n        this.openDrawer(event.payload.metricName);\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventApplyFunction, () => {\n        this.state.drawer.close();\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(MetricSelectedEvent, (event) => {\n        if (event.payload !== undefined) {\n          addRecentMetric(event.payload);\n        }\n      })\n    );\n  }\n\n  /**\n   * The centralized filtering and sorting mechanism implemented here is decoupled via the usage of events.\n   * In order to work, the variables to be filtered/sorted must emit lifecycle events.\n   * This is done via the `withLifecycleEvents` decorator function.\n   *\n   * For example, check the `FilteredMetricsVariable` class.\n   */\n  private initVariablesFilteringAndSorting() {\n    this._subs.add(\n      this.subscribeToEvent(EventMetricsVariableActivated, (event) => {\n        // register engines\n        const { key } = event.payload;\n        const filteredMetricsVariable = sceneGraph.findByKey(this, key) as QueryVariable;\n\n        this.state.enginesMap.set(key, {\n          filterEngine: new MetricsVariableFilterEngine(filteredMetricsVariable),\n          sortEngine: new MetricsVariableSortEngine(filteredMetricsVariable),\n        });\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventMetricsVariableDeactivated, (event) => {\n        // unregister engines\n        this.state.enginesMap.delete(event.payload.key);\n      })\n    );\n\n    const quickSearch = sceneGraph.findByKeyAndType(this, 'quick-search', QuickSearch);\n    const filterSections = sceneGraph.findAllObjects(\n      this,\n      (o) => o instanceof MetricsFilterSection\n    ) as MetricsFilterSection[];\n    const metricsSorter = sceneGraph.findByKeyAndType(this, 'metrics-sorter', MetricsSorter);\n    const sortByVariable = metricsSorter.state.$variables.getByName(VAR_WINGMAN_SORT_BY) as CustomVariable;\n\n    this._subs.add(\n      this.subscribeToEvent(EventMetricsVariableLoaded, (event) => {\n        // filter and sort on initial load\n        const { key, options } = event.payload;\n        const { filterEngine, sortEngine } = this.state.enginesMap.get(key)!;\n\n        filterEngine.setInitOptions(options);\n\n        const filters: Partial<MetricFilters> = {\n          names: quickSearch.state.value ? [quickSearch.state.value] : [],\n        };\n\n        for (const filterSection of filterSections) {\n          filters[filterSection.state.type] = filterSection.state.selectedGroups.map((g) => g.value);\n        }\n\n        filterEngine.applyFilters(filters, { forceUpdate: true, notify: false });\n        sortEngine.sort(sortByVariable.state.value as SortingOption);\n      })\n    );\n\n    /* Filters */\n\n    this._subs.add(\n      this.subscribeToEvent(EventQuickSearchChanged, (event) => {\n        const { searchText } = event.payload;\n\n        for (const [, { filterEngine, sortEngine }] of this.state.enginesMap) {\n          filterEngine.applyFilters({ names: searchText ? [searchText] : [] });\n          sortEngine.sort(sortByVariable.state.value as SortingOption);\n        }\n\n        this._debounceReportQuickSearchChange(searchText);\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventFiltersChanged, (event) => {\n        const { type, filters } = event.payload;\n\n        for (const [, { filterEngine, sortEngine }] of this.state.enginesMap) {\n          filterEngine.applyFilters({ [type]: filters });\n          sortEngine.sort(sortByVariable.state.value as SortingOption);\n        }\n      })\n    );\n\n    /* Sorting */\n\n    this._subs.add(\n      this.subscribeToEvent(EventSortByChanged, (event) => {\n        const { sortBy } = event.payload;\n\n        for (const [, { sortEngine }] of this.state.enginesMap) {\n          sortEngine.sort(sortBy);\n        }\n\n        reportExploreMetrics('sorting_changed', { from: 'metrics-reducer', sortBy });\n      })\n    );\n  }\n\n  private updateBodyBasedOnGroupBy(groupByValue: string) {\n    this.setState({\n      body:\n        !groupByValue || groupByValue === NULL_GROUP_BY_VALUE\n          ? (new SimpleMetricsList() as unknown as SceneObjectBase)\n          : (new MetricsGroupByList({ labelName: groupByValue }) as unknown as SceneObjectBase),\n    });\n  }\n\n  private openDrawer(metricName: string) {\n    const trail = getTrailFor(this);\n    this.state.drawer.open({\n      title: 'Choose a new Prometheus function',\n      subTitle: metricName,\n      body: new SceneCSSGridLayout({\n        templateColumns: GRID_TEMPLATE_COLUMNS,\n        autoRows: METRICS_VIZ_PANEL_HEIGHT_SMALL,\n        isLazy: true,\n        $behaviors: [\n          new behaviors.CursorSync({\n            key: 'metricCrosshairSync',\n            sync: DashboardCursorSync.Crosshair,\n          }),\n        ],\n        children: ConfigureAction.PROMETHEUS_FN_OPTIONS.map((option, colorIndex) => {\n          return new SceneCSSGridItem({\n            body: new MetricVizPanel({\n              title: option.label,\n              metricName,\n              color: getColorByIndex(colorIndex),\n              prometheusFunction: option.value,\n              height: METRICS_VIZ_PANEL_HEIGHT_SMALL,\n              hideLegend: true,\n              highlight: colorIndex === 1,\n              isNativeHistogram: trail.isNativeHistogram(metricName),\n              headerActions: [\n                new ApplyAction({\n                  metricName,\n                  prometheusFunction: option.value,\n                  disabled: colorIndex === 1,\n                }),\n              ],\n            }),\n          });\n        }),\n      }),\n    });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MetricsReducer>) => {\n    const chromeHeaderHeight = useChromeHeaderHeight() ?? 0;\n    const styles = useStyles2(getStyles, chromeHeaderHeight);\n\n    const { $variables, body, listControls, drawer, sidebar } = model.useState();\n\n    return (\n      <>\n        <div className={styles.listControls} data-testid=\"list-controls\">\n          <listControls.Component model={listControls} />\n        </div>\n        <div className={styles.body}>\n          <div className={styles.sidebar} data-testid=\"sidebar\">\n            <sidebar.Component model={sidebar} />\n          </div>\n          <div className={styles.list}>\n            <body.Component model={body} />\n          </div>\n        </div>\n        <div className={styles.variables}>\n          {$variables?.state.variables.map((variable) => (\n            <variable.Component key={variable.state.name} model={variable} />\n          ))}\n        </div>\n        <drawer.Component model={drawer} />\n      </>\n    );\n  };\n}\n\n// the height of header between Grafana's chrome header and the metrics list container.\nconst APP_HEADER_HEIGHT = 144;\n\nfunction getStyles(theme: GrafanaTheme2, chromeHeaderHeight: number) {\n  return {\n    listControls: css({\n      marginBottom: theme.spacing(1.5),\n    }),\n    body: css({\n      display: 'flex',\n      flexDirection: 'row',\n      gap: theme.spacing(1),\n      height: `calc(100vh - ${chromeHeaderHeight + APP_HEADER_HEIGHT}px)`,\n    }),\n    list: css({\n      width: '100%',\n      overflowY: 'auto',\n    }),\n    sidebar: css({\n      flex: '0 0 auto',\n      overflowY: 'auto',\n    }),\n    variables: css({\n      display: 'none',\n    }),\n  };\n}\n","import { registerRuntimeDataSource, type RuntimeDataSource } from '@grafana/scenes';\n\nimport { displayError } from './displayStatus';\n\nexport function registerRuntimeDataSources(dataSources: RuntimeDataSource[]) {\n  try {\n    for (const dataSource of dataSources) {\n      registerRuntimeDataSource({ dataSource });\n    }\n  } catch (error) {\n    const { message } = error as Error;\n\n    if (!/A runtime data source with uid (.+) has already been registered/.test(message)) {\n      displayError(error as Error, [\n        'Fail to register all the runtime data sources!',\n        'The application cannot work as expected, please try reloading the page or if the problem persists, contact your organization admin.',\n      ]);\n    }\n  }\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Dropdown, Switch, ToolbarButton, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { MetricSelectScene } from 'MetricSelect/MetricSelectScene';\n\nimport { reportExploreMetrics } from './interactions';\nimport { MetricScene } from './MetricScene';\nimport { getTrailFor } from './utils';\n\nexport interface DataTrailSettingsState extends SceneObjectState {\n  stickyMainGraph?: boolean;\n  isOpen?: boolean;\n}\n\nexport class DataTrailSettings extends SceneObjectBase<DataTrailSettingsState> {\n  constructor(state: Partial<DataTrailSettingsState>) {\n    super({\n      stickyMainGraph: state.stickyMainGraph ?? true,\n      isOpen: state.isOpen ?? false,\n    });\n  }\n\n  public onToggleStickyMainGraph = () => {\n    const stickyMainGraph = !this.state.stickyMainGraph;\n    reportExploreMetrics('settings_changed', { stickyMainGraph });\n    this.setState({ stickyMainGraph });\n  };\n\n  public onToggleOpen = (isOpen: boolean) => {\n    this.setState({ isOpen });\n  };\n\n  static Component = ({ model }: SceneComponentProps<DataTrailSettings>) => {\n    const { stickyMainGraph, isOpen } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    const trail = getTrailFor(model);\n    const { topScene } = trail.useState();\n\n    const isButtonVisible = topScene instanceof MetricSelectScene || topScene instanceof MetricScene;\n\n    if (!isButtonVisible) {\n      return null;\n    }\n\n    const renderPopover = () => {\n      return (\n        <div className={styles.popover} onClick={(evt) => evt.stopPropagation()}>\n          <div className={styles.heading}>Settings</div>\n          {topScene instanceof MetricScene && (\n            <div className={styles.options}>\n              <div>Always keep selected metric graph in-view</div>\n              <Switch value={stickyMainGraph} onChange={model.onToggleStickyMainGraph} />\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    return (\n      <Dropdown overlay={renderPopover} placement=\"bottom\" onVisibleChange={model.onToggleOpen}>\n        <ToolbarButton icon=\"cog\" variant=\"canvas\" isOpen={isOpen} data-testid=\"settings-button\" />\n      </Dropdown>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    popover: css({\n      display: 'flex',\n      padding: theme.spacing(2),\n      flexDirection: 'column',\n      background: theme.colors.background.primary,\n      boxShadow: theme.shadows.z3,\n      borderRadius: theme.shape.radius.default,\n      border: `1px solid ${theme.colors.border.weak}`,\n      zIndex: 1,\n      marginRight: theme.spacing(2),\n    }),\n    heading: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      paddingBottom: theme.spacing(2),\n    }),\n    options: css({\n      display: 'grid',\n      gridTemplateColumns: '1fr 50px',\n      rowGap: theme.spacing(1),\n      columnGap: theme.spacing(2),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { VariableHide, type AdHocVariableFilter, type GrafanaTheme2, type RawTimeRange } from '@grafana/data';\nimport { utf8Support, type PromQuery } from '@grafana/prometheus';\nimport { useChromeHeaderHeight } from '@grafana/runtime';\nimport {\n  AdHocFiltersVariable,\n  ConstantVariable,\n  CustomVariable,\n  SceneControlsSpacer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  SceneReactObject,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  SceneVariableSet,\n  UrlSyncContextProvider,\n  VariableDependencyConfig,\n  VariableValueSelectors,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n  type SceneObjectWithUrlSync,\n  type SceneQueryRunner,\n  type SceneVariable,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { useEffect, useRef } from 'react';\n\nimport { MetricsDrilldownDataSourceVariable } from 'MetricsDrilldownDataSourceVariable';\nimport { PluginInfo } from 'PluginInfo/PluginInfo';\nimport { getOtelExperienceToggleState } from 'services/store';\nimport { displayWarning } from 'WingmanDataTrail/helpers/displayStatus';\nimport { MetricsReducer } from 'WingmanDataTrail/MetricsReducer';\n\nimport { ROUTES } from './constants';\nimport { DataTrailSettings } from './DataTrailSettings';\nimport { MetricDatasourceHelper } from './helpers/MetricDatasourceHelper';\nimport { reportChangeInLabelFilters, reportExploreMetrics } from './interactions';\nimport { MetricScene } from './MetricScene';\nimport { MetricSelectScene } from './MetricSelect/MetricSelectScene';\nimport { getDeploymentEnvironments, getNonPromotedOtelResources, totalOtelResources } from './otel/api';\nimport {\n  getOtelJoinQuery,\n  getOtelResourcesObject,\n  manageOtelAndMetricFilters,\n  updateOtelData,\n  updateOtelJoinWithGroupLeft,\n} from './otel/util';\nimport {\n  getVariablesWithOtelJoinQueryConstant,\n  MetricSelectedEvent,\n  trailDS,\n  VAR_DATASOURCE,\n  VAR_DATASOURCE_EXPR,\n  VAR_FILTERS,\n  VAR_MISSING_OTEL_TARGETS,\n  VAR_OTEL_AND_METRIC_FILTERS,\n  VAR_OTEL_DEPLOYMENT_ENV,\n  VAR_OTEL_GROUP_LEFT,\n  VAR_OTEL_JOIN_QUERY,\n  VAR_OTEL_RESOURCES,\n} from './shared';\nimport { getTrailStore } from './TrailStore/TrailStore';\nimport { currentPathIncludes, getTrailFor, limitAdhocProviders } from './utils';\nimport { isSceneQueryRunner } from './utils/utils.queries';\nimport { getSelectedScopes } from './utils/utils.scopes';\nimport { isAdHocFiltersVariable, isConstantVariable } from './utils/utils.variables';\n\nexport interface DataTrailState extends SceneObjectState {\n  topScene?: SceneObject;\n  embedded?: boolean;\n  controls: SceneObject[];\n  settings: DataTrailSettings;\n  pluginInfo: SceneReactObject;\n  createdAt: number;\n\n  // wingman\n  dashboardMetrics?: Record<string, number>;\n  alertingMetrics?: Record<string, number>;\n\n  // just for the starting data source\n  initialDS?: string;\n  initialFilters?: AdHocVariableFilter[];\n\n  // this is for otel, if the data source has it, it will be updated here\n  hasOtelResources?: boolean;\n  useOtelExperience?: boolean;\n  isStandardOtel?: boolean;\n  nonPromotedOtelResources?: string[];\n  initialOtelCheckComplete?: boolean; // updated after the first otel check\n  startButtonClicked?: boolean; // from original landing page\n  resettingOtel?: boolean; // when switching OTel off from the switch\n  addingLabelFromBreakdown?: boolean; // do not use the otel and metrics var subscription when adding label from the breakdown\n  afterFirstOtelCheck?: boolean; // don't reset because of the migration on the first otel check from the data source updating\n\n  // Synced with url\n  metric?: string;\n  metricSearch?: string;\n\n  histogramsLoaded: boolean;\n  nativeHistograms: string[];\n  nativeHistogramMetric: string;\n\n  trailActivated: boolean; // this indicates that the trail has been updated by metric or filter selected\n}\n\nexport class DataTrail extends SceneObjectBase<DataTrailState> implements SceneObjectWithUrlSync {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, {\n    keys: ['metric', 'metricSearch', 'nativeHistogramMetric'],\n  });\n\n  public constructor(state: Partial<DataTrailState>) {\n    super({\n      $timeRange: state.$timeRange ?? new SceneTimeRange({}),\n      // the initial variables should include a metric for metric scene and the otelJoinQuery.\n      // NOTE: The other OTEL filters should be included too before this work is merged\n      $variables: state.$variables ?? getVariableSet(state.initialDS, state.metric, state.initialFilters),\n      controls: state.controls ?? [\n        new VariableValueSelectors({ layout: 'vertical' }),\n        new SceneControlsSpacer(),\n        new SceneTimePicker({}),\n        new SceneRefreshPicker({}),\n      ],\n      settings: state.settings ?? new DataTrailSettings({}),\n      pluginInfo: new SceneReactObject({ component: PluginInfo }),\n      createdAt: state.createdAt ?? new Date().getTime(),\n      dashboardMetrics: {},\n      alertingMetrics: {},\n      // default to false but update this to true on updateOtelData()\n      // or true if the user either turned on the experience\n      useOtelExperience: state.useOtelExperience ?? false,\n      nativeHistograms: state.nativeHistograms ?? [],\n      histogramsLoaded: state.histogramsLoaded ?? false,\n      nativeHistogramMetric: state.nativeHistogramMetric ?? '',\n      trailActivated: state.trailActivated ?? false,\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  public _onActivate() {\n    this.setState({ trailActivated: true });\n\n    if (!this.state.topScene) {\n      this.setState({ topScene: getTopSceneFor(this.state.metric) });\n    }\n\n    // Some scene elements publish this\n    this.subscribeToEvent(MetricSelectedEvent, this._handleMetricSelectedEvent.bind(this));\n\n    const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, this);\n    if (isAdHocFiltersVariable(filtersVariable)) {\n      this._subs.add(\n        filtersVariable?.subscribeToState((newState, prevState) => {\n          if (!this._addingFilterWithoutReportingInteraction) {\n            reportChangeInLabelFilters(newState.filters, prevState.filters);\n          }\n        })\n      );\n    }\n\n    // INVESTIGATE\n    // Every initiailization of GMD \"changes\" the datasource and\n    // the variableDependency for VAR_DATASOURCE is called in\n    // protected _variableDependency\n    // This is where we do the OTel check\n    // EXCEPT FOR gdev-prometheus.\n    // Because gdev-prometheus does not activate the variable dependecy,\n    // this is why this special handling exists\n    const datasourceUid = sceneGraph.interpolate(this, VAR_DATASOURCE_EXPR);\n    if (datasourceUid === 'gdev-prometheus') {\n      this.checkDataSourceForOTelResources();\n    }\n\n    // This is for OTel consolidation filters\n    // whenever the otel and metric filter is updated,\n    // we need to add that filter to the correct otel resource var or var filter\n    // so the filter can be interpolated in the query correctly\n    const otelAndMetricsFiltersVariable = sceneGraph.lookupVariable(VAR_OTEL_AND_METRIC_FILTERS, this);\n    const otelFiltersVariable = sceneGraph.lookupVariable(VAR_OTEL_RESOURCES, this);\n    const otelJoinQueryVariable = sceneGraph.lookupVariable(VAR_OTEL_JOIN_QUERY, this);\n    if (\n      isAdHocFiltersVariable(otelAndMetricsFiltersVariable) &&\n      isAdHocFiltersVariable(otelFiltersVariable) &&\n      isAdHocFiltersVariable(filtersVariable) &&\n      isConstantVariable(otelJoinQueryVariable)\n    ) {\n      this._subs.add(\n        otelAndMetricsFiltersVariable?.subscribeToState((newState, prevState) => {\n          // identify the added, updated or removed variables and update the correct filter,\n          // either the otel resource or the var filter\n          // do not update on switching on otel experience or the initial check\n          // do not update when selecting a label from metric scene breakdown\n          if (\n            this.state.useOtelExperience &&\n            this.state.initialOtelCheckComplete &&\n            !this.state.addingLabelFromBreakdown\n          ) {\n            const nonPromotedOtelResources = this.state.nonPromotedOtelResources ?? [];\n            manageOtelAndMetricFilters(\n              newState.filters,\n              prevState.filters,\n              nonPromotedOtelResources,\n              otelFiltersVariable,\n              filtersVariable\n            );\n            const otelResourcesObject = getOtelResourcesObject(this);\n            otelJoinQueryVariable.setState({ value: getOtelJoinQuery(otelResourcesObject) });\n          }\n        })\n      );\n    }\n\n    // Save the current trail as a recent (if the browser closes or reloads) if user selects a metric OR applies filters to metric select view\n    const saveRecentTrail = () => {\n      const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, this);\n      const hasFilters = isAdHocFiltersVariable(filtersVariable) && filtersVariable.state.filters.length > 0;\n      if (this.state.metric || hasFilters) {\n        getTrailStore().setRecentTrail(this);\n      }\n    };\n    window.addEventListener('unload', saveRecentTrail);\n\n    return () => {\n      if (!this.state.embedded) {\n        saveRecentTrail();\n      }\n      window.removeEventListener('unload', saveRecentTrail);\n    };\n  }\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_DATASOURCE, VAR_OTEL_RESOURCES, VAR_OTEL_JOIN_QUERY, VAR_OTEL_AND_METRIC_FILTERS],\n    onReferencedVariableValueChanged: async (variable: SceneVariable) => {\n      const { name } = variable.state;\n\n      if (name === VAR_DATASOURCE) {\n        this.datasourceHelper.reset();\n\n        // reset native histograms\n        this.resetNativeHistograms();\n\n        if (this.state.afterFirstOtelCheck) {\n          // we need a new check for OTel\n          this.setState({ initialOtelCheckComplete: false });\n          // clear out the OTel filters, do not clear out var filters\n          this.resetOtelExperience();\n        }\n        // fresh check for otel experience\n        this.checkDataSourceForOTelResources();\n      }\n    },\n  });\n\n  /**\n   * Assuming that the change in filter was already reported with a cause other than `'adhoc_filter'`,\n   * this will modify the adhoc filter variable and prevent the automatic reporting which would\n   * normally occur through the call to `reportChangeInLabelFilters`.\n   */\n  public addFilterWithoutReportingInteraction(filter: AdHocVariableFilter) {\n    const variable = sceneGraph.lookupVariable('filters', this);\n    const otelAndMetricsFiltersVariable = sceneGraph.lookupVariable(VAR_OTEL_AND_METRIC_FILTERS, this);\n    if (!isAdHocFiltersVariable(variable) || !isAdHocFiltersVariable(otelAndMetricsFiltersVariable)) {\n      return;\n    }\n\n    this._addingFilterWithoutReportingInteraction = true;\n    if (this.state.useOtelExperience) {\n      otelAndMetricsFiltersVariable.setState({ filters: [...otelAndMetricsFiltersVariable.state.filters, filter] });\n    } else {\n      variable.setState({ filters: [...variable.state.filters, filter] });\n    }\n    this._addingFilterWithoutReportingInteraction = false;\n  }\n\n  private _addingFilterWithoutReportingInteraction = false;\n  private datasourceHelper = new MetricDatasourceHelper(this);\n\n  public getMetricMetadata(metric?: string) {\n    return this.datasourceHelper.getMetricMetadata(metric);\n  }\n\n  public isNativeHistogram(metric: string) {\n    return this.datasourceHelper.isNativeHistogram(metric);\n  }\n\n  // use this to initialize histograms in all scenes\n  public async initializeHistograms() {\n    if (!this.state.histogramsLoaded) {\n      try {\n        await this.datasourceHelper.initializeHistograms();\n      } catch (error) {\n        displayWarning(['Error while initializing histograms!']);\n      }\n\n      this.setState({\n        nativeHistograms: this.listNativeHistograms(),\n        histogramsLoaded: true,\n      });\n    }\n  }\n\n  public listNativeHistograms() {\n    return this.datasourceHelper.listNativeHistograms() ?? [];\n  }\n\n  private resetNativeHistograms() {\n    this.setState({\n      histogramsLoaded: false,\n      nativeHistograms: [],\n    });\n  }\n\n  public getCurrentMetricMetadata() {\n    return this.getMetricMetadata(this.state.metric);\n  }\n\n  private async _handleMetricSelectedEvent(evt: MetricSelectedEvent) {\n    const metric = evt.payload ?? '';\n\n    if (this.state.useOtelExperience) {\n      await updateOtelJoinWithGroupLeft(this, metric);\n    }\n\n    // from the metric preview panel we have the info loaded to determine that a metric is a native histogram\n    let nativeHistogramMetric = false;\n    if (this.isNativeHistogram(metric)) {\n      nativeHistogramMetric = true;\n    }\n\n    this._urlSync.performBrowserHistoryAction(() => {\n      this.setState(this.getSceneUpdatesForNewMetricValue(metric, nativeHistogramMetric));\n    });\n\n    // Add metric to adhoc filters baseFilter\n    const filterVar = sceneGraph.lookupVariable(VAR_FILTERS, this);\n    if (isAdHocFiltersVariable(filterVar)) {\n      filterVar.setState({\n        baseFilters: getBaseFiltersForMetric(evt.payload),\n      });\n    }\n  }\n\n  private getSceneUpdatesForNewMetricValue(metric: string | undefined, nativeHistogramMetric?: boolean) {\n    const stateUpdate: Partial<DataTrailState> = {};\n    stateUpdate.metric = metric;\n    // refactoring opportunity? Or do we pass metric knowledge all the way down?\n    // must pass this native histogram prometheus knowledge deep into\n    // the topscene set on the trail > MetricScene > getAutoQueriesForMetric() > createHistogramMetricQueryDefs();\n    stateUpdate.nativeHistogramMetric = nativeHistogramMetric ? '1' : '';\n    stateUpdate.topScene = getTopSceneFor(metric, nativeHistogramMetric);\n\n    return stateUpdate;\n  }\n\n  getUrlState(): SceneObjectUrlValues {\n    const { metric, metricSearch, nativeHistogramMetric } = this.state;\n    return {\n      metric,\n      metricSearch,\n      // store the native histogram knowledge in url for the metric scene\n      nativeHistogramMetric,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<DataTrailState> = {};\n\n    if (typeof values.metric === 'string') {\n      if (this.state.metric !== values.metric) {\n        // if we have a metric and we have stored in the url that it is a native histogram\n        // we can pass that info into the metric scene to generate the appropriate queries\n        let nativeHistogramMetric = false;\n        if (values.nativeHistogramMetric === '1') {\n          nativeHistogramMetric = true;\n        }\n\n        Object.assign(stateUpdate, this.getSceneUpdatesForNewMetricValue(values.metric, nativeHistogramMetric));\n      }\n    } else if (values.metric == null) {\n      stateUpdate.metric = undefined;\n      stateUpdate.topScene = getFreshTopScene();\n    }\n\n    if (typeof values.metricSearch === 'string') {\n      stateUpdate.metricSearch = values.metricSearch;\n    } else if (values.metric == null) {\n      stateUpdate.metricSearch = undefined;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  /**\n   * Check that the data source has otel resources\n   * Check that the data source is standard for OTEL\n   * Show a warning if not\n   * Update the following variables:\n   * otelResources (filters), otelJoinQuery (used in the query)\n   * Enable the otel experience\n   *\n   * @returns\n   */\n  public async checkDataSourceForOTelResources() {\n    // call up in to the parent trail\n    const trail = getTrailFor(this);\n\n    // get the time range\n    const timeRange: RawTimeRange | undefined = trail.state.$timeRange?.state;\n\n    if (!timeRange) {\n      return;\n    }\n\n    const datasourceUid = sceneGraph.interpolate(trail, VAR_DATASOURCE_EXPR);\n    const otelResources = await this.fetchOtelResources(datasourceUid, timeRange);\n\n    // Check the local storage OTel toggle state\n    const isEnabledInLocalStorage = getOtelExperienceToggleState();\n\n    // This is the function that will turn on OTel for the entire app.\n    // The conditions to use this function are\n    // 1. must be an otel data source\n    // 2. Do not turn it on if the start button was clicked\n    // 3. Url or bookmark has previous otel filters\n    // 4. We are resetting OTel with the toggle switch\n    // 5. The OTel experience is enabled in local storage\n    if (\n      this.shouldEnableOtelExperience(otelResources, isEnabledInLocalStorage)\n      // otelResources.hasOtelResources &&\n      // otelResources.nonPromotedOtelResources && // it is an otel data source\n      // !this.state.startButtonClicked && // we are not starting from the start button\n      // (otelResources.previouslyUsedOtelResources || this.state.resettingOtel) && // there are otel filters or we are restting\n      // isEnabledInLocalStorage // OTel experience is enabled in local storage\n    ) {\n      // HERE WE START THE OTEL EXPERIENCE ENGINE\n      // 1. Set deployment variable values\n      // 2. update all other variables and state\n      updateOtelData(\n        this,\n        datasourceUid,\n        timeRange,\n        otelResources.deploymentEnvironments,\n        otelResources.hasOtelResources,\n        otelResources.nonPromotedOtelResources\n      );\n    } else {\n      // this will update state to show the OTel toggle switch because hasOtelResources is the flag\n      // hasOtelResources is checked in MetricSelectScene to show the OTel toggle switch\n      this.resetOtelExperience(otelResources.hasOtelResources, otelResources.nonPromotedOtelResources);\n    }\n  }\n\n  /**\n   * Fetch OTel resources for a given datasource and time range\n   */\n  private async fetchOtelResources(datasourceUid: string, timeRange: RawTimeRange) {\n    const otelTargets = await totalOtelResources(datasourceUid, timeRange);\n    // if there are no otel targets, return early\n    // the following call for deployment environments will throw an error for a vendor data source that does not handle errors\n    // similar to the other Prometheus flavors.\n    if (otelTargets.jobs.length === 0 && otelTargets.instances.length === 0) {\n      return {\n        hasOtelResources: false,\n        nonPromotedOtelResources: [],\n        previouslyUsedOtelResources: false,\n      };\n    }\n    const deploymentEnvironments = await getDeploymentEnvironments(datasourceUid, timeRange, getSelectedScopes());\n    const hasOtelResources = otelTargets.jobs.length > 0 && otelTargets.instances.length > 0;\n\n    // Future refactor: non promoted resources could be the full check\n    //   - remove hasOtelResources\n    //   - remove deployment environments as a check\n    const nonPromotedOtelResources = await getNonPromotedOtelResources(datasourceUid, timeRange);\n\n    return {\n      otelTargets,\n      deploymentEnvironments,\n      hasOtelResources,\n      // all previous uses of OTel resources should start with it off\n      previouslyUsedOtelResources: false,\n      nonPromotedOtelResources,\n    };\n  }\n\n  /**\n   * Determines if the OTel experience should be enabled based on several conditions\n   *\n   * @param otelResources - The OTel resources information\n   * @param isEnabledInLocalStorage - Whether OTel experience is enabled in local storage\n   * @returns boolean - True if OTel experience should be enabled\n   */\n  private shouldEnableOtelExperience(\n    otelResources: {\n      hasOtelResources: boolean;\n      nonPromotedOtelResources: string[];\n      previouslyUsedOtelResources: boolean;\n    },\n    isEnabledInLocalStorage: boolean\n  ): boolean {\n    return (\n      otelResources.hasOtelResources &&\n      //otelResources.nonPromotedOtelResources.length && // it is an otel data source\n      !this.state.startButtonClicked && // we are not starting from the start button\n      (otelResources.previouslyUsedOtelResources || this.state.resettingOtel || false) && // there are otel filters or we are resetting\n      isEnabledInLocalStorage // OTel experience is enabled in local storage\n    );\n  }\n\n  resetOtelExperience(hasOtelResources?: boolean, nonPromotedResources?: string[]) {\n    const otelResourcesVariable = sceneGraph.lookupVariable(VAR_OTEL_RESOURCES, this);\n    const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, this);\n    const otelAndMetricsFiltersVariable = sceneGraph.lookupVariable(VAR_OTEL_AND_METRIC_FILTERS, this);\n    const otelJoinQueryVariable = sceneGraph.lookupVariable(VAR_OTEL_JOIN_QUERY, this);\n\n    if (\n      !(\n        isAdHocFiltersVariable(otelResourcesVariable) &&\n        isAdHocFiltersVariable(filtersVariable) &&\n        isAdHocFiltersVariable(otelAndMetricsFiltersVariable) &&\n        isConstantVariable(otelJoinQueryVariable)\n      )\n    ) {\n      return;\n    }\n\n    // show the var filters normally\n    filtersVariable.setState({\n      addFilterButtonText: 'Add label',\n      label: 'Select label',\n      hide: VariableHide.hideLabel,\n    });\n\n    // Resetting the otel experience filters means clearing both the otel resources var and the otelMetricsVar\n    // hide the super otel and metric filter and reset it\n    otelAndMetricsFiltersVariable.setState({\n      filters: [],\n      hide: VariableHide.hideVariable,\n    });\n\n    // if there are no resources reset the otel variables and otel state\n    // or if not standard\n    otelResourcesVariable.setState({\n      filters: [],\n      defaultKeys: [],\n      hide: VariableHide.hideVariable,\n    });\n\n    otelJoinQueryVariable.setState({ value: '' });\n\n    // potential full reset when a data source fails the check or is the initial check with turning off\n    if (hasOtelResources && nonPromotedResources) {\n      this.setState({\n        hasOtelResources,\n        isStandardOtel: nonPromotedResources.length > 0,\n        useOtelExperience: false,\n        initialOtelCheckComplete: true,\n        afterFirstOtelCheck: true,\n      });\n    } else {\n      // partial reset when a user turns off the otel experience\n      this.setState({\n        useOtelExperience: false,\n        initialOtelCheckComplete: true,\n        afterFirstOtelCheck: true,\n      });\n    }\n  }\n\n  public getQueries(): PromQuery[] {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const sqrs = sceneGraph.findAllObjects(this, (b) => isSceneQueryRunner(b)) as SceneQueryRunner[];\n\n    return sqrs.reduce<PromQuery[]>((acc, sqr) => {\n      acc.push(\n        ...sqr.state.queries.map((q) => ({\n          ...q,\n          expr: sceneGraph.interpolate(sqr, q.expr),\n        }))\n      );\n\n      return acc;\n    }, []);\n  }\n\n  static Component = ({ model }: SceneComponentProps<DataTrail>) => {\n    const { controls, topScene, settings, pluginInfo, useOtelExperience, embedded } = model.useState();\n\n    const chromeHeaderHeight = useChromeHeaderHeight();\n    const styles = useStyles2(getStyles, embedded ? 0 : chromeHeaderHeight ?? 0);\n    // need to initialize this here and not on activate because it requires the data source helper to be fully initialized first\n    model.initializeHistograms();\n\n    useEffect(() => {\n      const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, model);\n      const otelAndMetricsFiltersVariable = sceneGraph.lookupVariable(VAR_OTEL_AND_METRIC_FILTERS, model);\n      const limitedFilterVariable = useOtelExperience ? otelAndMetricsFiltersVariable : filtersVariable;\n      const datasourceHelper = model.datasourceHelper;\n      limitAdhocProviders(model, limitedFilterVariable, datasourceHelper);\n    }, [model, useOtelExperience]);\n\n    const reportOtelExperience = useRef(false);\n    // only report otel experience once\n    if (useOtelExperience && !reportOtelExperience.current) {\n      reportExploreMetrics('otel_experience_used', {});\n      reportOtelExperience.current = true;\n    }\n\n    return (\n      <div className={styles.container}>\n        {controls && (\n          <div className={styles.controls} data-testid=\"app-controls\">\n            {controls.map((control) => (\n              <control.Component key={control.state.key} model={control} />\n            ))}\n            <div className={styles.settingsInfo}>\n              <settings.Component model={settings} />\n              <pluginInfo.Component model={pluginInfo} />\n            </div>\n          </div>\n        )}\n        {topScene && (\n          <UrlSyncContextProvider scene={topScene} createBrowserHistorySteps={true} updateUrlOnInit={true}>\n            <div className={styles.body}>{topScene && <topScene.Component model={topScene} />}</div>\n          </UrlSyncContextProvider>\n        )}\n      </div>\n    );\n  };\n}\n\nexport function getFreshTopScene() {\n  if (currentPathIncludes(ROUTES.Drilldown)) {\n    return new MetricsReducer();\n  } else {\n    return new MetricSelectScene({});\n  }\n}\n\nexport function getTopSceneFor(metric?: string, nativeHistogram?: boolean) {\n  if (metric) {\n    return new MetricScene({ metric: metric, nativeHistogram: nativeHistogram ?? false });\n  } else {\n    return getFreshTopScene();\n  }\n}\n\nfunction getVariableSet(initialDS?: string, metric?: string, initialFilters?: AdHocVariableFilter[]) {\n  return new SceneVariableSet({\n    variables: [\n      new MetricsDrilldownDataSourceVariable({ initialDS }),\n      new AdHocFiltersVariable({\n        name: VAR_OTEL_RESOURCES,\n        label: 'Select resource attributes',\n        addFilterButtonText: 'Select resource attributes',\n        datasource: trailDS,\n        hide: VariableHide.hideVariable,\n        layout: 'combobox',\n        defaultKeys: [],\n        applyMode: 'manual',\n        allowCustomValue: true,\n      }),\n      new AdHocFiltersVariable({\n        key: VAR_FILTERS,\n        name: VAR_FILTERS,\n        addFilterButtonText: 'Add label',\n        datasource: trailDS,\n        // default to use var filters and have otel off\n        hide: VariableHide.hideLabel,\n        layout: 'combobox',\n        filters: initialFilters ?? [],\n        baseFilters: getBaseFiltersForMetric(metric),\n        applyMode: 'manual',\n        allowCustomValue: true,\n        expressionBuilder: (filters: AdHocVariableFilter[]) => {\n          // remove any filters that include __name__ key in the expression\n          // to prevent the metric name from being set twice in the query and causing an error.\n          const filtersWithoutMetricName = filters.filter((filter) => filter.key !== '__name__');\n          return [...getBaseFiltersForMetric(metric), ...filtersWithoutMetricName]\n            .map((filter) => `${utf8Support(filter.key)}${filter.operator}\"${filter.value}\"`)\n            .join(',');\n        },\n      }),\n      ...getVariablesWithOtelJoinQueryConstant(),\n      new ConstantVariable({\n        name: VAR_OTEL_GROUP_LEFT,\n        value: undefined,\n        hide: VariableHide.hideVariable,\n      }),\n      new ConstantVariable({\n        name: VAR_MISSING_OTEL_TARGETS,\n        hide: VariableHide.hideVariable,\n        value: false,\n      }),\n      new AdHocFiltersVariable({\n        name: VAR_OTEL_AND_METRIC_FILTERS,\n        addFilterButtonText: 'Filter',\n        datasource: trailDS,\n        hide: VariableHide.hideVariable,\n        layout: 'combobox',\n        filters: initialFilters ?? [],\n        baseFilters: getBaseFiltersForMetric(metric),\n        applyMode: 'manual',\n        allowCustomValue: true,\n        // skipUrlSync: true\n      }),\n      // Legacy variable needed for bookmarking which is necessary because\n      // url sync method does not handle multiple dep env values\n      // Remove this when the rudderstack event \"deployment_environment_migrated\" tapers off\n      new CustomVariable({\n        name: VAR_OTEL_DEPLOYMENT_ENV,\n        label: 'Deployment environment',\n        hide: VariableHide.hideVariable,\n        value: undefined,\n        placeholder: 'Select',\n        isMulti: true,\n      }),\n    ],\n  });\n}\n\nfunction getStyles(theme: GrafanaTheme2, chromeHeaderHeight: number) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      gap: theme.spacing(1),\n      flexDirection: 'column',\n      background: theme.isLight ? theme.colors.background.primary : theme.colors.background.canvas,\n      padding: theme.spacing(1, 2),\n    }),\n    body: css({\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    controls: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n      padding: theme.spacing(1, 0),\n      alignItems: 'flex-end',\n      flexWrap: 'wrap',\n      position: 'sticky',\n      background: theme.isDark ? theme.colors.background.canvas : theme.colors.background.primary,\n      zIndex: theme.zIndex.navbarFixed,\n      top: chromeHeaderHeight,\n    }),\n    settingsInfo: css({\n      display: 'flex',\n      gap: theme.spacing(0.5),\n    }),\n  };\n}\n\nfunction getBaseFiltersForMetric(metric?: string): AdHocVariableFilter[] {\n  if (metric) {\n    return [{ key: '__name__', operator: '=', value: metric }];\n  }\n  return [];\n}\n","import { type DataFrame, type FieldConfig, type FieldConfigSource, type TimeRange } from '@grafana/data';\nimport { usePluginLinks } from '@grafana/runtime';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  VizPanel,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { type DataQuery, type DataSourceRef } from '@grafana/schema';\nimport { IconButton } from '@grafana/ui';\nimport React from 'react';\n\nimport MimirLogo from 'img/logo.svg';\nimport { findObjectOfType } from 'utils';\n\nimport pluginJson from '../plugin.json';\nimport { VAR_DATASOURCE_EXPR } from '../shared';\nimport { isSceneQueryRunner } from '../utils/utils.queries';\n\nexport const investigationsPluginId = 'grafana-investigations-app';\nexport const extensionPointId = `${pluginJson.id}/investigation/v1`;\nexport const addToExplorationsButtonLabel = 'add panel to exploration';\n\nexport interface AddToExplorationButtonState extends SceneObjectState {\n  frame?: DataFrame;\n  dsUid?: string;\n  labelName?: string;\n  fieldName?: string;\n  context?: ExtensionContext;\n\n  queries: DataQuery[];\n  fieldConfig?: FieldConfigSource;\n}\n\ninterface ExtensionContext {\n  timeRange: TimeRange;\n  queries: DataQuery[];\n  datasource: DataSourceRef;\n  origin: string;\n  url: string;\n  type: string;\n  title: string;\n  id: string;\n  logoPath: string;\n  note?: string;\n  drillDownLabel?: string;\n}\n\nexport class AddToExplorationButton extends SceneObjectBase<AddToExplorationButtonState> {\n  constructor(state: Omit<AddToExplorationButtonState, 'queries'>) {\n    super({ ...state, queries: [] });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate = () => {\n    this._subs.add(\n      this.subscribeToState(() => {\n        this.getQueries();\n        this.getContext();\n      })\n    );\n\n    const datasourceUid = sceneGraph.interpolate(this, VAR_DATASOURCE_EXPR);\n    this.setState({ dsUid: datasourceUid });\n  };\n\n  private readonly getQueries = () => {\n    const data = sceneGraph.getData(this);\n    const queryRunner = sceneGraph.findObject(data, isSceneQueryRunner);\n\n    if (isSceneQueryRunner(queryRunner)) {\n      const filter = this.state.frame ? getFilter(this.state.frame) : null;\n      const queries = queryRunner.state.queries.map((q) => ({\n        ...q,\n        expr: sceneGraph.interpolate(queryRunner, q.expr),\n        legendFormat: filter?.name ? `{{ ${filter.name} }}` : sceneGraph.interpolate(queryRunner, q.legendFormat),\n      }));\n\n      if (JSON.stringify(queries) !== JSON.stringify(this.state.queries)) {\n        this.setState({ queries });\n      }\n    }\n  };\n\n  private readonly getFieldConfig = () => {\n    const panel = findObjectOfType(this, (o) => o instanceof VizPanel, VizPanel);\n    const data = sceneGraph.getData(this);\n    const frames = data?.state.data?.series;\n    let fieldConfig = panel?.state.fieldConfig;\n    if (fieldConfig && frames?.length) {\n      for (const frame of frames) {\n        for (const field of frame.fields) {\n          const configKeys = Object.keys(field.config);\n          const properties = configKeys.map((key) => ({\n            id: key,\n            value: field.config[key as keyof FieldConfig],\n          }));\n\n          // check if the override already exists\n          const existingOverride = fieldConfig.overrides.find(\n            (o) =>\n              o.matcher.options === (field.config.displayNameFromDS ?? field.config.displayName ?? field.name) &&\n              o.matcher.id === 'byName'\n          );\n          if (!existingOverride) {\n            // add as first override\n            fieldConfig.overrides.unshift({\n              matcher: {\n                id: 'byName',\n                options: field.config.displayNameFromDS ?? field.config.displayName ?? field.name,\n              },\n              properties,\n            });\n          }\n\n          if (existingOverride && JSON.stringify(existingOverride.properties) !== JSON.stringify(properties)) {\n            existingOverride.properties = properties;\n          }\n        }\n      }\n    }\n    return fieldConfig;\n  };\n\n  private readonly getContext = () => {\n    const fieldConfig = this.getFieldConfig();\n    const { queries, dsUid, labelName, fieldName } = this.state;\n    const timeRange = sceneGraph.getTimeRange(this);\n\n    if (!timeRange || !queries || !dsUid) {\n      return;\n    }\n    const ctx = {\n      origin: 'Metrics Drilldown',\n      type: 'timeseries',\n      queries,\n      timeRange: { ...timeRange.state.value },\n      datasource: { uid: dsUid },\n      url: window.location.href,\n      id: `${JSON.stringify(queries)}${labelName}${fieldName}`,\n      title: `${labelName}${fieldName ? ` > ${fieldName}` : ''}`,\n      logoPath: MimirLogo,\n      drillDownLabel: fieldName,\n      fieldConfig,\n    };\n    if (JSON.stringify(ctx) !== JSON.stringify(this.state.context)) {\n      this.setState({ context: ctx });\n    }\n  };\n\n  public static Component = ({ model }: SceneComponentProps<AddToExplorationButton>) => {\n    const { context } = model.useState();\n    const { links } = usePluginLinks({ extensionPointId, context, limitPerPlugin: 1 });\n    const link = links.find((link) => link.pluginId === investigationsPluginId);\n\n    if (!link) {\n      return null;\n    }\n\n    return (\n      <IconButton\n        tooltip={link.description}\n        aria-label={addToExplorationsButtonLabel} // this is overriden by the `tooltip`\n        key={link.id}\n        name={link.icon ?? 'panel-add'}\n        onClick={(e) => {\n          if (link.onClick) {\n            link.onClick(e);\n          }\n        }}\n      />\n    );\n  };\n}\n\nconst getFilter = (frame: DataFrame) => {\n  const filterNameAndValueObj = frame.fields[1]?.labels ?? {};\n  const keys = Object.keys(filterNameAndValueObj);\n  if (keys.length !== 1) {\n    return;\n  }\n  const name = keys[0];\n  return { name, value: filterNameAndValueObj[name] };\n};\n","import { type DataFrame, type PanelMenuItem, type PluginExtensionLink } from '@grafana/data';\n// Certain imports are not available in the dependant package, but can be if the plugin is running in a different Grafana version.\n// We need both imports to support Grafana v11 and v12.\n// @ts-expect-error\nimport { config, getObservablePluginLinks } from '@grafana/runtime';\nimport {\n  getExploreURL,\n  sceneGraph,\n  SceneObjectBase,\n  VizPanel,\n  VizPanelMenu,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport React from 'react';\nimport { firstValueFrom } from 'rxjs';\n\nimport { AddToExplorationButton, extensionPointId } from '../MetricSelect/AddToExplorationsButton';\nimport { getQueryRunnerFor } from '../utils/utils.queries';\n\nconst ADD_TO_INVESTIGATION_MENU_TEXT = 'Add to investigation';\nconst ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT = 'investigations_divider'; // Text won't be visible\nconst ADD_TO_INVESTIGATION_MENU_GROUP_TEXT = 'Investigations';\n\ninterface PanelMenuState extends SceneObjectState {\n  body?: VizPanelMenu;\n  frame?: DataFrame;\n  labelName?: string;\n  fieldName?: string;\n  addExplorationsLink?: boolean;\n  explorationsButton?: AddToExplorationButton;\n}\n\n/**\n * @todo the VizPanelMenu interface is overly restrictive, doesn't allow any member functions on this class, so everything is currently inlined\n */\nexport class PanelMenu extends SceneObjectBase<PanelMenuState> implements VizPanelMenu, SceneObject {\n  constructor(state: Partial<PanelMenuState>) {\n    super({ ...state, addExplorationsLink: state.addExplorationsLink ?? true });\n    this.addActivationHandler(() => {\n      let exploreUrl: Promise<string | undefined> | undefined;\n      try {\n        const viz = sceneGraph.getAncestor(this, VizPanel);\n        const panelData = sceneGraph.getData(viz).state.data;\n        if (!panelData) {\n          throw new Error('Cannot get link to explore, no panel data found');\n        }\n        const queryRunner = getQueryRunnerFor(viz);\n        const queries = queryRunner?.state.queries ?? [];\n        queries.forEach((query) => {\n          // removing legendFormat to get verbose legend in Explore\n          delete query.legendFormat;\n        });\n        // 'this' scene object contain the variable for the metric name which is correctly interpolated into the explore url\n        // when used in the metric select scene case,\n        // this will get the explore url with interpolated variables and include the labels __ignore_usage__, this is a known issue\n        // in the metric scene we do not get use the __ignore_usage__ labels in the explore url\n        exploreUrl = getExploreURL(panelData, this, panelData.timeRange, (query) => {\n          // remove __ignore_usage__=\"\" from the query\n          if ('expr' in query && typeof query.expr === 'string' && query.expr.includes('__ignore_usage__')) {\n            return {\n              ...query,\n              expr: query.expr.replace(/,?__ignore_usage__=\"\"/, ''), // also remove leading comma if present\n            };\n          }\n\n          return query;\n        });\n      } catch (e) {}\n\n      // Navigation options (all panels)\n      const items: PanelMenuItem[] = [\n        {\n          text: 'Navigation',\n          type: 'group',\n        },\n        {\n          text: 'Explore',\n          iconClassName: 'compass',\n          onClick: () => exploreUrl?.then((url) => url && window.open(url, '_blank')),\n          shortcut: 'p x',\n        },\n      ];\n\n      this.setState({\n        body: new VizPanelMenu({\n          items,\n        }),\n      });\n\n      const addToExplorationsButton = new AddToExplorationButton({\n        labelName: this.state.labelName,\n        fieldName: this.state.fieldName,\n        frame: this.state.frame,\n      });\n      this._subs.add(\n        addToExplorationsButton?.subscribeToState(async () => {\n          await subscribeToAddToExploration(this);\n        })\n      );\n      this.setState({\n        explorationsButton: addToExplorationsButton,\n      });\n\n      if (this.state.addExplorationsLink) {\n        this.state.explorationsButton?.activate();\n      }\n    });\n  }\n\n  addItem(item: PanelMenuItem): void {\n    if (this.state.body) {\n      this.state.body.addItem(item);\n    }\n  }\n\n  setItems(items: PanelMenuItem[]): void {\n    if (this.state.body) {\n      this.state.body.setItems(items);\n    }\n  }\n\n  public static Component = ({ model }: SceneComponentProps<PanelMenu>) => {\n    const { body } = model.useState();\n\n    if (body) {\n      return <body.Component model={body} />;\n    }\n\n    return <></>;\n  };\n}\n\nconst getInvestigationLink = async (addToExplorations: AddToExplorationButton) => {\n  const context = addToExplorations.state.context;\n\n  // Check if we're running on Grafana v11\n  if (config.buildInfo.version.startsWith('11.')) {\n    try {\n      const { getPluginLinkExtensions } = await import('@grafana/runtime');\n      if (getPluginLinkExtensions !== undefined) {\n        const links = getPluginLinkExtensions({\n          extensionPointId,\n          context,\n        });\n\n        return links.extensions[0];\n      }\n    } catch (e) {\n      // Ignore import error and fall through to v12 implementation\n      console.error('Error importing getPluginLinkExtensions', e);\n    }\n  }\n\n  // `getObservablePluginLinks` is introduced in Grafana v12\n  if (getObservablePluginLinks !== undefined) {\n    const links: PluginExtensionLink[] = await firstValueFrom(\n      getObservablePluginLinks({\n        extensionPointId,\n        context,\n      })\n    );\n\n    return links[0];\n  }\n\n  return undefined;\n};\n\nasync function subscribeToAddToExploration(menu: PanelMenu) {\n  const addToExplorationButton = menu.state.explorationsButton;\n  if (addToExplorationButton) {\n    const link = await getInvestigationLink(addToExplorationButton);\n\n    const existingMenuItems = menu.state.body?.state.items ?? [];\n\n    const existingAddToExplorationLink = existingMenuItems.find((item) => item.text === ADD_TO_INVESTIGATION_MENU_TEXT);\n\n    if (link) {\n      if (!existingAddToExplorationLink) {\n        menu.state.body?.addItem({\n          text: ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT,\n          type: 'divider',\n        });\n        menu.state.body?.addItem({\n          text: ADD_TO_INVESTIGATION_MENU_GROUP_TEXT,\n          type: 'group',\n        });\n        menu.state.body?.addItem({\n          text: ADD_TO_INVESTIGATION_MENU_TEXT,\n          iconClassName: 'plus-square',\n          onClick: (e) => link.onClick && link.onClick(e),\n        });\n      } else {\n        if (existingAddToExplorationLink) {\n          menu.state.body?.setItems(\n            existingMenuItems.filter(\n              (item) =>\n                [\n                  ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT,\n                  ADD_TO_INVESTIGATION_MENU_GROUP_TEXT,\n                  ADD_TO_INVESTIGATION_MENU_TEXT,\n                ].includes(item.text) === false\n            )\n          );\n        }\n      }\n    }\n  }\n}\n","import { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport React from 'react';\n\nimport { getMetricSceneFor } from '../../utils';\nimport { type AutoQueryDef } from '../types';\n\ninterface QuerySelectorState extends SceneObjectState {\n  queryDef: AutoQueryDef;\n  onChangeQuery: (variant: string) => void;\n  options?: Array<{\n    label: string;\n    value: string;\n  }>;\n}\n\nexport class AutoVizPanelQuerySelector extends SceneObjectBase<QuerySelectorState> {\n  constructor(state: QuerySelectorState) {\n    super(state);\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    const { autoQuery } = getMetricSceneFor(this).state;\n\n    if (autoQuery.variants.length === 0) {\n      return;\n    }\n\n    this.setState({ options: autoQuery.variants.map((q) => ({ label: q.variant, value: q.variant })) });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<AutoVizPanelQuerySelector>) => {\n    const { options, onChangeQuery, queryDef } = model.useState();\n\n    if (!options) {\n      return null;\n    }\n\n    return <RadioButtonGroup size=\"sm\" options={options} value={queryDef.variant} onChange={onChangeQuery} />;\n  };\n}\n","import {\n  SceneObjectBase,\n  SceneQueryRunner,\n  type SceneComponentProps,\n  type SceneObjectState,\n  type VizPanel,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { getMetricDescription } from 'helpers/MetricDatasourceHelper';\n\nimport { PanelMenu } from '../../Menu/PanelMenu';\nimport { MDP_METRIC_OVERVIEW, trailDS } from '../../shared';\nimport { getMetricSceneFor, getTrailFor } from '../../utils';\nimport { type AutoQueryDef } from '../types';\nimport { AutoVizPanelQuerySelector } from './AutoVizPanelQuerySelector';\n\nexport interface AutoVizPanelState extends SceneObjectState {\n  panel?: VizPanel;\n  metric?: string;\n}\n\nexport class AutoVizPanel extends SceneObjectBase<AutoVizPanelState> {\n  constructor(state: AutoVizPanelState) {\n    super(state);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  public onActivate() {\n    if (!this.state.panel) {\n      const { autoQuery, metric } = getMetricSceneFor(this).state;\n\n      this.getVizPanelFor(autoQuery.main, metric).then((panel) =>\n        this.setState({\n          panel,\n          metric,\n        })\n      );\n    }\n  }\n\n  public onChangeQuery = (variant: string) => {\n    const metricScene = getMetricSceneFor(this);\n\n    const def = metricScene.state.autoQuery.variants.find((q) => q.variant === variant)!;\n\n    this.getVizPanelFor(def).then((panel) => this.setState({ panel }));\n    metricScene.setState({ queryDef: def });\n  };\n\n  private async getVizPanelFor(def: AutoQueryDef, metric?: string) {\n    const trail = getTrailFor(this);\n    const metadata = await trail.getMetricMetadata(metric);\n    const description = getMetricDescription(metadata);\n\n    return def\n      .vizBuilder()\n      .setData(\n        new SceneQueryRunner({\n          datasource: trailDS,\n          maxDataPoints: MDP_METRIC_OVERVIEW,\n          queries: def.queries,\n        })\n      )\n      .setDescription(description)\n      .setHeaderActions([new AutoVizPanelQuerySelector({ queryDef: def, onChangeQuery: this.onChangeQuery })])\n      .setShowMenuAlways(true)\n      .setMenu(new PanelMenu({ labelName: metric ?? this.state.metric }))\n      .build();\n  }\n\n  public static Component = ({ model }: SceneComponentProps<AutoVizPanel>) => {\n    const { panel } = model.useState();\n\n    if (!panel) {\n      return;\n    }\n    return <panel.Component model={panel} />;\n  };\n}\n","import { VAR_FILTERS_EXPR, VAR_METRIC_EXPR, VAR_OTEL_JOIN_QUERY_EXPR } from '../../shared';\n\n// For usual non-utf8-metrics we use filters in the curly braces\n// metric_name{filter_label=\"filter_value\"}\nconst BASE_QUERY_TEMPLATE = `${VAR_METRIC_EXPR}{${VAR_FILTERS_EXPR}}`;\nconst RATE_BASE_QUERY_TEMPLATE = `rate(${BASE_QUERY_TEMPLATE}[$__rate_interval])`;\n\n// For utf8 metrics we need to put the metric name inside curly braces with filters\n// {\"utf8.metric\", filter_label=\"filter_val\"}\nconst BASE_QUERY_UTF8_METRIC_TEMPLATE = `{\"${VAR_METRIC_EXPR}\", ${VAR_FILTERS_EXPR}}`;\nconst RATE_BASE_QUERY_UTF8_METRIC_TEMPLATE = `rate(${BASE_QUERY_UTF8_METRIC_TEMPLATE}[$__rate_interval])`;\n\nexport function generateBaseQuery({\n  isRateQuery = false,\n  groupings = [],\n  isUtf8Metric = false,\n}: {\n  isRateQuery?: boolean;\n  groupings?: string[];\n  isUtf8Metric?: boolean;\n}): string {\n  // Determine base query template\n  const baseQuery = isUtf8Metric\n    ? isRateQuery\n      ? RATE_BASE_QUERY_UTF8_METRIC_TEMPLATE\n      : BASE_QUERY_UTF8_METRIC_TEMPLATE\n    : isRateQuery\n    ? RATE_BASE_QUERY_TEMPLATE\n    : BASE_QUERY_TEMPLATE;\n\n  // Apply groupings (e.g., `sum by(le, instance)`)\n  if (groupings.length > 0) {\n    return `sum by(${groupings.join(', ')}) (${baseQuery} ${VAR_OTEL_JOIN_QUERY_EXPR})`;\n  }\n\n  return `${baseQuery} ${VAR_OTEL_JOIN_QUERY_EXPR}`;\n}\n","import { VAR_GROUP_BY_EXP, VAR_METRIC_EXPR } from '../../shared';\nimport { simpleGraphBuilder } from '../graphBuilders';\nimport { type AutoQueryInfo } from '../types';\n\nexport type CommonQueryInfoParams = {\n  description: string;\n  mainQueryExpr: string;\n  breakdownQueryExpr: string;\n  unit: string;\n};\n\nexport function generateCommonAutoQueryInfo({\n  description,\n  mainQueryExpr,\n  breakdownQueryExpr,\n  unit,\n}: CommonQueryInfoParams): AutoQueryInfo {\n  const common = {\n    title: VAR_METRIC_EXPR,\n    unit,\n  };\n\n  const mainQuery = {\n    refId: 'A',\n    expr: mainQueryExpr,\n    legendFormat: description,\n    fromExploreMetrics: true,\n  };\n\n  const main = {\n    ...common,\n    title: description,\n    queries: [mainQuery],\n    variant: 'main',\n    vizBuilder: () => simpleGraphBuilder({ ...main }),\n  };\n\n  const preview = {\n    ...common,\n    queries: [{ ...mainQuery, legendFormat: description }],\n    vizBuilder: () => simpleGraphBuilder(preview),\n    variant: 'preview',\n  };\n\n  const breakdown = {\n    ...common,\n    queries: [\n      {\n        refId: 'A',\n        expr: breakdownQueryExpr,\n        legendFormat: `{{${VAR_GROUP_BY_EXP}}}`,\n        fromExploreMetrics: true,\n      },\n    ],\n    vizBuilder: () => simpleGraphBuilder(breakdown),\n    variant: 'breakdown',\n  };\n\n  return { preview, main, breakdown, variants: [] };\n}\n","import { VAR_GROUP_BY_EXP, VAR_METRIC_EXPR } from '../../shared';\nimport { type AutoQueryContext, type AutoQueryInfo } from '../types';\nimport { getPerSecondRateUnit, getUnit } from '../units';\nimport { generateBaseQuery } from './baseQuery';\nimport { generateCommonAutoQueryInfo } from './common';\n\nconst RATE_SUFFIXES = new Set(['count', 'total']);\nconst SPECIFIC_AGGREGATIONS_FOR_SUFFIX: Record<string, string> = {\n  count: 'sum',\n  total: 'sum',\n};\nconst aggLabels: Record<string, string> = {\n  avg: 'average',\n  sum: 'overall',\n};\n\nfunction getAggLabel(agg: string): string {\n  return aggLabels[agg] || agg;\n}\n\nexport function createDefaultMetricQueryDefs(context: AutoQueryContext): AutoQueryInfo {\n  const { metricParts, suffix, isUtf8Metric } = context;\n  const unitSuffix = suffix === 'total' ? metricParts.at(-2) : suffix;\n\n  // Determine query type and unit\n  const isRateQuery = RATE_SUFFIXES.has(suffix);\n  const aggregation = SPECIFIC_AGGREGATIONS_FOR_SUFFIX[suffix] || 'avg';\n  const unit = isRateQuery ? getPerSecondRateUnit(unitSuffix) : getUnit(unitSuffix);\n\n  // Generate base query and descriptions\n  const baseQuery = generateBaseQuery({ isRateQuery, isUtf8Metric });\n  const aggregationDescription = `${getAggLabel(aggregation)}${isRateQuery ? ' per-second rate' : ''}`;\n  const description = `${VAR_METRIC_EXPR} (${aggregationDescription})`;\n\n  // Create query expressions\n  const mainQueryExpr = `${aggregation}(${baseQuery})`;\n  const breakdownQueryExpr = `${aggregation}(${baseQuery})by(${VAR_GROUP_BY_EXP})`;\n\n  return generateCommonAutoQueryInfo({\n    description,\n    mainQueryExpr,\n    breakdownQueryExpr,\n    unit,\n  });\n}\n","import { VAR_GROUP_BY_EXP, VAR_METRIC_EXPR } from '../../shared';\nimport { heatmapGraphBuilder, percentilesGraphBuilder, simpleGraphBuilder } from '../graphBuilders';\nimport { type AutoQueryContext, type AutoQueryDef } from '../types';\nimport { generateBaseQuery } from './baseQuery';\n\nexport function createHistogramMetricQueryDefs(context: AutoQueryContext) {\n  const { unit, nativeHistogram } = context;\n\n  const common = {\n    title: VAR_METRIC_EXPR,\n    unit,\n  };\n\n  const p50: AutoQueryDef = {\n    ...common,\n    variant: 'p50',\n    queries: [percentileQuery(context, 50)],\n    vizBuilder: () => simpleGraphBuilder(p50),\n  };\n\n  const breakdown: AutoQueryDef = {\n    ...common,\n    variant: 'p50',\n    queries: [percentileQuery(context, 50, [VAR_GROUP_BY_EXP])],\n    vizBuilder: () => simpleGraphBuilder(breakdown),\n  };\n\n  const percentiles: AutoQueryDef = {\n    ...common,\n    variant: 'percentiles',\n    queries: [99, 90, 50].map((p) => percentileQuery(context, p)),\n    vizBuilder: () => percentilesGraphBuilder(percentiles),\n  };\n\n  const heatmap: AutoQueryDef = {\n    ...common,\n    variant: 'heatmap',\n    queries: [\n      {\n        refId: 'Heatmap',\n        expr: generateBaseQuery({\n          isRateQuery: true,\n          isUtf8Metric: context.isUtf8Metric,\n          groupings: nativeHistogram ? [] : ['le'],\n        }),\n        fromExploreMetrics: true,\n        format: 'heatmap',\n      },\n    ],\n    vizBuilder: () => heatmapGraphBuilder(heatmap),\n  };\n\n  return { preview: heatmap, main: heatmap, variants: [percentiles, heatmap], breakdown: breakdown };\n}\n\nfunction percentileQuery(context: AutoQueryContext, percentile: number, groupings: string[] = []) {\n  const percent = percentile / 100;\n\n  let legendFormat = `${percentile}th Percentile`;\n\n  // For the breakdown view, show the label value variable we are grouping by\n  if (groupings[0]) {\n    legendFormat = `{{${groupings[0]}}}`;\n  }\n\n  const query = generateBaseQuery({\n    isRateQuery: true,\n    isUtf8Metric: context.isUtf8Metric,\n    groupings: context.nativeHistogram ? [...groupings] : ['le', ...groupings],\n  });\n\n  return {\n    refId: `Percentile${percentile}`,\n    expr: `histogram_quantile(${percent}, ${query})`,\n    legendFormat,\n    fromExploreMetrics: true,\n  };\n}\n","import { VAR_GROUP_BY_EXP, VAR_METRIC_EXPR } from '../../shared';\nimport { type AutoQueryContext, type AutoQueryInfo } from '../types';\nimport { generateBaseQuery } from './baseQuery';\nimport { generateCommonAutoQueryInfo } from './common';\n\nexport function createSummaryMetricQueryDefs(context: AutoQueryContext): AutoQueryInfo {\n  const { metricParts, isUtf8Metric, unit } = context;\n  const subMetric = metricParts.slice(0, -1).join('_');\n  const description = `${subMetric} (average)`;\n  const baseQuery = generateBaseQuery({ isRateQuery: true, isUtf8Metric });\n  const mainQueryExpr = createMeanExpr(`sum(${baseQuery})`, subMetric);\n  const breakdownQueryExpr = createMeanExpr(`sum(${baseQuery})by(${VAR_GROUP_BY_EXP})`, subMetric);\n\n  return generateCommonAutoQueryInfo({\n    description,\n    mainQueryExpr,\n    breakdownQueryExpr,\n    unit,\n  });\n}\n\nfunction createMeanExpr(expr: string, subMetric: string): string {\n  const numerator = expr.replace(VAR_METRIC_EXPR, `${subMetric}_sum`);\n  const denominator = expr.replace(VAR_METRIC_EXPR, `${subMetric}_count`);\n  return `${numerator}/${denominator}`;\n}\n","import { isValidLegacyName } from '@grafana/prometheus';\n\nimport { createDefaultMetricQueryDefs } from './queryGenerators/default';\nimport { createHistogramMetricQueryDefs } from './queryGenerators/histogram';\nimport { createSummaryMetricQueryDefs } from './queryGenerators/summary';\nimport { type AutoQueryContext, type AutoQueryInfo } from './types';\nimport { getUnit } from './units';\n\nexport function getAutoQueriesForMetric(metric: string, nativeHistogram?: boolean): AutoQueryInfo {\n  const isUtf8Metric = !isValidLegacyName(metric);\n  const metricParts = metric.split('_');\n  const suffix = metricParts.at(-1);\n\n  // If the suffix is null or is in the set of unsupported suffixes, throw an error because the metric should be delegated to a different generator (summary or histogram)\n  if (suffix == null) {\n    throw new Error(`This function does not support a metric suffix of \"${suffix}\"`);\n  }\n\n  const unitSuffix = metricParts.at(-2);\n  const unit = getUnit(unitSuffix);\n  const ctx: AutoQueryContext = {\n    metricParts,\n    isUtf8Metric,\n    suffix,\n    unitSuffix,\n    unit,\n    nativeHistogram,\n  };\n\n  if (suffix === 'sum') {\n    return createSummaryMetricQueryDefs(ctx);\n  }\n\n  if (suffix === 'bucket' || nativeHistogram) {\n    return createHistogramMetricQueryDefs(ctx);\n  }\n\n  return createDefaultMetricQueryDefs(ctx);\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2, type SelectableValue } from '@grafana/data';\nimport { Combobox, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\ntype Props = {\n  options: Array<SelectableValue<string>>;\n  value?: string;\n  onChange: (label: string | undefined) => void;\n};\n\nexport function BreakdownLabelSelector({ options, value, onChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.select}>\n      <Combobox\n        options={options.map((opt) => ({ label: opt.label || '', value: opt.value || '' }))}\n        value={value || ''}\n        onChange={(selected) => onChange(selected?.value)}\n        width={16}\n      />\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    select: css({\n      maxWidth: theme.spacing(16),\n    }),\n  };\n}\n","import { type DataFrame } from '@grafana/data';\nimport { sceneGraph, SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Button } from '@grafana/ui';\nimport React from 'react';\n\nimport { reportExploreMetrics } from '../interactions';\nimport { VAR_OTEL_AND_METRIC_FILTERS, VAR_OTEL_GROUP_LEFT, VAR_OTEL_RESOURCES } from '../shared';\nimport { getTrailFor } from '../utils';\nimport { isAdHocFiltersVariable } from '../utils/utils.variables';\n\nexport interface AddToFiltersGraphActionState extends SceneObjectState {\n  frame: DataFrame;\n}\n\nexport class AddToFiltersGraphAction extends SceneObjectBase<AddToFiltersGraphActionState> {\n  public onClick = () => {\n    const variable = sceneGraph.lookupVariable('filters', this);\n    if (!isAdHocFiltersVariable(variable)) {\n      return;\n    }\n\n    const labels = this.state.frame.fields[1]?.labels ?? {};\n    if (Object.keys(labels).length !== 1) {\n      return;\n    }\n\n    const labelName = Object.keys(labels)[0];\n    reportExploreMetrics('label_filter_changed', { label: labelName, action: 'added', cause: 'breakdown' });\n    const trail = getTrailFor(this);\n    const resourceAttributes = sceneGraph.lookupVariable(VAR_OTEL_GROUP_LEFT, trail);\n    const allAttributes = resourceAttributes?.getValue();\n    const filter = {\n      key: labelName,\n      operator: '=',\n      value: labels[labelName],\n    };\n    // add to either label filters or otel resource filters\n    if (\n      allAttributes &&\n      typeof allAttributes === 'string' &&\n      // if the label chosen is a resource attribute, add it to the otel resource variable\n      allAttributes?.split(',').includes(labelName)\n    ) {\n      // This is different than the first non-promoted labels on data trail. In data trail we look at all labels\n      // for all metrics. In breakdown, we look at one metric.\n      //\n      // The metric may not have the label promoted so we have to compare not the non-promoted\n      // label collection we use in the parent datatrail, but instead have to look at `VAR_OTEL_GROUP_LEFT`\n      // which are a collection of labels from `target_info` that have not been promoted to the metric.\n      //\n      // These metric-specific non-promoted labels are retrieved in the function `getFilteredResourceAttributes`.\n      // These attributes on the metric that has been selected.\n      trail.setState({ addingLabelFromBreakdown: true });\n      // add to OTel resource var filters\n      const otelResourcesVar = sceneGraph.lookupVariable(VAR_OTEL_RESOURCES, trail);\n      const otelAndMetricsResourcesVar = sceneGraph.lookupVariable(VAR_OTEL_AND_METRIC_FILTERS, trail);\n      if (!(isAdHocFiltersVariable(otelResourcesVar) && isAdHocFiltersVariable(otelAndMetricsResourcesVar))) {\n        return;\n      }\n\n      otelResourcesVar.setState({ filters: [...otelResourcesVar.state.filters, filter] });\n      otelAndMetricsResourcesVar.setState({ filters: [...otelAndMetricsResourcesVar.state.filters, filter] });\n      trail.setState({ addingLabelFromBreakdown: false });\n    } else {\n      // add to regular var filters\n      trail.addFilterWithoutReportingInteraction(filter);\n    }\n  };\n\n  public static Component = ({ model }: SceneComponentProps<AddToFiltersGraphAction>) => {\n    const state = model.useState();\n    const labels = state.frame.fields[1]?.labels || {};\n\n    const canAddToFilters = Object.keys(labels).length !== 0;\n\n    if (!canAddToFilters) {\n      return null;\n    }\n\n    return (\n      <Button variant=\"secondary\" size=\"sm\" fill=\"outline\" onClick={model.onClick}>\n        Add to filters\n      </Button>\n    );\n  };\n}\n","import { type SelectableValue } from '@grafana/data';\nimport { sceneGraph, type QueryVariable, type SceneObject } from '@grafana/scenes';\n\nimport { VAR_FILTERS } from '../shared';\nimport { isAdHocFiltersVariable } from '../utils/utils.variables';\n\nexport function getLabelOptions(scenObject: SceneObject, variable: QueryVariable) {\n  const labelFilters = sceneGraph.lookupVariable(VAR_FILTERS, scenObject);\n  const labelOptions: Array<SelectableValue<string>> = [];\n\n  if (!isAdHocFiltersVariable(labelFilters)) {\n    return [];\n  }\n\n  const filters = labelFilters.state.filters;\n\n  for (const option of variable.getOptionsForSelect()) {\n    const filterExists = filters.find((f) => f.key === option.value);\n\n    if (option.label === 'le') {\n      // Do not show the \"le\" label\n      continue;\n    }\n    if (filterExists) {\n      continue;\n    }\n    labelOptions.push({ label: option.label, value: String(option.value) });\n  }\n\n  return labelOptions;\n}\n\ninterface Type<T> extends Function {\n  new (...args: any[]): T;\n}\nexport function findSceneObjectByType<T extends SceneObject>(scene: SceneObject, sceneType: Type<T>) {\n  const targetScene = sceneGraph.findObject(scene, (obj) => obj instanceof sceneType);\n\n  if (targetScene instanceof sceneType) {\n    return targetScene;\n  }\n\n  return null;\n}\n\nexport function findSceneObjectsByType<T extends SceneObject>(scene: SceneObject, sceneType: Type<T>) {\n  function isSceneType(scene: SceneObject): scene is T {\n    return scene instanceof sceneType;\n  }\n\n  const targetScenes = sceneGraph.findAllObjects(scene, isSceneType);\n  return targetScenes.filter(isSceneType);\n}\n","import uFuzzy from '@leeoniya/ufuzzy';\nimport { debounce as debounceLodash } from 'lodash';\n\nconst uf = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraTrn: 1,\n  intraDel: 1,\n});\n\nexport function fuzzySearch(haystack: string[], query: string, callback: (data: string[][]) => void) {\n  const [idxs, info, order] = uf.search(haystack, query, 0, 1e5);\n\n  let haystackOrder: string[] = [];\n  let matchesSet: Set<string> = new Set();\n  if (idxs && order) {\n    /**\n     * get the fuzzy matches for highlighting\n     * @param part\n     * @param matched\n     */\n    const mark = (part: string, matched: boolean) => {\n      if (matched) {\n        matchesSet.add(part);\n      }\n    };\n\n    // Iterate to create the order of needles(queries) and the matches\n    for (let i = 0; i < order.length; i++) {\n      let infoIdx = order[i];\n\n      /** Evaluate the match, get the matches for highlighting */\n      uFuzzy.highlight(haystack[info.idx[infoIdx]], info.ranges[infoIdx], mark);\n      /** Get the order */\n      haystackOrder.push(haystack[info.idx[infoIdx]]);\n    }\n\n    callback([haystackOrder, [...matchesSet]]);\n  } else if (!query) {\n    callback([]);\n  }\n}\n\nexport const debouncedFuzzySearch = debounceLodash(fuzzySearch, 300);\n","import { css } from '@emotion/css';\nimport { LoadingState, type DataFrame, type PanelData } from '@grafana/data';\nimport {\n  SceneDataNode,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneReactObject,\n  type SceneByFrameRepeater,\n  type SceneComponentProps,\n  type SceneLayout,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { Alert, Button } from '@grafana/ui';\nimport React from 'react';\n\nimport { BreakdownSearchReset } from './BreakdownSearchScene';\nimport { type LabelBreakdownSortingOption } from './SortByScene';\nimport { findSceneObjectsByType } from './utils';\nimport { getLabelValueFromDataFrame } from '../services/levels';\nimport { fuzzySearch } from '../services/search';\nimport { sortSeries } from '../services/sorting';\n\ninterface ByFrameRepeaterState extends SceneObjectState {\n  body: SceneLayout;\n\n  getLayoutChild(data: PanelData, frame: DataFrame, frameIndex: number): SceneFlexItem;\n}\n\ntype FrameFilterCallback = (frame: DataFrame) => boolean;\ntype FrameIterateCallback = (frames: DataFrame[], seriesIndex: number) => void;\n\nexport class ByFrameRepeater extends SceneObjectBase<ByFrameRepeaterState> {\n  private unfilteredChildren: SceneFlexItem[] = [];\n  private sortBy: LabelBreakdownSortingOption;\n  private sortedSeries: DataFrame[] = [];\n  private getFilter: () => string;\n\n  public constructor({\n    sortBy,\n    getFilter,\n    ...state\n  }: ByFrameRepeaterState & { sortBy: LabelBreakdownSortingOption; getFilter: () => string }) {\n    super(state);\n\n    this.sortBy = sortBy;\n    this.getFilter = getFilter;\n\n    this.addActivationHandler(() => {\n      const data = sceneGraph.getData(this);\n\n      this._subs.add(\n        data.subscribeToState((newState, oldState) => {\n          if (newState.data === undefined) {\n            return;\n          }\n\n          const newData = newState.data;\n\n          if (newState.data?.state !== oldState.data?.state) {\n            findSceneObjectsByType(this, SceneDataNode).forEach((dataNode) => {\n              dataNode.setState({ data: { ...dataNode.state.data, state: newData.state } });\n            });\n          }\n          if (newData.state === LoadingState.Done) {\n            this.performRepeat(newData);\n          }\n        })\n      );\n\n      if (data.state.data) {\n        this.performRepeat(data.state.data);\n      }\n    });\n  }\n\n  public sort = (sortBy: LabelBreakdownSortingOption) => {\n    const data = sceneGraph.getData(this);\n    this.sortBy = sortBy;\n    if (data.state.data) {\n      this.performRepeat(data.state.data);\n    }\n  };\n\n  private performRepeat(data: PanelData) {\n    const newChildren: SceneFlexItem[] = [];\n    const sortedSeries = sortSeries(data.series, this.sortBy);\n\n    for (let seriesIndex = 0; seriesIndex < sortedSeries.length; seriesIndex++) {\n      const layoutChild = this.state.getLayoutChild(data, sortedSeries[seriesIndex], seriesIndex);\n      newChildren.push(layoutChild);\n    }\n\n    this.sortedSeries = sortedSeries;\n    this.unfilteredChildren = newChildren;\n\n    if (this.getFilter()) {\n      this.state.body.setState({ children: [] });\n      this.filterByString(this.getFilter());\n    } else {\n      this.state.body.setState({ children: newChildren });\n    }\n  }\n\n  filterByString = (filter: string) => {\n    let haystack: string[] = [];\n\n    this.iterateFrames((frames, seriesIndex) => {\n      const labelValue = getLabelValue(frames[seriesIndex]);\n      haystack.push(labelValue);\n    });\n    fuzzySearch(haystack, filter, (data) => {\n      if (data && data[0]) {\n        // We got search results\n        this.filterFrames((frame: DataFrame) => {\n          const label = getLabelValue(frame);\n          return data[0].includes(label);\n        });\n      } else {\n        // reset search\n        this.filterFrames(() => true);\n      }\n    });\n  };\n\n  public iterateFrames = (callback: FrameIterateCallback) => {\n    const data = sceneGraph.getData(this).state.data;\n    if (!data) {\n      return;\n    }\n    for (let seriesIndex = 0; seriesIndex < this.sortedSeries.length; seriesIndex++) {\n      callback(this.sortedSeries, seriesIndex);\n    }\n  };\n\n  public filterFrames = (filterFn: FrameFilterCallback) => {\n    const newChildren: SceneFlexItem[] = [];\n    this.iterateFrames((frames, seriesIndex) => {\n      if (filterFn(frames[seriesIndex])) {\n        newChildren.push(this.unfilteredChildren[seriesIndex]);\n      }\n    });\n\n    if (newChildren.length === 0) {\n      this.state.body.setState({ children: [buildNoResultsScene(this.getFilter(), this.clearFilter)] });\n    } else {\n      this.state.body.setState({ children: newChildren });\n    }\n  };\n\n  public clearFilter = () => {\n    this.publishEvent(new BreakdownSearchReset(), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SceneByFrameRepeater>) => {\n    const { body } = model.useState();\n    return <body.Component model={body} />;\n  };\n}\n\nfunction buildNoResultsScene(filter: string, clearFilter: () => void) {\n  return new SceneFlexLayout({\n    direction: 'row',\n    children: [\n      new SceneFlexItem({\n        body: new SceneReactObject({\n          reactNode: (\n            <div className={styles.alertContainer}>\n              <Alert title=\"\" severity=\"info\" className={styles.noResultsAlert}>\n                No values found matching: {filter}\n                <Button className={styles.clearButton} onClick={clearFilter}>\n                  Clear filter\n                </Button>\n              </Alert>\n            </div>\n          ),\n        }),\n      }),\n    ],\n  });\n}\n\nconst styles = {\n  alertContainer: css({\n    flexGrow: 1,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  }),\n  noResultsAlert: css({\n    minWidth: '30vw',\n    flexGrow: 0,\n  }),\n  clearButton: css({\n    marginLeft: '1.5rem',\n  }),\n};\n\nfunction getLabelValue(frame: DataFrame) {\n  return getLabelValueFromDataFrame(frame) ?? 'No labels';\n}\n","import { css } from '@emotion/css';\nimport { Icon, Input } from '@grafana/ui';\nimport React, { type HTMLProps } from 'react';\n\ninterface Props extends Omit<HTMLProps<HTMLInputElement>, 'width'> {\n  onClear(): void;\n}\n\nexport const SearchInput = ({ value, onChange, placeholder, onClear, ...rest }: Props) => {\n  return (\n    <Input\n      value={value}\n      onChange={onChange}\n      suffix={\n        value ? <Icon onClick={onClear} title={'Clear search'} name=\"times\" className={styles.clearIcon} /> : undefined\n      }\n      prefix={<Icon name=\"search\" />}\n      placeholder={placeholder}\n      {...rest}\n    />\n  );\n};\n\nconst styles = {\n  clearIcon: css({\n    cursor: 'pointer',\n  }),\n};\n","import { BusEventBase } from '@grafana/data';\nimport { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport React, { type ChangeEvent } from 'react';\n\nimport { ByFrameRepeater } from './ByFrameRepeater';\nimport { LabelBreakdownScene } from './LabelBreakdownScene';\nimport { SearchInput } from './SearchInput';\n\nexport class BreakdownSearchReset extends BusEventBase {\n  public static type = 'breakdown-search-reset';\n}\n\nexport interface BreakdownSearchSceneState extends SceneObjectState {\n  filter?: string;\n}\n\nconst recentFilters: Record<string, string> = {};\n\nexport class BreakdownSearchScene extends SceneObjectBase<BreakdownSearchSceneState> {\n  private cacheKey: string;\n\n  constructor(cacheKey: string) {\n    super({\n      filter: recentFilters[cacheKey] ?? '',\n    });\n    this.cacheKey = cacheKey;\n  }\n\n  public static Component = ({ model }: SceneComponentProps<BreakdownSearchScene>) => {\n    const { filter } = model.useState();\n    return (\n      <SearchInput\n        value={filter}\n        onChange={model.onValueFilterChange}\n        onClear={model.clearValueFilter}\n        placeholder=\"Search for value\"\n      />\n    );\n  };\n\n  public onValueFilterChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ filter: event.target.value });\n    this.filterValues(event.target.value);\n  };\n\n  public clearValueFilter = () => {\n    this.setState({ filter: '' });\n    this.filterValues('');\n  };\n\n  public reset = () => {\n    this.setState({ filter: '' });\n    recentFilters[this.cacheKey] = '';\n  };\n\n  private filterValues(filter: string) {\n    if (this.parent instanceof LabelBreakdownScene) {\n      recentFilters[this.cacheKey] = filter;\n      const body = this.parent.state.body;\n      body?.forEachChild((child) => {\n        if (child instanceof ByFrameRepeater && child.state.body.isActive) {\n          child.filterByString(filter);\n        }\n      });\n    }\n  }\n}\n","const BREAKDOWN_LAYOUT_TYPES = ['single', 'grid', 'rows'] as const;\n\nexport type BreakdownLayoutType = (typeof BREAKDOWN_LAYOUT_TYPES)[number];\n\nexport function isBreakdownLayoutType(\n  breakdownLayoutType: string | null | undefined\n): breakdownLayoutType is BreakdownLayoutType {\n  return BREAKDOWN_LAYOUT_TYPES.includes(breakdownLayoutType as BreakdownLayoutType);\n}\n\nexport type BreakdownLayoutChangeCallback = (newBreakdownLayout: BreakdownLayoutType) => void;\n","import { type SelectableValue } from '@grafana/data';\nimport {\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n  type SceneObjectWithUrlSync,\n} from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport React from 'react';\n\nimport { reportExploreMetrics } from '../interactions';\nimport { getVewByPreference, setVewByPreference } from '../services/store';\nimport { type MakeOptional } from '../shared';\nimport { isBreakdownLayoutType, type BreakdownLayoutChangeCallback, type BreakdownLayoutType } from './types';\n\nexport interface LayoutSwitcherState extends SceneObjectState {\n  activeBreakdownLayout: BreakdownLayoutType;\n  breakdownLayouts: SceneObject[];\n  breakdownLayoutOptions: Array<SelectableValue<BreakdownLayoutType>>;\n  onBreakdownLayoutChange: BreakdownLayoutChangeCallback;\n}\n\nexport class LayoutSwitcher extends SceneObjectBase<LayoutSwitcherState> implements SceneObjectWithUrlSync {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['breakdownLayout'] });\n\n  public constructor(state: MakeOptional<LayoutSwitcherState, 'activeBreakdownLayout'>) {\n    const storedBreakdownLayout = getVewByPreference();\n    super({\n      activeBreakdownLayout: isBreakdownLayoutType(storedBreakdownLayout) ? storedBreakdownLayout : 'grid',\n      ...state,\n    });\n  }\n\n  getUrlState() {\n    return { breakdownLayout: this.state.activeBreakdownLayout };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const newBreakdownLayout = values.breakdownLayout;\n    if (typeof newBreakdownLayout === 'string' && isBreakdownLayoutType(newBreakdownLayout)) {\n      if (this.state.activeBreakdownLayout !== newBreakdownLayout) {\n        this.setState({ activeBreakdownLayout: newBreakdownLayout });\n      }\n    }\n  }\n\n  public Selector({ model }: { model: LayoutSwitcher }) {\n    const { activeBreakdownLayout, breakdownLayoutOptions } = model.useState();\n\n    return (\n      <RadioButtonGroup\n        options={breakdownLayoutOptions}\n        value={activeBreakdownLayout}\n        onChange={model.onLayoutChange}\n      />\n    );\n  }\n\n  public onLayoutChange = (active: BreakdownLayoutType) => {\n    if (this.state.activeBreakdownLayout === active) {\n      return;\n    }\n\n    reportExploreMetrics('breakdown_layout_changed', { layout: active });\n    setVewByPreference(active);\n    this.setState({ activeBreakdownLayout: active });\n    this.state.onBreakdownLayoutChange(active);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<LayoutSwitcher>) => {\n    const { breakdownLayouts, breakdownLayoutOptions, activeBreakdownLayout } = model.useState();\n\n    const index = breakdownLayoutOptions.findIndex((o) => o.value === activeBreakdownLayout);\n    if (index === -1) {\n      return null;\n    }\n\n    const layout = breakdownLayouts[index];\n\n    return <layout.Component model={layout} />;\n  };\n}\n","import { css } from '@emotion/css';\nimport { BusEventBase, type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Combobox, Field, IconButton, useStyles2, type ComboboxOption } from '@grafana/ui';\nimport React from 'react';\n\nimport { getSortByPreference, setSortByPreference } from '../services/store';\n\nexport interface SortBySceneState extends SceneObjectState {\n  target: 'fields' | 'labels';\n  sortBy: LabelBreakdownSortingOption;\n}\n\nexport class SortCriteriaChanged extends BusEventBase {\n  constructor(public target: 'fields' | 'labels', public sortBy: LabelBreakdownSortingOption) {\n    super();\n  }\n\n  public static type = 'sort-criteria-changed';\n}\n\nexport type LabelBreakdownSortingOption = 'outliers' | 'alphabetical' | 'alphabetical-reversed';\n\nconst sortingOptions: Array<ComboboxOption<LabelBreakdownSortingOption>> = [\n  {\n    value: 'outliers',\n    label: 'Outlying series',\n    description: 'Prioritizes values that show distinct behavior from others within the same label',\n  },\n  {\n    value: 'alphabetical',\n    label: 'Name [A-Z]',\n    description: 'Alphabetical order',\n  },\n  {\n    value: 'alphabetical-reversed',\n    label: 'Name [Z-A]',\n    description: 'Reversed alphabetical order',\n  },\n];\n\nexport class SortByScene extends SceneObjectBase<SortBySceneState> {\n  constructor(state: Pick<SortBySceneState, 'target'>) {\n    const { sortBy } = getSortByPreference(state.target, 'outliers');\n    super({\n      target: state.target,\n      sortBy,\n    });\n  }\n\n  public onCriteriaChange = (criteria: ComboboxOption<LabelBreakdownSortingOption> | null) => {\n    if (!criteria?.value) {\n      return;\n    }\n    this.setState({ sortBy: criteria.value });\n    setSortByPreference(this.state.target, criteria.value);\n    this.publishEvent(new SortCriteriaChanged(this.state.target, criteria.value), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SortByScene>) => {\n    const styles = useStyles2(getStyles);\n    const { sortBy } = model.useState();\n    const value = sortingOptions.find((option) => option.value === sortBy);\n    return (\n      <Field\n        htmlFor=\"sort-by-criteria\"\n        label={\n          <div className={styles.sortByTooltip}>\n            Sort by\n            <IconButton\n              name={'info-circle'}\n              size=\"sm\"\n              variant={'secondary'}\n              tooltip=\"Sorts values using standard or smart time series calculations.\"\n            />\n          </div>\n        }\n      >\n        <Combobox\n          id=\"sort-by-criteria\"\n          value={value}\n          width={20}\n          options={sortingOptions}\n          placeholder={'Choose criteria'}\n          onChange={model.onCriteriaChange}\n          isClearable={false}\n        />\n      </Field>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    sortByTooltip: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n    }),\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\nimport {\n  FieldConfigBuilders,\n  sceneGraph,\n  VizPanel,\n  type SceneCSSGridItem,\n  type SceneDataProvider,\n  type SceneStatelessBehavior,\n} from '@grafana/scenes';\n\nimport { LabelBreakdownScene } from './LabelBreakdownScene';\nimport { findSceneObjectsByType } from './utils';\n\nexport class BreakdownAxisChangeEvent extends BusEventWithPayload<{ min: number; max: number }> {\n  public static type = 'selected-metric-query-results-event';\n}\n\nexport const yAxisSyncBehavior: SceneStatelessBehavior = (sceneObject: SceneCSSGridItem) => {\n  const breakdownScene = sceneGraph.getAncestor(sceneObject, LabelBreakdownScene);\n\n  // Handle query runners from vizPanels that haven't been activated yet\n  findSceneObjectsByType(sceneObject, VizPanel).forEach((vizPanel) => {\n    if (vizPanel.isActive) {\n      registerDataProvider(vizPanel.state.$data);\n    } else {\n      vizPanel.addActivationHandler(() => {\n        registerDataProvider(vizPanel.state.$data);\n      });\n    }\n  });\n\n  // Register the data providers of all present vizpanels\n  findSceneObjectsByType(sceneObject, VizPanel).forEach((vizPanel) => registerDataProvider(vizPanel.state.$data));\n\n  function registerDataProvider(dataProvider?: SceneDataProvider) {\n    if (!dataProvider) {\n      return;\n    }\n\n    if (!dataProvider.isActive) {\n      dataProvider.addActivationHandler(() => {\n        // Call this function again when the dataprovider is activated\n        registerDataProvider(dataProvider);\n      });\n    }\n\n    // Report the panel data if it is already populated\n    if (dataProvider.state.data) {\n      breakdownScene.reportBreakdownPanelData(dataProvider.state.data);\n    }\n\n    // Report the panel data whenever it is updated\n    dataProvider.subscribeToState(({ data }, _) => {\n      breakdownScene.reportBreakdownPanelData(data);\n    });\n  }\n\n  const axisChangeSubscription = breakdownScene.subscribeToEvent(BreakdownAxisChangeEvent, (event) => {\n    if (!sceneObject.isActive) {\n      axisChangeSubscription.unsubscribe();\n      return;\n    }\n\n    const fieldConfig = FieldConfigBuilders.timeseries()\n      .setCustomFieldConfig('axisSoftMin', event.payload.min)\n      .setCustomFieldConfig('axisSoftMax', event.payload.max)\n      .build();\n\n    findSceneObjectsByType(sceneObject, VizPanel).forEach((vizPanel) => {\n      function update() {\n        vizPanel.onFieldConfigChange(fieldConfig);\n      }\n\n      if (vizPanel.isActive) {\n        // Update axis for panels that are already active\n        update();\n      } else {\n        // Update inactive panels once they become active.\n        vizPanel.addActivationHandler(update);\n      }\n    });\n  });\n};\n","export const ALL_VARIABLE_VALUE = '$__all';\n","import init from '@bsull/augurs/outlier';\nimport { css } from '@emotion/css';\nimport { FieldType, type DataFrame, type GrafanaTheme2, type PanelData, type SelectableValue } from '@grafana/data';\nimport { isValidLegacyName, utf8Support } from '@grafana/prometheus';\nimport { config } from '@grafana/runtime';\nimport {\n  PanelBuilders,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  SceneDataNode,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneQueryRunner,\n  SceneReactObject,\n  VariableDependencyConfig,\n  type QueryVariable,\n  type SceneComponentProps,\n  type SceneFlexItemLike,\n  type SceneObject,\n  type SceneObjectState,\n  type VizPanel,\n} from '@grafana/scenes';\nimport { SortOrder, TooltipDisplayMode, type DataQuery } from '@grafana/schema';\nimport { Alert, Button, Field, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { isNumber, max, min, throttle } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { getAutoQueriesForMetric } from '../autoQuery/getAutoQueriesForMetric';\nimport { type AutoQueryDef } from '../autoQuery/types';\nimport { BreakdownLabelSelector } from '../BreakdownLabelSelector';\nimport { type DataTrail } from '../DataTrail';\nimport { reportExploreMetrics } from '../interactions';\nimport { MetricScene } from '../MetricScene';\nimport { AddToFiltersGraphAction } from './AddToFiltersGraphAction';\nimport { BreakdownSearchReset, BreakdownSearchScene } from './BreakdownSearchScene';\nimport { ByFrameRepeater } from './ByFrameRepeater';\nimport { LayoutSwitcher } from './LayoutSwitcher';\nimport { SortByScene, SortCriteriaChanged } from './SortByScene';\nimport { type BreakdownLayoutChangeCallback, type BreakdownLayoutType } from './types';\nimport { getLabelOptions } from './utils';\nimport { BreakdownAxisChangeEvent, yAxisSyncBehavior } from './yAxisSyncBehavior';\nimport { PanelMenu } from '../Menu/PanelMenu';\nimport { updateOtelJoinWithGroupLeft } from '../otel/util';\nimport { getSortByPreference } from '../services/store';\nimport { ALL_VARIABLE_VALUE } from '../services/variables';\nimport {\n  MDP_METRIC_PREVIEW,\n  RefreshMetricsEvent,\n  trailDS,\n  VAR_FILTERS,\n  VAR_GROUP_BY,\n  VAR_GROUP_BY_EXP,\n  VAR_MISSING_OTEL_TARGETS,\n  VAR_OTEL_GROUP_LEFT,\n} from '../shared';\nimport { StatusWrapper } from '../StatusWrapper';\nimport { getColorByIndex, getTrailFor } from '../utils';\nimport { isConstantVariable, isQueryVariable } from '../utils/utils.variables';\n\nconst MAX_PANELS_IN_ALL_LABELS_BREAKDOWN = 60;\n\nexport interface LabelBreakdownSceneState extends SceneObjectState {\n  body?: LayoutSwitcher;\n  search: BreakdownSearchScene;\n  sortBy: SortByScene;\n  labels: Array<SelectableValue<string>>;\n  value?: string;\n  loading?: boolean;\n  error?: string;\n  blockingMessage?: string;\n}\n\nexport class LabelBreakdownScene extends SceneObjectBase<LabelBreakdownSceneState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_FILTERS],\n    onReferencedVariableValueChanged: this.onReferencedVariableValueChanged.bind(this),\n  });\n\n  constructor(state: Partial<LabelBreakdownSceneState>) {\n    super({\n      ...state,\n      labels: state.labels ?? [],\n      sortBy: new SortByScene({ target: 'labels' }),\n      search: new BreakdownSearchScene('labels'),\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _query?: AutoQueryDef;\n\n  private _onActivate() {\n    // eslint-disable-next-line no-console\n    init().then(() => console.debug('Grafana ML initialized'));\n\n    const variable = this.getVariable();\n\n    if (config.featureToggles.enableScopesInMetricsExplore) {\n      this._subs.add(\n        this.subscribeToEvent(RefreshMetricsEvent, () => {\n          this.updateBody(this.getVariable());\n        })\n      );\n    }\n\n    variable.subscribeToState((newState, oldState) => {\n      if (\n        newState.options !== oldState.options ||\n        newState.value !== oldState.value ||\n        newState.loading !== oldState.loading\n      ) {\n        this.updateBody(variable);\n      }\n    });\n\n    this._subs.add(\n      this.subscribeToEvent(BreakdownSearchReset, () => {\n        this.state.search.clearValueFilter();\n      })\n    );\n    this._subs.add(this.subscribeToEvent(SortCriteriaChanged, this.handleSortByChange));\n\n    const metricScene = sceneGraph.getAncestor(this, MetricScene);\n    const metric = metricScene.state.metric;\n    this._query = getAutoQueriesForMetric(metric).breakdown;\n\n    // The following state changes (and conditions) will each result in a call to `clearBreakdownPanelAxisValues`.\n    // By clearing the axis, subsequent calls to `reportBreakdownPanelData` will adjust to an updated axis range.\n    // These state changes coincide with the panels having their data updated, making a call to `reportBreakdownPanelData`.\n    // If the axis was not cleared by `clearBreakdownPanelAxisValues` any calls to `reportBreakdownPanelData` which result\n    // in the same axis will result in no updates to the panels.\n\n    const trail = getTrailFor(this);\n    trail.state.$timeRange?.subscribeToState(() => {\n      // The change in time range will cause a refresh of panel values.\n      this.clearBreakdownPanelAxisValues();\n    });\n\n    // OTEL\n    this._subs.add(\n      trail.subscribeToState(({ useOtelExperience }, oldState) => {\n        // if otel changes\n        if (useOtelExperience !== oldState.useOtelExperience) {\n          this.updateBody(variable);\n        }\n      })\n    );\n\n    // OTEL\n    const resourceAttributes = sceneGraph.lookupVariable(VAR_OTEL_GROUP_LEFT, trail);\n    if (isConstantVariable(resourceAttributes)) {\n      resourceAttributes?.subscribeToState((newState, oldState) => {\n        // wait for the resource attributes to be loaded\n        if (newState.value !== oldState.value) {\n          this.updateBody(variable);\n        }\n      });\n    }\n\n    this.updateBody(variable);\n  }\n\n  private breakdownPanelMaxValue: number | undefined;\n  private breakdownPanelMinValue: number | undefined;\n\n  public reportBreakdownPanelData(data: PanelData | undefined) {\n    if (!data) {\n      return;\n    }\n\n    let newMin = this.breakdownPanelMinValue;\n    let newMax = this.breakdownPanelMaxValue;\n\n    data.series.forEach((dataFrame) => {\n      dataFrame.fields.forEach((breakdownData) => {\n        if (breakdownData.type !== FieldType.number) {\n          return;\n        }\n        const values = breakdownData.values.filter(isNumber);\n\n        const maxValue = max(values);\n        const minValue = min(values);\n\n        newMax = max([newMax, maxValue].filter(isNumber));\n        newMin = min([newMin, minValue].filter(isNumber));\n      });\n    });\n\n    if (newMax === undefined || newMin === undefined || !Number.isFinite(newMax + newMin)) {\n      return;\n    }\n\n    if (this.breakdownPanelMaxValue === newMax && this.breakdownPanelMinValue === newMin) {\n      return;\n    }\n\n    this.breakdownPanelMaxValue = newMax;\n    this.breakdownPanelMinValue = newMin;\n\n    this._triggerAxisChangedEvent();\n  }\n\n  private _triggerAxisChangedEvent = throttle(() => {\n    const { breakdownPanelMinValue, breakdownPanelMaxValue } = this;\n    if (breakdownPanelMinValue !== undefined && breakdownPanelMaxValue !== undefined) {\n      this.publishEvent(new BreakdownAxisChangeEvent({ min: breakdownPanelMinValue, max: breakdownPanelMaxValue }));\n    }\n  }, 1000);\n\n  private clearBreakdownPanelAxisValues() {\n    this.breakdownPanelMaxValue = undefined;\n    this.breakdownPanelMinValue = undefined;\n  }\n\n  private getVariable(): QueryVariable {\n    const variable = sceneGraph.lookupVariable(VAR_GROUP_BY, this)!;\n    if (!isQueryVariable(variable)) {\n      throw new Error('Group by variable not found');\n    }\n\n    return variable;\n  }\n\n  private handleSortByChange = (event: SortCriteriaChanged) => {\n    if (event.target !== 'labels') {\n      return;\n    }\n    if (this.state.body instanceof LayoutSwitcher) {\n      this.state.body.state.breakdownLayouts.forEach((layout) => {\n        if (layout instanceof ByFrameRepeater) {\n          layout.sort(event.sortBy);\n        }\n      });\n    }\n    reportExploreMetrics('sorting_changed', { from: 'label-breakdown', sortBy: event.sortBy });\n  };\n\n  private onReferencedVariableValueChanged() {\n    const variable = this.getVariable();\n    variable.changeValueTo(ALL_VARIABLE_VALUE);\n    this.updateBody(variable);\n  }\n\n  private updateBody(variable: QueryVariable) {\n    const options = getLabelOptions(this, variable);\n\n    const trail = getTrailFor(this);\n\n    let allLabelOptions = options;\n    if (trail.state.useOtelExperience) {\n      allLabelOptions = this.updateLabelOptions(trail, allLabelOptions);\n    }\n\n    const stateUpdate: Partial<LabelBreakdownSceneState> = {\n      loading: variable.state.loading,\n      value: String(variable.state.value),\n      labels: allLabelOptions,\n      error: variable.state.error,\n      blockingMessage: undefined,\n    };\n\n    if (!variable.state.loading && variable.state.options.length) {\n      stateUpdate.body = variable.hasAllValue()\n        ? buildAllLayout(allLabelOptions, this._query!, this.onBreakdownLayoutChange, trail.state.useOtelExperience)\n        : buildNormalLayout(this._query!, this.onBreakdownLayoutChange, this.state.search);\n    } else if (!variable.state.loading) {\n      stateUpdate.body = undefined;\n      stateUpdate.blockingMessage = 'There are no labels found for this metric.';\n    }\n\n    this.clearBreakdownPanelAxisValues();\n    // Setting the new panels will gradually end up calling reportBreakdownPanelData to update the new min & max\n    this.setState(stateUpdate);\n  }\n\n  public onBreakdownLayoutChange = (_: BreakdownLayoutType) => {\n    this.clearBreakdownPanelAxisValues();\n  };\n\n  public onChange = (value?: string) => {\n    if (!value) {\n      return;\n    }\n\n    reportExploreMetrics('label_selected', { label: value, cause: 'selector' });\n    const variable = this.getVariable();\n\n    variable.changeValueTo(value);\n  };\n\n  private async updateOtelGroupLeft() {\n    const trail = getTrailFor(this);\n\n    if (trail.state.useOtelExperience) {\n      await updateOtelJoinWithGroupLeft(trail, trail.state.metric ?? '');\n    }\n  }\n\n  /**\n   * supplement normal label options with resource attributes\n   * @param trail\n   * @param allLabelOptions\n   * @returns\n   */\n  private updateLabelOptions(trail: DataTrail, allLabelOptions: SelectableValue[]): Array<SelectableValue<string>> {\n    // when the group left variable is changed we should get all the resource attributes + labels\n    const resourceAttributes = sceneGraph.lookupVariable(VAR_OTEL_GROUP_LEFT, trail)?.getValue();\n    if (typeof resourceAttributes !== 'string') {\n      return [];\n    }\n\n    const attributeArray: SelectableValue[] = resourceAttributes.split(',').map((el) => {\n      let label = el;\n      if (!isValidLegacyName(el)) {\n        // remove '' from label\n        label = el.slice(1, -1);\n      }\n      return { label, value: el };\n    });\n    // shift ALL value to the front\n    const all: SelectableValue = [{ label: 'All', value: ALL_VARIABLE_VALUE }];\n    const firstGroup = all.concat(attributeArray);\n\n    // remove duplicates of ALL option\n    allLabelOptions = allLabelOptions.filter((option) => option.value !== ALL_VARIABLE_VALUE);\n    allLabelOptions = firstGroup.concat(allLabelOptions);\n\n    return allLabelOptions;\n  }\n\n  public static Component = ({ model }: SceneComponentProps<LabelBreakdownScene>) => {\n    const { labels, body, search, sortBy, loading, value, blockingMessage } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    const trail = getTrailFor(model);\n    const { useOtelExperience } = trail.useState();\n\n    let allLabelOptions = labels;\n    if (trail.state.useOtelExperience) {\n      // All value moves to the middle because it is part of the label options variable\n      const all: SelectableValue = [{ label: 'All', value: ALL_VARIABLE_VALUE }];\n      allLabelOptions.filter((option) => option.value !== ALL_VARIABLE_VALUE).unshift(all);\n    }\n\n    const [dismissOtelWarning, updateDismissOtelWarning] = useState(false);\n    const missingOtelTargets = sceneGraph.lookupVariable(VAR_MISSING_OTEL_TARGETS, trail)?.getValue();\n    if (missingOtelTargets && !dismissOtelWarning) {\n      reportExploreMetrics('missing_otel_labels_by_truncating_job_and_instance', {\n        metric: trail.state.metric,\n      });\n    }\n\n    useEffect(() => {\n      if (useOtelExperience) {\n        // this will update the group left variable\n        model.updateOtelGroupLeft();\n      }\n    }, [model, useOtelExperience]);\n\n    return (\n      <div className={styles.container}>\n        <StatusWrapper {...{ isLoading: loading, blockingMessage }}>\n          <div className={styles.controls}>\n            {!loading && labels.length && (\n              <Field label={useOtelExperience ? 'By attribute' : 'By label'}>\n                <BreakdownLabelSelector options={allLabelOptions} value={value} onChange={model.onChange} />\n              </Field>\n            )}\n\n            {value !== ALL_VARIABLE_VALUE && (\n              <>\n                <Field label=\"Search\" className={styles.searchField}>\n                  <search.Component model={search} />\n                </Field>\n                <sortBy.Component model={sortBy} />\n              </>\n            )}\n            {body instanceof LayoutSwitcher && (\n              <Field label=\"View\">\n                <body.Selector model={body} />\n              </Field>\n            )}\n          </div>\n          {missingOtelTargets && !dismissOtelWarning && (\n            <Alert\n              title={`Warning: There may be missing Open Telemetry resource attributes.`}\n              severity={'warning'}\n              key={'warning'}\n              onRemove={() => updateDismissOtelWarning(true)}\n              className={styles.truncatedOTelResources}\n            >\n              This metric has too many job and instance label values to call the Prometheus label_values endpoint with\n              the match[] parameter. These label values are used to join the metric with target_info, which contains the\n              resource attributes. Please include more resource attributes filters.\n            </Alert>\n          )}\n\n          <div className={styles.content}>{body && <body.Component model={body} />}</div>\n        </StatusWrapper>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n      paddingTop: theme.spacing(1),\n    }),\n    content: css({\n      flexGrow: 1,\n      display: 'flex',\n      paddingTop: theme.spacing(0),\n    }),\n    searchField: css({\n      flexGrow: 1,\n    }),\n    controls: css({\n      flexGrow: 0,\n      display: 'flex',\n      alignItems: 'flex-end',\n      gap: theme.spacing(2),\n      justifyContent: 'space-between',\n    }),\n    truncatedOTelResources: css({\n      minWidth: '30vw',\n      flexGrow: 0,\n    }),\n  };\n}\n\nexport function buildAllLayout(\n  options: Array<SelectableValue<string>>,\n  queryDef: AutoQueryDef,\n  onBreakdownLayoutChange: BreakdownLayoutChangeCallback,\n  useOtelExperience?: boolean\n) {\n  const children: SceneFlexItemLike[] = [];\n\n  for (const option of options) {\n    if (option.value === ALL_VARIABLE_VALUE) {\n      continue;\n    }\n\n    if (children.length === MAX_PANELS_IN_ALL_LABELS_BREAKDOWN) {\n      break;\n    }\n\n    const expr = queryDef.queries[0].expr.replaceAll(VAR_GROUP_BY_EXP, utf8Support(String(option.value)));\n    const unit = queryDef.unit;\n\n    const vizPanel = PanelBuilders.timeseries()\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi, sort: SortOrder.Descending })\n      .setOption('legend', { showLegend: false })\n      .setTitle(option.label!)\n      .setData(\n        new SceneQueryRunner({\n          maxDataPoints: MDP_METRIC_PREVIEW,\n          datasource: trailDS,\n          queries: [\n            {\n              refId: `A-${option.label}`,\n              expr,\n              legendFormat: `{{${option.label}}}`,\n              fromExploreMetrics: true,\n            },\n          ],\n        })\n      )\n      .setHeaderActions([new SelectLabelAction({ labelName: String(option.value) })])\n      .setShowMenuAlways(true)\n      .setMenu(new PanelMenu({ labelName: String(option.value) }))\n      .setUnit(unit)\n      .setBehaviors([fixLegendForUnspecifiedLabelValueBehavior])\n      .build();\n\n    children.push(\n      new SceneCSSGridItem({\n        $behaviors: [yAxisSyncBehavior],\n        body: vizPanel,\n      })\n    );\n  }\n  return new LayoutSwitcher({\n    breakdownLayoutOptions: [\n      { value: 'grid', label: 'Grid' },\n      { value: 'rows', label: 'Rows' },\n    ],\n    onBreakdownLayoutChange,\n    breakdownLayouts: [\n      new SceneCSSGridLayout({\n        templateColumns: GRID_TEMPLATE_COLUMNS,\n        autoRows: '200px',\n        children: children,\n        isLazy: true,\n      }),\n      new SceneCSSGridLayout({\n        templateColumns: '1fr',\n        autoRows: '200px',\n        // Clone children since a scene object can only have one parent at a time\n        children: children.map((c) => c.clone()),\n        isLazy: true,\n      }),\n    ],\n  });\n}\n\nconst GRID_TEMPLATE_COLUMNS = 'repeat(auto-fit, minmax(400px, 1fr))';\n\nfunction buildNormalLayout(\n  queryDef: AutoQueryDef,\n  onBreakdownLayoutChange: BreakdownLayoutChangeCallback,\n  searchScene: BreakdownSearchScene\n) {\n  const unit = queryDef.unit;\n\n  function getLayoutChild(data: PanelData, frame: DataFrame, frameIndex: number): SceneFlexItem {\n    const vizPanel: VizPanel = queryDef\n      .vizBuilder()\n      .setTitle(getLabelValue(frame))\n      .setData(new SceneDataNode({ data: { ...data, series: [frame] } }))\n      .setColor({ mode: 'fixed', fixedColor: getColorByIndex(frameIndex) })\n      .setHeaderActions([new AddToFiltersGraphAction({ frame })])\n      .setShowMenuAlways(true)\n      .setMenu(new PanelMenu({ labelName: getLabelValue(frame) }))\n      .setUnit(unit)\n      .build();\n\n    // Find a frame that has at more than one point.\n    const isHidden = frame.length <= 1;\n\n    const item: SceneCSSGridItem = new SceneCSSGridItem({\n      $behaviors: [yAxisSyncBehavior],\n      body: vizPanel,\n      isHidden,\n    });\n\n    return item;\n  }\n\n  const { sortBy } = getSortByPreference('labels', 'outliers');\n  const getFilter = () => searchScene.state.filter ?? '';\n\n  return new LayoutSwitcher({\n    $data: new SceneQueryRunner({\n      datasource: trailDS,\n      maxDataPoints: MDP_METRIC_PREVIEW,\n      queries: queryDef.queries,\n    }),\n    breakdownLayoutOptions: [\n      { value: 'single', label: 'Single' },\n      { value: 'grid', label: 'Grid' },\n      { value: 'rows', label: 'Rows' },\n    ],\n    onBreakdownLayoutChange,\n    breakdownLayouts: [\n      new SceneFlexLayout({\n        direction: 'column',\n        children: [\n          new SceneFlexItem({\n            minHeight: 300,\n            body: PanelBuilders.timeseries()\n              .setOption('tooltip', { mode: TooltipDisplayMode.Multi, sort: SortOrder.Descending })\n              .setOption('legend', { showLegend: false })\n              .setTitle('$metric')\n              .build(),\n          }),\n        ],\n      }),\n      new ByFrameRepeater({\n        body: new SceneCSSGridLayout({\n          templateColumns: GRID_TEMPLATE_COLUMNS,\n          autoRows: '200px',\n          children: [\n            new SceneFlexItem({\n              body: new SceneReactObject({\n                reactNode: <LoadingPlaceholder text=\"Loading...\" />,\n              }),\n            }),\n          ],\n        }),\n        getLayoutChild,\n        sortBy,\n        getFilter,\n      }),\n      new ByFrameRepeater({\n        body: new SceneCSSGridLayout({\n          templateColumns: '1fr',\n          autoRows: '200px',\n          children: [],\n        }),\n        getLayoutChild,\n        sortBy,\n        getFilter,\n      }),\n    ],\n  });\n}\n\nfunction getLabelValue(frame: DataFrame) {\n  const labels = frame.fields[1]?.labels || {};\n\n  const keys = Object.keys(labels);\n  if (keys.length === 0) {\n    return '<unspecified>';\n  }\n\n  return labels[keys[0]];\n}\n\nexport function buildLabelBreakdownActionScene() {\n  return new LabelBreakdownScene({});\n}\n\ninterface SelectLabelActionState extends SceneObjectState {\n  labelName: string;\n}\n\nexport class SelectLabelAction extends SceneObjectBase<SelectLabelActionState> {\n  public onClick = () => {\n    const label = this.state.labelName;\n\n    // check that it is resource or label and update the rudderstack event\n    const trail = getTrailFor(this);\n    const resourceAttributes = sceneGraph.lookupVariable(VAR_OTEL_GROUP_LEFT, trail)?.getValue();\n    let otel_resource_attribute = false;\n    if (typeof resourceAttributes === 'string') {\n      otel_resource_attribute = resourceAttributes?.split(',').includes(label);\n    }\n\n    reportExploreMetrics('label_selected', { label, cause: 'breakdown_panel', otel_resource_attribute });\n    getBreakdownSceneFor(this).onChange(label);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<AddToFiltersGraphAction>) => {\n    return (\n      <Button variant=\"secondary\" size=\"sm\" fill=\"outline\" onClick={model.onClick}>\n        Select\n      </Button>\n    );\n  };\n}\n\nfunction getBreakdownSceneFor(model: SceneObject): LabelBreakdownScene {\n  if (model instanceof LabelBreakdownScene) {\n    return model;\n  }\n\n  if (model.parent) {\n    return getBreakdownSceneFor(model.parent);\n  }\n\n  throw new Error('Unable to find breakdown scene');\n}\n\nfunction fixLegendForUnspecifiedLabelValueBehavior(vizPanel: VizPanel) {\n  vizPanel.state.$data?.subscribeToState((newState, prevState) => {\n    const target = newState.data?.request?.targets[0];\n    if (hasLegendFormat(target)) {\n      const { legendFormat } = target;\n      // Assume {{label}}\n      const label = legendFormat.slice(2, -2);\n\n      newState.data?.series.forEach((series) => {\n        if (!series.fields[1]?.labels?.[label]) {\n          const labels = series.fields[1]?.labels;\n          if (labels) {\n            labels[label] = `<unspecified ${label}>`;\n          }\n        }\n      });\n    }\n  });\n}\n\nfunction hasLegendFormat(target: DataQuery | undefined): target is DataQuery & { legendFormat: string } {\n  return target !== undefined && 'legendFormat' in target && typeof target.legendFormat === 'string';\n}\n","import { css } from '@emotion/css';\nimport { DashboardCursorSync, type GrafanaTheme2 } from '@grafana/data';\nimport { useChromeHeaderHeight } from '@grafana/runtime';\nimport {\n  behaviors,\n  SceneFlexItem,\n  SceneFlexLayout,\n  SceneObjectBase,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { AutoVizPanel } from './autoQuery/components/AutoVizPanel';\nimport { MetricActionBar } from './MetricScene';\nimport { getTrailFor, getTrailSettings } from './utils';\n\nexport const MAIN_PANEL_MIN_HEIGHT = 280;\nexport const MAIN_PANEL_MAX_HEIGHT = '40%';\nexport const METRIC_AUTOVIZPANEL_KEY = 'metric-graph';\n\nexport interface MetricGraphSceneState extends SceneObjectState {\n  topView: SceneFlexLayout;\n  selectedTab?: SceneObject;\n}\n\nexport class MetricGraphScene extends SceneObjectBase<MetricGraphSceneState> {\n  public constructor(state: Partial<MetricGraphSceneState>) {\n    super({\n      topView: state.topView ?? buildGraphTopView(),\n      ...state,\n    });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MetricGraphScene>) => {\n    const { topView, selectedTab } = model.useState();\n    const { stickyMainGraph } = getTrailSettings(model).useState();\n    const chromeHeaderHeight = useChromeHeaderHeight();\n    const trail = getTrailFor(model);\n    const styles = useStyles2(getStyles, trail.state.embedded ? 0 : chromeHeaderHeight ?? 0);\n\n    return (\n      <div className={styles.container}>\n        <div className={stickyMainGraph ? styles.sticky : styles.nonSticky}>\n          <topView.Component model={topView} />\n        </div>\n        {selectedTab && <selectedTab.Component model={selectedTab} />}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2, chromeHeaderHeight: number) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      position: 'relative',\n      flexGrow: 1,\n    }),\n    sticky: css({\n      display: 'flex',\n      flexDirection: 'row',\n      background: theme.isLight ? theme.colors.background.primary : theme.colors.background.canvas,\n      position: 'sticky',\n      paddingTop: theme.spacing(1),\n      marginTop: `-${theme.spacing(1)}`,\n      top: `${chromeHeaderHeight + 70}px`,\n      zIndex: 10,\n    }),\n    nonSticky: css({\n      display: 'flex',\n      flexDirection: 'row',\n    }),\n  };\n}\n\nfunction buildGraphTopView() {\n  return new SceneFlexLayout({\n    direction: 'column',\n    $behaviors: [new behaviors.CursorSync({ key: 'metricCrosshairSync', sync: DashboardCursorSync.Crosshair })],\n    children: [\n      new SceneFlexItem({\n        minHeight: MAIN_PANEL_MIN_HEIGHT,\n        maxHeight: MAIN_PANEL_MAX_HEIGHT,\n        body: new AutoVizPanel({ key: METRIC_AUTOVIZPANEL_KEY }),\n      }),\n      new SceneFlexItem({\n        ySizing: 'content',\n        body: new MetricActionBar({}),\n      }),\n    ],\n  });\n}\n","import { type AdHocVariableFilter, type TimeRange } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { sceneGraph, type SceneObject } from '@grafana/scenes';\n\nimport { createMetricsLogsConnector, type FoundLokiDataSource } from './base';\nimport { findHealthyLokiDataSources } from '../../RelatedLogs/RelatedLogsOrchestrator';\nimport { VAR_FILTERS } from '../../shared';\nimport { getTrailFor } from '../../utils';\nimport { isAdHocFiltersVariable } from '../../utils/utils.variables';\n\nconst knownLabelNameDiscrepancies = {\n  job: 'service_name', // `service.name` is `job` in Mimir and `service_name` in Loki\n  instance: 'service_instance_id', // `service.instance.id` is `instance` in Mimir and `service_instance_id` in Loki\n} as const;\n\nfunction isLabelNameThatShouldBeReplaced(x: string): x is keyof typeof knownLabelNameDiscrepancies {\n  return x in knownLabelNameDiscrepancies;\n}\n\nfunction replaceKnownLabelNames(labelName: string): string {\n  if (isLabelNameThatShouldBeReplaced(labelName)) {\n    return knownLabelNameDiscrepancies[labelName];\n  }\n\n  return labelName;\n}\n\n/**\n * Checks if a Loki data source has labels matching the current filters\n */\nasync function hasMatchingLabels(datasourceUid: string, filters: AdHocVariableFilter[], timeRange?: TimeRange) {\n  const ds = await getDataSourceSrv().get(datasourceUid);\n\n  // Get all available label keys for this data source\n  const labelKeys = await ds.getTagKeys?.({\n    timeRange,\n    filters: filters.map(({ key, operator, value }) => ({\n      key: replaceKnownLabelNames(key),\n      operator,\n      value,\n    })),\n  });\n\n  if (!Array.isArray(labelKeys)) {\n    return false;\n  }\n\n  const availableLabels = new Set(labelKeys.map((key) => key.text));\n\n  // Early return if none of our filter labels exist in this data source\n  const mappedFilterLabels = filters.map((f) => replaceKnownLabelNames(f.key));\n  const hasRequiredLabels = mappedFilterLabels.every((label) => availableLabels.has(label));\n  if (!hasRequiredLabels) {\n    return false;\n  }\n\n  // Check if each filter's value exists for its label\n  const results = await Promise.all(\n    filters.map(async (filter) => {\n      const lokiLabelName = replaceKnownLabelNames(filter.key);\n      const values = await ds.getTagValues?.({\n        key: lokiLabelName,\n        timeRange,\n        filters,\n      });\n\n      if (!Array.isArray(values)) {\n        return false;\n      }\n\n      return values.some((v) => v.text === filter.value);\n    })\n  );\n\n  // If any of the filters have no matching values, return false\n  return results.every(Boolean);\n}\n\nexport const createLabelsCrossReferenceConnector = (scene: SceneObject) => {\n  // In this connector, conditions have been met for related logs when label filters have been applied\n  let conditionsMetForRelatedLogs = false;\n\n  return createMetricsLogsConnector({\n    name: 'labelsCrossReference',\n    checkConditionsMetForRelatedLogs: () => conditionsMetForRelatedLogs,\n    async getDataSources(): Promise<FoundLokiDataSource[]> {\n      const trail = getTrailFor(scene);\n      const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, trail);\n\n      if (!isAdHocFiltersVariable(filtersVariable) || !filtersVariable.state.filters.length) {\n        conditionsMetForRelatedLogs = false;\n        return [];\n      }\n\n      conditionsMetForRelatedLogs = true;\n      const filters = filtersVariable.state.filters.map(({ key, operator, value }) => ({ key, operator, value }));\n\n      // Get current time range if available\n      const timeRange = scene.state.$timeRange?.state.value;\n\n      const lokiDataSources = await findHealthyLokiDataSources();\n      const results = await Promise.all(\n        lokiDataSources.map(async ({ uid, name }) => {\n          const hasLabels = await hasMatchingLabels(uid, filters, timeRange);\n          return hasLabels ? { uid, name } : null;\n        })\n      );\n\n      return results.filter((ds): ds is FoundLokiDataSource => ds !== null);\n    },\n    getLokiQueryExpr(): string {\n      const trail = getTrailFor(scene);\n      const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, trail);\n\n      if (!isAdHocFiltersVariable(filtersVariable) || !filtersVariable.state.filters.length) {\n        return '';\n      }\n\n      const labelValuePairs = filtersVariable.state.filters.map(\n        (filter) => `${replaceKnownLabelNames(filter.key)}${filter.operator}\"${filter.value}\"`\n      );\n\n      return `{${labelValuePairs.join(',')}}`; // e.g. `{environment=\"dev\",region=\"us-west-1\"}`\n    },\n  });\n};\n","import { type DataSourceInstanceSettings, type DataSourceJsonData } from '@grafana/data';\nimport { MetricExpr, parser, PipelineExpr, Selector } from '@grafana/lezer-logql';\nimport { getBackendSrv, type BackendSrvRequest, type FetchResponse } from '@grafana/runtime';\nimport { type SyntaxNode } from '@lezer/common';\nimport { lastValueFrom } from 'rxjs';\n\nimport { createMetricsLogsConnector, type FoundLokiDataSource } from './base';\nimport { findHealthyLokiDataSources } from '../../RelatedLogs/RelatedLogsOrchestrator';\n\nexport interface RecordingRuleGroup {\n  name: string;\n  rules: RecordingRule[];\n}\n\nexport interface RecordingRule {\n  name: string;\n  query: string;\n  type: 'recording' | 'alerting' | string;\n  labels?: Record<string, string>;\n}\n\nexport interface ExtractedRecordingRule extends RecordingRule {\n  datasource: FoundLokiDataSource;\n  hasMultipleOccurrences?: boolean;\n}\n\nexport interface ExtractedRecordingRules {\n  [dataSourceUID: string]: ExtractedRecordingRule[];\n}\n\n/**\n * Fetch Loki recording rule groups from the specified datasource.\n *\n * @param datasourceSettings - The settings of the datasource instance.\n * @returns A promise that resolves to an array of recording rule groups.\n */\nasync function fetchRecordingRuleGroups(datasourceSettings: DataSourceInstanceSettings<DataSourceJsonData>) {\n  const recordingRuleUrl = `api/prometheus/${datasourceSettings.uid}/api/v1/rules`;\n  const recordingRules: BackendSrvRequest = { url: recordingRuleUrl, showErrorAlert: false, showSuccessAlert: false };\n  const res = await lastValueFrom<\n    FetchResponse<{\n      data: { groups: RecordingRuleGroup[] };\n    }>\n  >(getBackendSrv().fetch(recordingRules));\n\n  if (!res.ok) {\n    console.warn(`Failed to fetch recording rules from Loki data source: ${datasourceSettings.name}`);\n    return [];\n  }\n\n  return res.data.data.groups;\n}\n\n/**\n * Extract recording rules from the provided rule groups and associate them with the given data source.\n *\n * @param ruleGroups - An array of recording rule groups to extract rules from.\n * @param ds - The data source instance settings to associate with the extracted rules.\n * @returns An array of extracted recording rules, each associated with the provided data source.\n */\nexport function extractRecordingRulesFromRuleGroups(\n  ruleGroups: RecordingRuleGroup[],\n  ds: DataSourceInstanceSettings<DataSourceJsonData>\n): ExtractedRecordingRule[] {\n  if (ruleGroups.length === 0) {\n    return [];\n  }\n\n  // We only want to return the first matching rule when there are multiple rules with same name\n  const extractedRules = new Map<string, ExtractedRecordingRule>();\n  ruleGroups.forEach((rg) => {\n    rg.rules\n      .filter((r) => r.type === 'recording')\n      .forEach(({ type, name, query }) => {\n        const isExist = extractedRules.has(name);\n        if (isExist) {\n          // We already have the rule.\n          const existingRule = extractedRules.get(name);\n          if (existingRule) {\n            existingRule.hasMultipleOccurrences = true;\n            extractedRules.set(name, existingRule);\n          }\n        } else {\n          extractedRules.set(name, {\n            type,\n            name,\n            query,\n            datasource: {\n              name: ds.name,\n              uid: ds.uid,\n            },\n            hasMultipleOccurrences: false,\n          });\n        }\n      });\n  });\n\n  return Array.from(extractedRules.values());\n}\n\n/**\n * Retrieve an array of Loki data sources that contain recording rules with the specified metric name.\n *\n * @param metricName - The name of the metric to search for within the recording rules.\n * @param extractedRecordingRules - An object containing extracted recording rules, where each key is a string and the value is an array of recording rules.\n * @returns An array of `FoundLokiDataSource` objects that contain recording rules with the specified metric name.\n */\nexport function getDataSourcesWithRecordingRulesContainingMetric(\n  metricName: string,\n  extractedRecordingRules: ExtractedRecordingRules\n): FoundLokiDataSource[] {\n  const foundLokiDataSources: FoundLokiDataSource[] = [];\n  Object.values(extractedRecordingRules).forEach((recRules) => {\n    recRules\n      .filter((rr) => rr.name === metricName)\n      .forEach((rr) => {\n        foundLokiDataSources.push(rr.datasource);\n      });\n  });\n\n  return foundLokiDataSources;\n}\n\n/**\n * Generate a Loki query string for a related metric based on the provided metric name, data source ID,\n * and extracted recording rules.\n *\n * @param metricName - The name of the metric for which to generate the Loki query.\n * @param dataSourceUid - The UID of the data source containing the recording rules.\n * @param extractedRecordingRules - An object containing recording rules, indexed by data source UID.\n * @returns The generated Loki query string, or an empty string if the data source UID or metric name is not found.\n */\nexport function getLokiQueryForRelatedMetric(\n  metricName: string,\n  dataSourceUid: string,\n  extractedRecordingRules: ExtractedRecordingRules\n): string {\n  if (!dataSourceUid || !extractedRecordingRules[dataSourceUid]) {\n    return '';\n  }\n  const targetRule = extractedRecordingRules[dataSourceUid].find((rule) => rule.name === metricName);\n  if (!targetRule) {\n    return '';\n  }\n  const lokiQuery = getLogQueryFromMetricsQuery(targetRule.query);\n\n  return lokiQuery;\n}\n\n/**\n * Fetch and extract Loki recording rules from all Loki data sources.\n *\n * @returns {Promise<ExtractedRecordingRules>} A promise that resolves to an object containing\n * the extracted recording rules, keyed by data source UID.\n *\n * @throws Will log an error to the console if fetching or extracting rules fails for any data source.\n */\nexport async function fetchAndExtractLokiRecordingRules() {\n  const lokiDataSources = await findHealthyLokiDataSources();\n  const extractedRecordingRules: ExtractedRecordingRules = {};\n  await Promise.all(\n    lokiDataSources.map(async (dataSource) => {\n      try {\n        const ruleGroups: RecordingRuleGroup[] = await fetchRecordingRuleGroups(dataSource);\n        const extractedRules = extractRecordingRulesFromRuleGroups(ruleGroups, dataSource);\n        extractedRecordingRules[dataSource.uid] = extractedRules;\n      } catch (err) {\n        console.warn(err);\n      }\n    })\n  );\n\n  return extractedRecordingRules;\n}\n\nconst createLokiRecordingRulesConnector = () => {\n  let lokiRecordingRules: ExtractedRecordingRules = {};\n\n  // In this connector, conditions have been met for related logs\n  // when we find at least one data source with recording rules\n  // containing the selected metric\n  let conditionsMetForRelatedLogs = false;\n\n  return createMetricsLogsConnector({\n    name: 'lokiRecordingRules',\n    checkConditionsMetForRelatedLogs: () => conditionsMetForRelatedLogs,\n    async getDataSources(selectedMetric: string): Promise<FoundLokiDataSource[]> {\n      lokiRecordingRules = await fetchAndExtractLokiRecordingRules();\n      const lokiDataSources = getDataSourcesWithRecordingRulesContainingMetric(selectedMetric, lokiRecordingRules);\n      conditionsMetForRelatedLogs = Boolean(lokiDataSources.length);\n\n      return lokiDataSources;\n    },\n    getLokiQueryExpr(selectedMetric: string, datasourceUid: string): string {\n      return getLokiQueryForRelatedMetric(selectedMetric, datasourceUid, lokiRecordingRules);\n    },\n  });\n};\n\nexport const lokiRecordingRulesConnector = createLokiRecordingRulesConnector();\n\n/**\n * Returns whether the given query is a logs query (not a metrics query)\n * A query that's at least 3 characters long and doesn't contain a MetricExpr node is considered a logs query\n */\nfunction isLogsQuery(query: string): boolean {\n  if (query.trim().length <= 2) {\n    return false;\n  }\n\n  let hasMetricExpr = false;\n  const tree = parser.parse(query);\n\n  tree.iterate({\n    enter: ({ type }): false | void => {\n      if (type.id === MetricExpr) {\n        hasMetricExpr = true;\n        return false;\n      }\n    },\n  });\n\n  return !hasMetricExpr;\n}\n\n/**\n * Gets a node of the specified type from a LogQL query string\n * Returns undefined if no node of that type is found\n */\nfunction getNodeFromQuery(query: string, nodeType: number): SyntaxNode | undefined {\n  let foundNode: SyntaxNode | undefined;\n  const tree = parser.parse(query);\n\n  tree.iterate({\n    enter: (node): false | void => {\n      if (node.type.id === nodeType) {\n        foundNode = node.node;\n        return false;\n      }\n    },\n  });\n\n  return foundNode;\n}\n\n/**\n * Extracts the underlying log query from a metrics query\n * For metrics queries, it returns the selector and pipeline parts\n * For logs queries, it returns the original query unchanged\n * Returns an empty string if no valid query can be extracted\n *\n * @example\n * // Returns '{foo=\"bar\"} |= \"error\"'\n * getLogQueryFromMetricsQuery('rate({foo=\"bar\"} |= \"error\"[5m])')\n *\n * // Returns '{foo=\"bar\"}'\n * getLogQueryFromMetricsQuery('sum(rate({foo=\"bar\"}[5m]))')\n *\n * // Returns original query unchanged\n * getLogQueryFromMetricsQuery('{foo=\"bar\"} |= \"error\"')\n */\nexport function getLogQueryFromMetricsQuery(query: string): string {\n  // If it's already a logs query, return as-is\n  if (isLogsQuery(query)) {\n    return query;\n  }\n\n  // Get the selector node which contains the log query matchers\n  const selectorNode = getNodeFromQuery(query, Selector);\n  if (!selectorNode) {\n    return '';\n  }\n\n  const selector = query.substring(selectorNode.from, selectorNode.to);\n\n  // Get the pipeline expression node if it exists (contains filters, parsers etc.)\n  const pipelineExprNode = getNodeFromQuery(query, PipelineExpr);\n  const pipelineExpr = pipelineExprNode ? query.substring(pipelineExprNode.from, pipelineExprNode.to) : '';\n\n  // Combine selector with pipeline expression if it exists\n  return `${selector} ${pipelineExpr}`.trim();\n}\n","import { LoadingState, type DataSourceInstanceSettings, type DataSourceJsonData } from '@grafana/data';\nimport { getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { SceneQueryRunner } from '@grafana/scenes';\n\nimport { type MetricsLogsConnector } from '../Integrations/logs/base';\nimport { createLabelsCrossReferenceConnector } from '../Integrations/logs/labelsCrossReference';\nimport { lokiRecordingRulesConnector } from '../Integrations/logs/lokiRecordingRules';\nimport { type MetricScene } from '../MetricScene';\nimport pluginJson from '../plugin.json';\n\ntype DataSource = DataSourceInstanceSettings<DataSourceJsonData>;\n\n/**\n * Manager class that handles the orchestration of related logs functionality.\n * This centralizes logs-related logic that was previously spread across multiple components.\n */\nexport class RelatedLogsOrchestrator {\n  private readonly _logsConnectors: MetricsLogsConnector[];\n  private readonly _metricScene: MetricScene;\n  private readonly _changeHandlers = {\n    lokiDataSources: [] as Array<(dataSources: DataSource[]) => void>,\n    relatedLogsCount: [] as Array<(count: number) => void>,\n  };\n  /**\n   * Internal state that powers public properties defined by getters and setters.\n   */\n  private readonly _internalState = {\n    relatedLogsCount: 0,\n    lokiDataSources: [] as DataSource[],\n  };\n\n  constructor(metricScene: MetricScene) {\n    this._metricScene = metricScene;\n    this._logsConnectors = [lokiRecordingRulesConnector, createLabelsCrossReferenceConnector(metricScene)];\n  }\n\n  get lokiDataSources() {\n    return this._internalState.lokiDataSources;\n  }\n\n  set lokiDataSources(dataSources: DataSource[]) {\n    const currentDataSourcesSignature = this._internalState.lokiDataSources.map((ds) => ds.uid).join(',');\n    const newDataSourcesSignature = dataSources.map((ds) => ds.uid).join(',');\n\n    if (currentDataSourcesSignature && currentDataSourcesSignature === newDataSourcesSignature) {\n      return;\n    }\n\n    this._internalState.lokiDataSources = dataSources;\n    this._changeHandlers.lokiDataSources.forEach((handler) => handler(this._internalState.lokiDataSources));\n  }\n\n  set relatedLogsCount(count: number) {\n    this._internalState.relatedLogsCount = count;\n    this._changeHandlers.relatedLogsCount.forEach((handler) => handler(this._internalState.relatedLogsCount));\n  }\n\n  /**\n   * Add a listener that will be called when the lokiDataSources change.\n   */\n  addLokiDataSourcesChangeHandler(handler: (dataSources: DataSource[]) => void) {\n    this._changeHandlers.lokiDataSources.push(handler);\n  }\n\n  /**\n   * Add a listener that will be called when the relatedLogsCount changes.\n   */\n  addRelatedLogsCountChangeHandler(handler: (count: number) => void) {\n    this._changeHandlers.relatedLogsCount.push(handler);\n  }\n\n  /**\n   * Called when filters change to re-check for logs in datasources.\n   */\n  public handleFiltersChange(): void {\n    if (!this.lokiDataSources) {\n      return;\n    }\n\n    // When filters change, we need to reset our state to trigger updates in listeners\n    // Setting to empty array (vs undefined) signals we're actively checking\n    this.lokiDataSources = [];\n    this.relatedLogsCount = 0;\n\n    // Check all available datasources for logs after filter changes\n    this.findAndCheckAllDatasources();\n  }\n\n  /**\n   * Find all available datasources and check them for logs.\n   * This is used when filters change to ensure we're checking all possible datasources.\n   */\n  public async findAndCheckAllDatasources(): Promise<void> {\n    // Get all available Loki datasources\n    const allLokiDatasources = await findHealthyLokiDataSources();\n\n    // Check all datasources for logs\n    if (allLokiDatasources.length > 0) {\n      this.checkLogsInDataSources(allLokiDatasources);\n    } else {\n      // No datasources available\n      this.lokiDataSources = [];\n      this.relatedLogsCount = 0;\n    }\n  }\n\n  /**\n   * Get the Loki queries for a given datasource.\n   */\n  public getLokiQueries(\n    datasourceUid: string,\n    maxLines = 100\n  ): Array<{ refId: string; expr: string; maxLines: number }> {\n    const { metric } = this._metricScene.state;\n    const queriesByConnector = this._logsConnectors.reduce<Record<string, string>>((acc, connector, idx) => {\n      const lokiExpr = connector.getLokiQueryExpr(metric, datasourceUid);\n      if (lokiExpr) {\n        acc[connector.name ?? `connector-${idx}`] = lokiExpr;\n      }\n      return acc;\n    }, {});\n\n    const queries = Object.keys(queriesByConnector).map((connectorName) => ({\n      refId: `RelatedLogs-${connectorName}`,\n      expr: queriesByConnector[connectorName],\n      maxLines,\n      supportingQueryType: pluginJson.id,\n    }));\n\n    return queries;\n  }\n\n  /**\n   * Check each datasource for logs, then update the datasources and relatedLogsCount accordingly.\n   */\n  private checkLogsInDataSources(datasources: DataSource[]): void {\n    // Check each datasource for logs\n    const datasourcesWithLogs: DataSource[] = [];\n    let totalLogsCount = 0;\n    let totalChecked = 0;\n\n    // If no datasources to check, update immediately\n    if (datasources.length === 0) {\n      this.lokiDataSources = [];\n      this.relatedLogsCount = 0;\n      return;\n    }\n\n    // Check each datasource for logs\n    datasources.forEach((datasource) => {\n      const queryRunner = new SceneQueryRunner({\n        datasource: { uid: datasource.uid },\n        queries: [],\n        key: `related_logs_check_${datasource.uid}`,\n      });\n\n      // Build and set queries\n      queryRunner.setState({\n        queries: this.getLokiQueries(datasource.uid),\n      });\n\n      // Subscribe to results\n      queryRunner.subscribeToState((state) => {\n        if (state.data?.state === LoadingState.Done) {\n          totalChecked++;\n\n          // Check if we found logs in this datasource\n          if (state.data?.series) {\n            const rowCount = state.data.series.reduce((sum: number, frame) => sum + frame.length, 0);\n            if (rowCount > 0) {\n              // This datasource has logs\n              datasourcesWithLogs.push(datasource);\n              totalLogsCount += rowCount;\n            }\n          }\n\n          // When all datasources have been checked\n          if (totalChecked === datasources.length) {\n            // Update state with our findings\n            this.lokiDataSources = datasourcesWithLogs;\n            this.relatedLogsCount = totalLogsCount;\n          }\n        }\n      });\n\n      // Activate query\n      queryRunner.activate();\n    });\n  }\n\n  /**\n   * Returns true if any of the connectors have conditions met for related logs to be shown.\n   */\n  public checkConditionsMetForRelatedLogs(): boolean {\n    return this._logsConnectors.some((connector) => connector.checkConditionsMetForRelatedLogs());\n  }\n}\n\nexport async function findHealthyLokiDataSources() {\n  const lokiDataSources = getDataSourceSrv().getList({\n    logs: true,\n    type: 'loki',\n    filter: (ds) => ds.uid !== 'grafana',\n  });\n  const healthyLokiDataSources: DataSource[] = [];\n  const unhealthyLokiDataSources: DataSource[] = [];\n\n  await Promise.all(\n    lokiDataSources.map((ds) =>\n      getBackendSrv()\n        .get(`/api/datasources/${ds.id}/health`, undefined, undefined, {\n          showSuccessAlert: false,\n          showErrorAlert: false,\n        })\n        .then((health) =>\n          health?.status === 'OK' ? healthyLokiDataSources.push(ds) : unhealthyLokiDataSources.push(ds)\n        )\n        .catch(() => unhealthyLokiDataSources.push(ds))\n    )\n  );\n\n  if (unhealthyLokiDataSources.length) {\n    console.warn(\n      `Found ${unhealthyLokiDataSources.length} unhealthy Loki data sources: ${unhealthyLokiDataSources\n        .map((ds) => ds.name)\n        .join(', ')}`\n    );\n  }\n\n  return healthyLokiDataSources;\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Stack, Text, TextLink, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nexport function NoRelatedLogs() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Alert title=\"No related logs found\" severity=\"info\">\n        We couldn&apos;t find any logs related to the current metric with your selected filters.\n      </Alert>\n      <Text>\n        To find related logs, try the following:\n        <ul className={styles.list}>\n          <li>Adjust your label filters to include labels that exist in both the current metric and your logs</li>\n          <li>\n            Select a metric created by a{' '}\n            <TextLink external href=\"https://grafana.com/docs/loki/latest/alert/#recording-rules\">\n              Loki Recording Rule\n            </TextLink>\n          </li>\n          <li>Broaden the time range to include more data</li>\n        </ul>\n      </Text>\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Note: Related logs is an experimental feature.\n      </Text>\n    </Stack>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    list: css({\n      paddingLeft: theme.spacing(2),\n      marginTop: theme.spacing(1),\n    }),\n  };\n}\n","import { LoadingState } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  CustomVariable,\n  PanelBuilders,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneQueryRunner,\n  SceneReactObject,\n  SceneVariableSet,\n  VariableDependencyConfig,\n  VariableValueSelectors,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n  type SceneVariable,\n} from '@grafana/scenes';\nimport { LinkButton, Stack } from '@grafana/ui';\nimport React from 'react';\n\nimport { reportExploreMetrics } from '../interactions';\nimport { VAR_FILTERS, VAR_LOGS_DATASOURCE, VAR_LOGS_DATASOURCE_EXPR } from '../shared';\nimport { NoRelatedLogs } from './NoRelatedLogsFound';\nimport { type RelatedLogsOrchestrator } from './RelatedLogsOrchestrator';\nimport { isCustomVariable } from '../utils/utils.variables';\n\ninterface RelatedLogsSceneProps {\n  orchestrator: RelatedLogsOrchestrator;\n}\n\nexport interface RelatedLogsSceneState extends SceneObjectState, RelatedLogsSceneProps {\n  controls: SceneObject[];\n  body: SceneCSSGridLayout;\n}\n\nconst LOGS_PANEL_CONTAINER_KEY = 'related_logs/logs_panel_container';\nconst RELATED_LOGS_QUERY_KEY = 'related_logs/logs_query';\n\nexport class RelatedLogsScene extends SceneObjectBase<RelatedLogsSceneState> {\n  private _queryRunner?: SceneQueryRunner;\n\n  constructor(props: RelatedLogsSceneProps) {\n    super({\n      controls: [],\n      body: new SceneCSSGridLayout({\n        templateColumns: '1fr',\n        autoRows: 'minmax(300px, 1fr)',\n        children: [\n          new SceneCSSGridItem({\n            key: LOGS_PANEL_CONTAINER_KEY,\n            body: undefined,\n          }),\n        ],\n      }),\n      orchestrator: props.orchestrator,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    // Register handler for future changes to lokiDataSources\n    this.state.orchestrator.addLokiDataSourcesChangeHandler(() => this.setupLogsPanel());\n\n    // If data sources have already been loaded, we don't need to fetch them again\n    if (!this.state.orchestrator.lokiDataSources.length) {\n      this.state.orchestrator.findAndCheckAllDatasources();\n    } else {\n      this.setupLogsPanel();\n    }\n  }\n\n  private showNoLogsFound() {\n    const logsPanelContainer = sceneGraph.findByKeyAndType(this, LOGS_PANEL_CONTAINER_KEY, SceneCSSGridItem);\n    logsPanelContainer.setState({\n      body: new SceneReactObject({ component: NoRelatedLogs }),\n    });\n    this.setState({\n      controls: undefined,\n    });\n    this.state.orchestrator.relatedLogsCount = 0;\n  }\n\n  private setupLogsPanel(): void {\n    if (!this.state.orchestrator.lokiDataSources.length) {\n      this.showNoLogsFound();\n      return;\n    }\n\n    // Clean up existing query runner if it exists\n    if (this._queryRunner) {\n      this._queryRunner.setState({ queries: [] });\n      this._queryRunner = undefined;\n    }\n\n    // Initialize query runner\n    this._queryRunner = new SceneQueryRunner({\n      datasource: { uid: VAR_LOGS_DATASOURCE_EXPR },\n      queries: [],\n      key: RELATED_LOGS_QUERY_KEY,\n    });\n\n    // Set up subscription to query results\n    this._subs.add(\n      this._queryRunner.subscribeToState((state) => {\n        // Only process completed query results\n        if (state.data?.state === LoadingState.Done) {\n          const totalRows = state.data.series\n            ? state.data.series.reduce((sum: number, frame) => sum + frame.length, 0)\n            : 0;\n\n          // Show NoRelatedLogs if no logs found\n          if (totalRows === 0 || !state.data.series?.length) {\n            this.showNoLogsFound();\n          }\n        }\n      })\n    );\n\n    // Set up UI for logs panel\n    const logsPanelContainer = sceneGraph.findByKeyAndType(this, LOGS_PANEL_CONTAINER_KEY, SceneCSSGridItem);\n    logsPanelContainer.setState({\n      body: PanelBuilders.logs().setTitle('Logs').setData(this._queryRunner).build(),\n    });\n\n    // Set up variables for datasource selection\n    const logsDataSourceVariable = new CustomVariable({\n      name: VAR_LOGS_DATASOURCE,\n      label: 'Logs data source',\n      query: this.state.orchestrator.lokiDataSources.map((ds) => `${ds.name} : ${ds.uid}`).join(','),\n    });\n    this.setState({\n      $variables: new SceneVariableSet({ variables: [logsDataSourceVariable] }),\n      controls: [new VariableValueSelectors({ layout: 'vertical' })],\n    });\n    this._subs.add(\n      logsDataSourceVariable.subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          reportExploreMetrics('related_logs_action_clicked', { action: 'logs_data_source_changed' });\n        }\n      })\n    );\n\n    // Update Loki query\n    this.updateLokiQuery();\n  }\n\n  /**\n   * Updates the Loki query based on the configured connectors, selected datasource, and current filters.\n   * This function is called when the selected datasource or filters change.\n   */\n  private updateLokiQuery() {\n    if (!this._queryRunner) {\n      return;\n    }\n\n    const selectedDatasourceVar = sceneGraph.lookupVariable(VAR_LOGS_DATASOURCE, this);\n\n    let selectedDatasourceUid: string | undefined = undefined;\n\n    if (isCustomVariable(selectedDatasourceVar)) {\n      selectedDatasourceUid = selectedDatasourceVar.getValue() as string;\n    }\n\n    if (!selectedDatasourceUid) {\n      return;\n    }\n\n    const queries = this.state.orchestrator.getLokiQueries(selectedDatasourceUid);\n\n    // If no queries were generated, show the NoRelatedLogsScene\n    if (queries.length === 0) {\n      this.showNoLogsFound();\n      return;\n    }\n\n    // Update queries - this will trigger the query runner to fetch new data\n    // The query results will be processed in the subscription handler\n    this._queryRunner.setState({ queries });\n  }\n\n  // Handle variable changes\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_LOGS_DATASOURCE, VAR_FILTERS],\n    onReferencedVariableValueChanged: (variable: SceneVariable) => {\n      if (variable.state.name === VAR_FILTERS) {\n        this.state.orchestrator.handleFiltersChange();\n      } else if (variable.state.name === VAR_LOGS_DATASOURCE) {\n        this.updateLokiQuery();\n      }\n    },\n  });\n\n  static readonly Component = ({ model }: SceneComponentProps<RelatedLogsScene>) => {\n    const { controls, body } = model.useState();\n\n    return (\n      <Stack gap={1} direction={'column'} grow={1}>\n        <Stack gap={1} direction={'row'} justifyContent={'space-between'} alignItems={'start'}>\n          <Stack gap={1}>\n            {controls?.map((control) => (\n              <control.Component key={control.state.key} model={control} />\n            ))}\n          </Stack>\n\n          <LinkButton\n            href={`${config.appSubUrl}/a/grafana-lokiexplore-app`} // We prefix with the appSubUrl for environments that don't host grafana at the root.\n            target=\"_blank\"\n            tooltip=\"Navigate to the Logs Drilldown app\"\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => reportExploreMetrics('related_logs_action_clicked', { action: 'open_logs_drilldown' })}\n          >\n            Open Logs Drilldown\n          </LinkButton>\n        </Stack>\n        <body.Component model={body} />\n      </Stack>\n    );\n  };\n}\n\nexport function buildRelatedLogsScene(props: RelatedLogsSceneProps) {\n  return new RelatedLogsScene(props);\n}\n","import { config } from '@grafana/runtime';\nimport { ToolbarButton } from '@grafana/ui';\nimport React, { useState } from 'react';\n\nimport { PLUGIN_BASE_URL } from './constants';\nimport { UI_TEXT } from './constants/ui';\nimport { type DataTrail } from './DataTrail';\nimport { reportExploreMetrics } from './interactions';\nimport { getUrlForTrail } from './utils';\n\ninterface ShareTrailButtonState {\n  trail: DataTrail;\n}\n\nconst COPY_LABEL = UI_TEXT.METRIC_SELECT_SCENE.COPY_URL_LABEL;\n\nexport const ShareTrailButton = ({ trail }: ShareTrailButtonState) => {\n  const [tooltip, setTooltip] = useState(COPY_LABEL);\n\n  const onShare = () => {\n    if (navigator.clipboard) {\n      reportExploreMetrics('selected_metric_action_clicked', { action: 'share_url' });\n      const appUrl = config.appUrl.endsWith('/') ? config.appUrl.slice(0, -1) : config.appUrl;\n      const url = `${appUrl}${PLUGIN_BASE_URL}/${getUrlForTrail(trail)}`;\n      navigator.clipboard.writeText(url);\n      setTooltip('Copied!');\n      setTimeout(() => {\n        setTooltip(COPY_LABEL);\n      }, 2000);\n    }\n  };\n\n  return <ToolbarButton variant={'canvas'} icon={'share-alt'} tooltip={tooltip} onClick={onShare} />;\n};\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  getExploreURL,\n  QueryVariable,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  SceneVariableSet,\n  VariableDependencyConfig,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { Box, Icon, LinkButton, Stack, Tab, TabsBar, ToolbarButton, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { buildRelatedMetricsScene } from './ActionTabs/RelatedMetricsScene';\nimport { AutoVizPanel } from './autoQuery/components/AutoVizPanel';\nimport { getAutoQueriesForMetric } from './autoQuery/getAutoQueriesForMetric';\nimport { type AutoQueryDef, type AutoQueryInfo } from './autoQuery/types';\nimport { buildLabelBreakdownActionScene } from './Breakdown/LabelBreakdownScene';\nimport { UI_TEXT } from './constants/ui';\nimport { reportExploreMetrics, type Interactions } from './interactions';\nimport {\n  MAIN_PANEL_MAX_HEIGHT,\n  MAIN_PANEL_MIN_HEIGHT,\n  METRIC_AUTOVIZPANEL_KEY,\n  MetricGraphScene,\n} from './MetricGraphScene';\nimport { RelatedLogsOrchestrator } from './RelatedLogs/RelatedLogsOrchestrator';\nimport { buildRelatedLogsScene } from './RelatedLogs/RelatedLogsScene';\nimport {\n  getVariablesWithMetricConstant,\n  MetricSelectedEvent,\n  RefreshMetricsEvent,\n  trailDS,\n  VAR_FILTERS,\n  VAR_GROUP_BY,\n  VAR_METRIC_EXPR,\n  type MakeOptional,\n} from './shared';\nimport { ShareTrailButton } from './ShareTrailButton';\nimport { useBookmarkState } from './TrailStore/useBookmarkState';\nimport { getTrailFor, getUrlForTrail } from './utils';\n\nexport interface MetricSceneState extends SceneObjectState {\n  body: MetricGraphScene;\n  metric: string;\n  autoQuery: AutoQueryInfo;\n  nativeHistogram?: boolean;\n  actionView?: ActionViewType;\n  queryDef?: AutoQueryDef;\n  relatedLogsCount?: number;\n}\n\nexport const actionViews = {\n  breakdown: 'breakdown',\n  related: 'related',\n  relatedLogs: 'logs',\n} as const;\n\nexport type ActionViewType = (typeof actionViews)[keyof typeof actionViews];\n\nexport class MetricScene extends SceneObjectBase<MetricSceneState> {\n  public readonly relatedLogsOrchestrator = new RelatedLogsOrchestrator(this);\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['actionView'] });\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_FILTERS],\n    onReferencedVariableValueChanged: () => {\n      // When filters change, we need to re-check for related logs\n\n      this.relatedLogsOrchestrator.handleFiltersChange();\n    },\n  });\n\n  public constructor(state: MakeOptional<MetricSceneState, 'body' | 'autoQuery'>) {\n    const autoQuery = state.autoQuery ?? getAutoQueriesForMetric(state.metric, state.nativeHistogram);\n    super({\n      $variables: state.$variables ?? getVariableSet(state.metric),\n      body: state.body ?? new MetricGraphScene({}),\n      autoQuery,\n      queryDef: state.queryDef ?? autoQuery.main,\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    if (this.state.actionView === undefined) {\n      this.setActionView(actionViews.breakdown);\n    }\n\n    this.relatedLogsOrchestrator.findAndCheckAllDatasources();\n    this.relatedLogsOrchestrator.addRelatedLogsCountChangeHandler((count) => {\n      this.setState({ relatedLogsCount: count });\n    });\n\n    if (config.featureToggles.enableScopesInMetricsExplore) {\n      // Push the scopes change event to the tabs\n      // The event is not propagated because the tabs are not part of the scene graph\n      this._subs.add(\n        this.subscribeToEvent(RefreshMetricsEvent, (event) => {\n          this.state.body.state.selectedTab?.publishEvent(event);\n        })\n      );\n    }\n  }\n\n  getUrlState() {\n    return { actionView: this.state.actionView };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    if (typeof values.actionView === 'string') {\n      if (this.state.actionView !== values.actionView) {\n        const actionViewDef = actionViewsDefinitions.find((v) => v.value === values.actionView);\n        if (actionViewDef) {\n          this.setActionView(actionViewDef.value);\n        }\n      }\n    } else if (values.actionView === null) {\n      this.setActionView(undefined);\n    }\n  }\n\n  public setActionView(actionView?: ActionViewType) {\n    const { body } = this.state;\n    const actionViewDef = actionViewsDefinitions.find((v) => v.value === actionView);\n\n    if (actionViewDef && actionViewDef.value !== this.state.actionView) {\n      // reduce max height for main panel to reduce height flicker\n      body.state.topView.state.children[0].setState({ maxHeight: MAIN_PANEL_MIN_HEIGHT });\n      body.setState({ selectedTab: actionViewDef.getScene(this) });\n      this.setState({ actionView: actionViewDef.value });\n    } else {\n      // restore max height\n      body.state.topView.state.children[0].setState({ maxHeight: MAIN_PANEL_MAX_HEIGHT });\n      body.setState({ selectedTab: undefined });\n      this.setState({ actionView: undefined });\n    }\n  }\n\n  static Component = ({ model }: SceneComponentProps<MetricScene>) => {\n    const { body } = model.useState();\n    return (\n      <div data-testid=\"metric-scene\">\n        <body.Component model={body} />\n      </div>\n    );\n  };\n\n  public createRelatedLogsScene(): SceneObject<SceneObjectState> {\n    return buildRelatedLogsScene({\n      orchestrator: this.relatedLogsOrchestrator,\n    });\n  }\n}\n\ninterface ActionViewDefinition {\n  displayName: string;\n  value: ActionViewType;\n  description?: string;\n  getScene: (metricScene: MetricScene) => SceneObject<SceneObjectState>;\n}\n\nconst actionViewsDefinitions: ActionViewDefinition[] = [\n  { displayName: 'Breakdown', value: actionViews.breakdown, getScene: buildLabelBreakdownActionScene },\n  {\n    displayName: 'Related metrics',\n    value: actionViews.related,\n    getScene: buildRelatedMetricsScene,\n    description: 'Relevant metrics based on current label filters',\n  },\n  {\n    displayName: 'Related logs',\n    value: actionViews.relatedLogs,\n    getScene: (metricScene: MetricScene) => metricScene.createRelatedLogsScene(),\n    description: 'Relevant logs based on current label filters and time range',\n  },\n];\n\nexport interface MetricActionBarState extends SceneObjectState {}\n\nexport class MetricActionBar extends SceneObjectBase<MetricActionBarState> {\n  public getLinkToExplore = async () => {\n    const metricScene = sceneGraph.getAncestor(this, MetricScene);\n    const autoVizPanel = sceneGraph.findByKeyAndType(this, METRIC_AUTOVIZPANEL_KEY, AutoVizPanel);\n    const panelData =\n      typeof autoVizPanel.state.panel !== 'undefined'\n        ? sceneGraph.getData(autoVizPanel.state.panel).state.data\n        : undefined;\n\n    if (!panelData) {\n      throw new Error('Cannot get link to explore, no panel data found');\n    }\n\n    return getExploreURL(panelData, metricScene, panelData.timeRange);\n  };\n\n  public openExploreLink = async () => {\n    reportExploreMetrics('selected_metric_action_clicked', { action: 'open_in_explore' });\n    this.getLinkToExplore().then((link) => {\n      // We use window.open instead of a Link or <a> because we want to compute the explore link when clicking,\n      // if we precompute it we have to keep track of a lot of dependencies\n      window.open(link, '_blank');\n    });\n  };\n\n  public static Component = ({ model }: SceneComponentProps<MetricActionBar>) => {\n    const metricScene = sceneGraph.getAncestor(model, MetricScene);\n    const styles = useStyles2(getStyles);\n    const trail = getTrailFor(model);\n    const [isBookmarked, toggleBookmark] = useBookmarkState(trail);\n    const { actionView } = metricScene.useState();\n\n    return (\n      <Box paddingY={1} data-testid=\"metric-scene-details\">\n        <div className={styles.actions}>\n          <Stack gap={1}>\n            <ToolbarButton\n              variant={'canvas'}\n              tooltip={UI_TEXT.METRIC_SELECT_SCENE.SELECT_NEW_METRIC_TOOLTIP}\n              onClick={() => {\n                reportExploreMetrics('selected_metric_action_clicked', { action: 'unselect' });\n                trail.publishEvent(new MetricSelectedEvent(undefined));\n              }}\n            >\n              Select new metric\n            </ToolbarButton>\n            <ToolbarButton\n              variant={'canvas'}\n              icon=\"compass\"\n              tooltip={UI_TEXT.METRIC_SELECT_SCENE.OPEN_EXPLORE_LABEL}\n              onClick={model.openExploreLink}\n            />\n            <ShareTrailButton trail={trail} />\n            <ToolbarButton\n              variant={'canvas'}\n              icon={\n                isBookmarked ? (\n                  <Icon name={'favorite'} type={'mono'} size={'lg'} />\n                ) : (\n                  <Icon name={'star'} type={'default'} size={'lg'} />\n                )\n              }\n              tooltip={UI_TEXT.METRIC_SELECT_SCENE.BOOKMARK_LABEL}\n              onClick={toggleBookmark}\n            />\n            {trail.state.embedded && (\n              <LinkButton\n                href={getUrlForTrail(trail)}\n                variant={'secondary'}\n                onClick={() => reportExploreMetrics('selected_metric_action_clicked', { action: 'open_from_embedded' })}\n              >\n                Open\n              </LinkButton>\n            )}\n          </Stack>\n        </div>\n\n        <TabsBar className={styles.customTabsBar}>\n          {actionViewsDefinitions.map((tab, index) => {\n            const label = tab.displayName;\n            const counter = tab.value === actionViews.relatedLogs ? metricScene.state.relatedLogsCount : undefined;\n\n            const tabRender = (\n              <Tab\n                key={index}\n                label={label}\n                counter={counter}\n                active={actionView === tab.value}\n                onChangeTab={() => {\n                  const actionViewChangedPayload: Interactions['metric_action_view_changed'] = { view: tab.value };\n\n                  if (metricScene.relatedLogsOrchestrator.checkConditionsMetForRelatedLogs()) {\n                    actionViewChangedPayload.related_logs_count = counter;\n                  }\n\n                  reportExploreMetrics('metric_action_view_changed', actionViewChangedPayload);\n                  metricScene.setActionView(tab.value);\n                }}\n              />\n            );\n\n            if (tab.description) {\n              return (\n                <Tooltip key={index} content={tab.description} placement=\"bottom-start\" theme=\"info\">\n                  {tabRender}\n                </Tooltip>\n              );\n            }\n            return tabRender;\n          })}\n        </TabsBar>\n      </Box>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    actions: css({\n      [theme.breakpoints.up(theme.breakpoints.values.md)]: {\n        position: 'absolute',\n        right: 0,\n        top: 16,\n        zIndex: 2,\n      },\n    }),\n    customTabsBar: css({\n      paddingBottom: theme.spacing(1),\n    }),\n  };\n}\n\nfunction getVariableSet(metric: string) {\n  return new SceneVariableSet({\n    variables: [\n      ...getVariablesWithMetricConstant(metric),\n      new QueryVariable({\n        name: VAR_GROUP_BY,\n        label: 'Group by',\n        datasource: trailDS,\n        includeAll: true,\n        defaultToAll: true,\n        query: { query: `label_names(${VAR_METRIC_EXPR})`, refId: 'A' },\n        value: '',\n        text: '',\n      }),\n    ],\n  });\n}\n","import { MetricSelectScene } from '../MetricSelect/MetricSelectScene';\n\nexport function buildRelatedMetricsScene() {\n  return new MetricSelectScene({});\n}\n","import { SceneObjectStateChangedEvent } from '@grafana/scenes';\nimport { useEffect, useState } from 'react';\n\nimport { type DataTrail } from '../DataTrail';\nimport { reportExploreMetrics } from '../interactions';\nimport { getTrailStore } from './TrailStore';\n\nexport function useBookmarkState(trail: DataTrail) {\n  // Note that trail object may stay the same, but the state used by `getBookmarkIndex` result may\n  // differ for each re-render of this hook\n  const getBookmarkIndex = () => getTrailStore().getBookmarkIndex(trail);\n\n  const indexOnRender = getBookmarkIndex();\n\n  const [bookmarkIndex, setBookmarkIndex] = useState(indexOnRender);\n\n  useEffect(() => {\n    const sub = trail.subscribeToEvent(SceneObjectStateChangedEvent, ({ payload: { prevState, newState } }) => {\n      setBookmarkIndex(getTrailStore().getBookmarkIndex(trail));\n    });\n    return () => sub.unsubscribe();\n  }, [trail]);\n\n  // Check if index changed and force a re-render\n  if (indexOnRender !== bookmarkIndex) {\n    setBookmarkIndex(indexOnRender);\n  }\n\n  const isBookmarked = bookmarkIndex != null;\n\n  const toggleBookmark = () => {\n    reportExploreMetrics('bookmark_changed', { action: isBookmarked ? 'toggled_off' : 'toggled_on' });\n    if (isBookmarked) {\n      let indexToRemove = getBookmarkIndex();\n      while (indexToRemove != null) {\n        // This loop will remove all indices that have an equivalent bookmark key\n        getTrailStore().removeBookmark(indexToRemove);\n        indexToRemove = getBookmarkIndex();\n      }\n    } else {\n      getTrailStore().addBookmark(trail);\n    }\n    setBookmarkIndex(getBookmarkIndex());\n  };\n\n  const result: [typeof isBookmarked, typeof toggleBookmark] = [isBookmarked, toggleBookmark];\n  return result;\n}\n","export { Parser, prefixDelimited };\n\ninterface Config {\n  minGroupSize: number;\n  idealMaxGroupSize: number;\n  maxDepth: number;\n  miscGroupKey?: string;\n}\n\ninterface Grouping {\n  root: Node;\n}\n\nclass Parser {\n  public config: Config;\n\n  constructor() {\n    this.config = {\n      minGroupSize: 3,\n      idealMaxGroupSize: 30,\n      maxDepth: 100,\n    };\n  }\n\n  parse(values: string[]): Grouping {\n    if (this.config.maxDepth <= 0) {\n      throw new Error('Max depth must be greater than 0');\n    }\n    if (this.config.minGroupSize < 1) {\n      throw new Error('Min group size must be greater than 0');\n    }\n    if (this.config.idealMaxGroupSize < this.config.minGroupSize) {\n      throw new Error('Max group size must be greater than min group size');\n    }\n    if (this.config.miscGroupKey && this.config.miscGroupKey === '') {\n      throw new Error('miscGroupKey cannot be empty');\n    }\n    const root = this.parseStrings(values, 0);\n    return { root };\n  }\n\n  parseStrings(values: string[], level: number): Node {\n    const node: Node = {\n      groups: new Map(),\n      values: [],\n      descendants: 0,\n    };\n    // go through each value and group it by its\n    // prefix, for the current level\n    for (const value of values) {\n      // skip empty values\n      if (value.trim() === '') {\n        continue;\n      }\n      const prefix = prefixDelimited(value, level);\n      // do we have this group?\n      let group = node.groups.get(prefix);\n      if (!group) {\n        // create a new group\n        group = { groups: new Map(), values: [], descendants: 0 };\n        node.groups.set(prefix, group);\n      }\n      // add the value to the group\n      group.values.push(value);\n      group.descendants++;\n    }\n    // check if we need to collapse or split any groups\n    const miscGroupValues: string[] = [];\n    for (let [key, group] of node.groups.entries()) {\n      if (group.values.length < this.config.minGroupSize) {\n        // this group is too small\n        if (this.config.miscGroupKey) {\n          // put the values into the miscGroupValues\n          miscGroupValues.push(...group.values);\n        } else {\n          // put the values into the node itself\n          node.values.push(...group.values);\n        }\n        // keep track of the descendants\n        node.descendants += group.values.length;\n        // remove the group\n        node.groups.delete(key);\n      } else if (group.values.length > this.config.idealMaxGroupSize && level < this.config.maxDepth - 1) {\n        // this group is too big - see if we can split it into\n        // subgroups\n        group = this.parseStrings(group.values, level + 1);\n        node.groups.set(key, group);\n        node.descendants += group.descendants;\n      } else {\n        node.descendants += group.descendants;\n      }\n    }\n    if (this.config.miscGroupKey && miscGroupValues.length > 0) {\n      // looks like we have some values for a misc group\n      const group: Node = {\n        groups: new Map(),\n        values: miscGroupValues,\n        descendants: miscGroupValues.length,\n      };\n      node.groups.set(this.config.miscGroupKey, group);\n    }\n    return node;\n  }\n}\n\nexport interface Node {\n  groups: Map<string, Node>;\n  values: string[];\n  descendants: number;\n}\n\n// PrefixDelimited extracts the prefix of a string at the given level.\nfunction prefixDelimited(s: string, level: number): string {\n  let delimiterCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charCodeAt(i);\n    // Check if the character is not a letter or digit (non-alphanumeric)\n    if (\n      !(\n        (\n          (char >= 0x30 && char <= 0x39) || // 0-9\n          (char >= 0x41 && char <= 0x5a) || // A-Z\n          (char >= 0x61 && char <= 0x7a) || // a-z\n          (char >= 0xc0 && char <= 0xd6) || // Latin-1 Supplement and Extended-A\n          (char >= 0xd8 && char <= 0xf6) || // Latin-1 Supplement and Extended-A\n          (char >= 0xf8 && char <= 0xff) || // Latin-1 Supplement and Extended-A\n          (char >= 0x0100 && char <= 0x017f)\n        ) // Latin Extended-A\n      )\n    ) {\n      delimiterCount++;\n      if (delimiterCount > level) {\n        return s.slice(0, i);\n      }\n    }\n  }\n  return s; // Return the entire string if the level is higher than the number of delimiters.\n}\n","import { type AdHocVariableFilter, type RawTimeRange, type Scope } from '@grafana/data';\nimport { getPrometheusTime, PromQueryModeller, utf8Support } from '@grafana/prometheus';\nimport { config, getBackendSrv } from '@grafana/runtime';\n\nimport { limitOtelMatchTerms } from '../otel/util';\nimport { callSuggestionsApi, type SuggestionsResponse } from '../utils';\n\nconst LIMIT_REACHED = 'results truncated due to limit';\n\nconst queryModeller = new PromQueryModeller();\n\nexport async function getMetricNames(\n  dataSourceUid: string,\n  timeRange: RawTimeRange,\n  scopes: Scope[],\n  filters: AdHocVariableFilter[],\n  jobs: string[],\n  instances: string[],\n  limit?: number\n): Promise<SuggestionsResponse & { limitReached: boolean; missingOtelTargets: boolean }> {\n  if (!config.featureToggles.enableScopesInMetricsExplore) {\n    return await getMetricNamesWithoutScopes(dataSourceUid, timeRange, filters, jobs, instances, limit);\n  }\n\n  return getMetricNamesWithScopes(dataSourceUid, timeRange, scopes, filters, jobs, instances, limit);\n}\n\nexport async function getMetricNamesWithoutScopes(\n  dataSourceUid: string,\n  timeRange: RawTimeRange,\n  adhocFilters: AdHocVariableFilter[],\n  jobs: string[],\n  instances: string[],\n  limit?: number\n) {\n  const matchTerms = config.featureToggles.prometheusSpecialCharsInLabelValues\n    ? adhocFilters.map((filter) =>\n        removeBrackets(queryModeller.renderLabels([{ label: filter.key, op: filter.operator, value: filter.value }]))\n      )\n    : adhocFilters.map((filter) => `${utf8Support(filter.key)}${filter.operator}\"${filter.value}\"`);\n  let missingOtelTargets = false;\n\n  if (jobs.length > 0 && instances.length > 0) {\n    const otelMatches = limitOtelMatchTerms(matchTerms, jobs, instances);\n    missingOtelTargets = otelMatches.missingOtelTargets;\n    matchTerms.push(otelMatches.jobsRegex);\n    matchTerms.push(otelMatches.instancesRegex);\n  }\n\n  const filters = `{${matchTerms.join(',')}}`;\n\n  const url = `/api/datasources/uid/${dataSourceUid}/resources/api/v1/label/__name__/values`;\n  const params: Record<string, string | number> = {\n    start: getPrometheusTime(timeRange.from, false),\n    end: getPrometheusTime(timeRange.to, true),\n    ...(filters && filters !== '{}' ? { 'match[]': filters } : {}),\n    ...(limit ? { limit } : {}),\n  };\n\n  const response = await getBackendSrv().get<SuggestionsResponse>(url, params, 'metrics-drilldown-names');\n\n  if (limit && response.warnings?.includes(LIMIT_REACHED)) {\n    return { ...response, limitReached: true, missingOtelTargets };\n  }\n\n  return { ...response, limitReached: false, missingOtelTargets };\n}\n\nexport async function getMetricNamesWithScopes(\n  dataSourceUid: string,\n  timeRange: RawTimeRange,\n  scopes: Scope[],\n  filters: AdHocVariableFilter[],\n  jobs: string[],\n  instances: string[],\n  limit?: number\n) {\n  const response = await callSuggestionsApi(\n    dataSourceUid,\n    timeRange,\n    scopes,\n    filters,\n    '__name__',\n    limit,\n    'metrics-drilldown-names'\n  );\n\n  if (jobs.length > 0 && instances.length > 0) {\n    filters.push({\n      key: 'job',\n      operator: '=~',\n      value: jobs?.join('|') || '',\n    });\n\n    filters.push({\n      key: 'instance',\n      operator: '=~',\n      value: instances?.join('|') || '',\n    });\n  }\n\n  return {\n    ...response.data,\n    limitReached: !!limit && !!response.data.warnings?.includes(LIMIT_REACHED),\n    missingOtelTargets: false,\n  };\n}\n\nfunction removeBrackets(input: string): string {\n  const match = input.match(/^\\{(.*)\\}$/); // extract the content inside the brackets\n  return match?.[1] ?? '';\n}\n","import { FieldType, LoadingState } from '@grafana/data';\nimport { sceneGraph, type SceneCSSGridItem } from '@grafana/scenes';\n\nimport { MetricSelectScene } from './MetricSelectScene';\n\nexport function hideEmptyPreviews(metric: string) {\n  return (gridItem: SceneCSSGridItem) => {\n    const data = sceneGraph.getData(gridItem);\n    if (!data) {\n      return;\n    }\n\n    data.subscribeToState((state) => {\n      if (state.data?.state === LoadingState.Loading || state.data?.state === LoadingState.Error) {\n        return;\n      }\n      const scene = sceneGraph.getAncestor(gridItem, MetricSelectScene);\n\n      if (!state.data?.series.length) {\n        scene.updateMetricPanel(metric, true, true);\n        return;\n      }\n\n      let hasValue = false;\n      for (const frame of state.data.series) {\n        for (const field of frame.fields) {\n          if (field.type !== FieldType.number) {\n            continue;\n          }\n\n          hasValue = field.values.some((v) => v != null && !isNaN(v) && v !== 0);\n          if (hasValue) {\n            break;\n          }\n        }\n        if (hasValue) {\n          break;\n        }\n      }\n      scene.updateMetricPanel(metric, true, !hasValue);\n    });\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase } from '@grafana/scenes';\nimport { Badge, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nexport class NativeHistogramBadge extends SceneObjectBase {\n  public static Component = () => {\n    const styles = useStyles2(getStyles);\n    return <Badge className={styles.badge} color=\"blue\" text=\"Native Histogram\" />;\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    badge: css({\n      borderRadius: theme.shape.radius.pill,\n      border: `1px solid ${theme.colors.info.text}`,\n      background: theme.colors.info.transparent,\n      cursor: 'auto',\n      width: '112px',\n      padding: '0rem 0.25rem 0 0.35rem',\n    }),\n  };\n}\n","import { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Button } from '@grafana/ui';\nimport React from 'react';\n\nimport { MetricSelectedEvent } from '../shared';\n\nexport interface SelectMetricActionState extends SceneObjectState {\n  title: string;\n  metric: string;\n}\n\nexport class SelectMetricAction extends SceneObjectBase<SelectMetricActionState> {\n  public onClick = () => {\n    this.publishEvent(new MetricSelectedEvent(this.state.metric), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SelectMetricAction>) => {\n    const { title, metric } = model.useState();\n    return (\n      <Button variant=\"primary\" size=\"sm\" fill=\"outline\" onClick={model.onClick} data-testid={`select ${metric}`}>\n        {title}\n      </Button>\n    );\n  };\n}\n","import {\n  SceneCSSGridItem,\n  sceneGraph,\n  SceneObjectBase,\n  SceneQueryRunner,\n  SceneVariableSet,\n  VariableDependencyConfig,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { isAdHocFiltersVariable } from 'utils/utils.variables';\n\nimport { buildPrometheusQuery } from '../autoQuery/buildPrometheusQuery';\nimport { heatmapGraphBuilder, simpleGraphBuilder } from '../autoQuery/graphBuilders';\nimport { getUnit } from '../autoQuery/units';\nimport { PanelMenu } from '../Menu/PanelMenu';\nimport { getVariablesWithMetricConstant, MDP_METRIC_PREVIEW, trailDS, VAR_FILTERS } from '../shared';\nimport { getColorByIndex } from '../utils';\nimport { hideEmptyPreviews } from './hideEmptyPreviews';\nimport { NativeHistogramBadge } from './NativeHistogramBadge';\nimport { SelectMetricAction } from './SelectMetricAction';\n\ninterface PreviewPanelState extends SceneObjectState {\n  body: SceneObject;\n  metric: string;\n  hasOtelResources: boolean;\n  isHistogram: boolean;\n}\n\nexport class PreviewPanel extends SceneObjectBase<PreviewPanelState> {\n  protected _variableDependency: VariableDependencyConfig<PreviewPanelState>;\n\n  constructor(params: PreviewPanelState) {\n    super(params);\n\n    this._variableDependency = new VariableDependencyConfig<PreviewPanelState>(this, {\n      variableNames: [VAR_FILTERS],\n      onReferencedVariableValueChanged: () => {\n        this.updateQuery();\n      },\n    });\n\n    // Initial query setup\n    this.updateQuery();\n  }\n\n  private updateQuery() {\n    const filtersVar = sceneGraph.lookupVariable(VAR_FILTERS, this);\n    const filters = isAdHocFiltersVariable(filtersVar) ? filtersVar.state.filters : [];\n\n    // Determine if this is a rate query and what groupings to use based on metric name\n    const { isRateQuery, groupings } = this.determineQueryProperties();\n\n    const queryExpr = buildPrometheusQuery({\n      metric: this.state.metric,\n      filters,\n      isRateQuery,\n      groupings,\n      ignoreUsage: true,\n      useOtelJoin: this.state.hasOtelResources,\n    });\n\n    this.setState({\n      $data: new SceneQueryRunner({\n        datasource: trailDS,\n        maxDataPoints: MDP_METRIC_PREVIEW,\n        queries: [\n          {\n            refId: 'A',\n            expr: queryExpr,\n            legendFormat: this.state.metric,\n            fromExploreMetrics: true,\n            ...(this.state.isHistogram ? { format: 'heatmap' } : {}),\n          },\n        ],\n      }),\n    });\n  }\n\n  private determineQueryProperties() {\n    const metric = this.state.metric;\n    const parts = metric.split('_');\n    const suffix = parts.at(-1);\n\n    // Determine if this is a rate query based on metric suffix\n    const isRateForSuffix = new Set(['count', 'total', 'sum', 'bucket']);\n    const isRateQuery = isRateForSuffix.has(suffix || '');\n\n    // Determine groupings based on metric suffix and native histogram status\n    let groupings: string[] | undefined;\n\n    if (this.state.isHistogram) {\n      groupings = ['le'];\n    }\n\n    return { isRateQuery, groupings };\n  }\n\n  static Component = ({ model }: SceneComponentProps<PreviewPanel>) => {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  };\n}\n\nexport function getPreviewPanelFor(\n  metric: string,\n  index: number,\n  hasOtelResources: boolean,\n  description?: string,\n  nativeHistogram?: boolean,\n  hideMenu?: boolean\n) {\n  const parts = metric.split('_');\n  const suffix = parts.at(-1);\n  const unitSuffix = parts.at(-2);\n  const unit = getUnit(unitSuffix);\n\n  let actions: Array<SelectMetricAction | NativeHistogramBadge> = [new SelectMetricAction({ metric, title: 'Select' })];\n\n  if (nativeHistogram) {\n    actions.unshift(new NativeHistogramBadge({}));\n  }\n\n  // Choose the appropriate visualization based on the metric's suffix\n  const isHistogram = Boolean(suffix === 'bucket' || nativeHistogram);\n\n  let vizPanelBuilder = isHistogram\n    ? heatmapGraphBuilder({ title: metric, unit })\n    : simpleGraphBuilder({ title: metric, unit });\n\n  vizPanelBuilder = vizPanelBuilder\n    .setColor({ mode: 'fixed', fixedColor: getColorByIndex(index) })\n    .setDescription(description)\n    .setHeaderActions(actions)\n    .setShowMenuAlways(true);\n\n  if (!hideMenu) {\n    vizPanelBuilder = vizPanelBuilder.setMenu(new PanelMenu({ labelName: metric }));\n  }\n\n  const vizPanel = vizPanelBuilder.build();\n\n  return new SceneCSSGridItem({\n    body: new PreviewPanel({\n      $behaviors: [hideEmptyPreviews(metric)],\n      $variables: new SceneVariableSet({\n        variables: getVariablesWithMetricConstant(metric),\n      }),\n      body: vizPanel,\n      metric,\n      hasOtelResources,\n      isHistogram,\n    }),\n  });\n}\n","import leven from 'leven';\n\nexport function sortRelatedMetrics(metricList: string[], metric: string) {\n  return metricList.sort((aValue, bValue) => {\n    const a = getLevenDistances(aValue, metric);\n    const b = getLevenDistances(bValue, metric);\n\n    return a.halfLeven + a.wholeLeven - (b.halfLeven + b.wholeLeven);\n  });\n}\n\ntype LevenDistances = { halfLeven: number; wholeLeven: number };\ntype TargetToLevenDistances = Map<string, LevenDistances>;\n\nconst metricToTargetLevenDistances = new Map<string, TargetToLevenDistances>();\n\n// Provides the Levenshtein distance between a metric to be sorted\n// and a targetMetric compared to which all other metrics are being sorted\n// There are two distances: once for the first half and once for the whole string.\n// This operation is not expected to be symmetric; order of parameters matters\n// since only `metric` is split.\nfunction getLevenDistances(metric: string, targetMetric: string) {\n  let targetToDistances: TargetToLevenDistances | undefined = metricToTargetLevenDistances.get(metric);\n  if (!targetToDistances) {\n    targetToDistances = new Map<string, LevenDistances>();\n    metricToTargetLevenDistances.set(metric, targetToDistances);\n  }\n\n  let distances: LevenDistances | undefined = targetToDistances.get(targetMetric);\n  if (!distances) {\n    const metricSplit = metric.split('_');\n    const metricHalf = metricSplit.slice(0, metricSplit.length / 2).join('_');\n\n    const halfLeven = leven(metricHalf, targetMetric!) || 0;\n    const wholeLeven = leven(metric, targetMetric!) || 0;\n\n    distances = { halfLeven, wholeLeven };\n    targetToDistances.set(targetMetric, distances);\n  }\n\n  return distances;\n}\n","// Consider any sequence of characters not permitted for metric names as a sepratator\nconst splitSeparator = /[^a-z0-9_:]+/;\n\nexport function deriveSearchTermsFromInput(whiteSpaceSeparatedTerms?: string) {\n  return (\n    whiteSpaceSeparatedTerms\n      ?.toLowerCase()\n      .split(splitSeparator)\n      .filter((term) => term.length > 0) || []\n  );\n}\n\nexport function createJSRegExpFromSearchTerms(searchQuery?: string) {\n  const searchParts = deriveSearchTermsFromInput(searchQuery).map((part) => `(?=(.*${part.toLowerCase()}.*))`);\n\n  if (searchParts.length === 0) {\n    return null;\n  }\n\n  const regex = searchParts.join('');\n  //  (?=(.*expr1.*)(?=(.*expr2.*))...\n  // The ?=(...) lookahead allows us to match these in any order.\n  return new RegExp(regex, 'igy');\n}\n\nexport function createPromRegExp(searchQuery?: string) {\n  const searchParts = getUniqueTerms(deriveSearchTermsFromInput(searchQuery))\n    .filter((term) => term.length > 0)\n    .map((term) => `(.*${term.toLowerCase()}.*)`);\n\n  const count = searchParts.length;\n\n  if (searchParts.length === 0) {\n    // avoid match[] must contain at least one non-empty matcher\n    return null; //'..*';\n  }\n\n  const regex = `(?i:${searchParts.join('|')}){${count}}`;\n  // (?i:(.*expr_1.*)|.*expr_2.*)|...|.*expr_n.*){n}\n  // ?i: to ignore case\n  // {n} to ensure that it matches n times, one match per term\n  //   - This isn't ideal, since it doesn't enforce that each unique term is matched,\n  //     but it's the best we can do with the Prometheus / Go stdlib implementation of regex.\n\n  return regex;\n}\n\nfunction getUniqueTerms(terms: string[] = []) {\n  const set = new Set(terms.map((term) => term.toLowerCase().trim()));\n  return Array.from(set);\n}\n","import {\n  type SceneObject,\n  type SceneObjectState,\n  type SceneTimeRange,\n  type SceneTimeRangeState,\n} from '@grafana/scenes';\n\nexport function isSceneTimeRange(input: SceneObject | null | undefined): input is SceneTimeRange {\n  return typeof input !== 'undefined' && input !== null && 'getTimeZone' in input && isSceneTimeRangeState(input.state);\n}\n\nexport function isSceneTimeRangeState(input: SceneObjectState | null | undefined): input is SceneTimeRangeState {\n  return typeof input !== 'undefined' && input !== null && 'value' in input && 'from' in input && 'to' in input;\n}\n","import { css } from '@emotion/css';\nimport { type AdHocVariableFilter, type GrafanaTheme2, type RawTimeRange, type SelectableValue } from '@grafana/data';\nimport { config, isFetchError } from '@grafana/runtime';\nimport {\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectStateChangedEvent,\n  SceneObjectUrlSyncConfig,\n  VariableDependencyConfig,\n  type SceneComponentProps,\n  type SceneCSSGridItem,\n  type SceneFlexItem,\n  type SceneFlexLayout,\n  type SceneObject,\n  type SceneObjectRef,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n  type SceneObjectWithUrlSync,\n} from '@grafana/scenes';\nimport { Alert, Badge, Combobox, Field, Icon, IconButton, InlineSwitch, Input, Tooltip, useStyles2 } from '@grafana/ui';\nimport { debounce, isEqual } from 'lodash';\nimport React, { useReducer, type SyntheticEvent } from 'react';\n\nimport { UI_TEXT } from 'constants/ui';\nimport { totalOtelResources } from 'otel/api';\nimport { getOtelResourcesObject } from 'otel/util';\nimport { setOtelExperienceToggleState } from 'services/store';\n\nimport { Parser, type Node } from '../groop/parser';\nimport { getMetricDescription } from '../helpers/MetricDatasourceHelper';\nimport { reportExploreMetrics } from '../interactions';\nimport { MetricScene } from '../MetricScene';\nimport {\n  MetricSelectedEvent,\n  RefreshMetricsEvent,\n  VAR_DATASOURCE,\n  VAR_DATASOURCE_EXPR,\n  VAR_FILTERS,\n  VAR_OTEL_RESOURCES,\n} from '../shared';\nimport { StatusWrapper } from '../StatusWrapper';\nimport { getTrailFor } from '../utils';\nimport { getMetricNames } from './api';\nimport { getPreviewPanelFor } from './PreviewPanel';\nimport { sortRelatedMetrics } from './relatedMetrics';\nimport { createJSRegExpFromSearchTerms, createPromRegExp, deriveSearchTermsFromInput } from './util';\nimport { isSceneCSSGridLayout, isSceneFlexLayout } from '../utils/utils.layout';\nimport { getSelectedScopes } from '../utils/utils.scopes';\nimport { isSceneTimeRange, isSceneTimeRangeState } from '../utils/utils.timerange';\nimport { isAdHocFiltersVariable } from '../utils/utils.variables';\n\ninterface MetricPanel {\n  name: string;\n  index: number;\n  itemRef?: SceneObjectRef<SceneCSSGridItem>;\n  isEmpty?: boolean;\n  isPanel?: boolean;\n  loaded?: boolean;\n}\n\nexport interface MetricSelectSceneState extends SceneObjectState {\n  body: SceneFlexLayout | SceneCSSGridLayout;\n  rootGroup?: Node;\n  metricPrefix?: string;\n  metricNames?: string[];\n  metricNamesLoading?: boolean;\n  metricNamesError?: string;\n  metricNamesWarning?: string;\n  missingOtelTargets?: boolean;\n}\n\nconst ROW_PREVIEW_HEIGHT = '175px';\nconst METRIC_PREFIX_ALL = 'all';\n\nconst MAX_METRIC_NAMES = 20000;\n\nconst viewByTooltip =\n  'View by the metric prefix. A metric prefix is a single word at the beginning of the metric name, relevant to the domain the metric belongs to.';\n\nexport class MetricSelectScene extends SceneObjectBase<MetricSelectSceneState> implements SceneObjectWithUrlSync {\n  private previewCache: Record<string, MetricPanel> = {};\n  private ignoreNextUpdate = false;\n  private _debounceRefreshMetricNames = debounce(() => this._refreshMetricNames(), 1000);\n\n  constructor(state: Partial<MetricSelectSceneState>) {\n    super({\n      $variables: state.$variables,\n      metricPrefix: state.metricPrefix ?? METRIC_PREFIX_ALL,\n      body:\n        state.body ??\n        new SceneCSSGridLayout({\n          children: [],\n          templateColumns: 'repeat(auto-fill, minmax(450px, 1fr))',\n          autoRows: ROW_PREVIEW_HEIGHT,\n          isLazy: true,\n        }),\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['metricPrefix'] });\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_DATASOURCE, VAR_OTEL_RESOURCES],\n    onReferencedVariableValueChanged: () => {\n      // In all cases, we want to reload the metric names\n      this._debounceRefreshMetricNames();\n    },\n  });\n\n  getUrlState() {\n    return { metricPrefix: this.state.metricPrefix };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    if (typeof values.metricPrefix === 'string') {\n      if (this.state.metricPrefix !== values.metricPrefix) {\n        this.setState({ metricPrefix: values.metricPrefix });\n      }\n    }\n  }\n\n  private _onActivate() {\n    if (this.state.body.state.children.length === 0) {\n      this.buildLayout();\n    } else {\n      // Temp hack when going back to select metric scene and variable updates\n      this.ignoreNextUpdate = true;\n    }\n\n    const trail = getTrailFor(this);\n\n    this._subs.add(\n      trail.subscribeToEvent(MetricSelectedEvent, (event) => {\n        if (event.payload !== undefined) {\n          const metricSearch = getMetricSearch(trail);\n          const searchTermCount = deriveSearchTermsFromInput(metricSearch).length;\n\n          reportExploreMetrics('metric_selected', {\n            from: 'metric_list',\n            // HISTORY: need way to identify selected metrics from related metrics\n            // from: isRelatedMetricSelector ? 'related_metrics' : 'metric_list',\n            searchTermCount,\n          });\n        }\n      })\n    );\n\n    this._subs.add(\n      trail.subscribeToEvent(SceneObjectStateChangedEvent, (evt) => {\n        if (isSceneTimeRange(evt.payload.changedObject)) {\n          const { prevState, newState } = evt.payload;\n\n          if (isSceneTimeRangeState(prevState) && isSceneTimeRangeState(newState)) {\n            if (prevState.from === newState.from && prevState.to === newState.to) {\n              return;\n            }\n          }\n        }\n      })\n    );\n\n    this._subs.add(\n      trail.subscribeToState(({ metricSearch }, oldState) => {\n        const oldSearchTerms = deriveSearchTermsFromInput(oldState.metricSearch);\n        const newSearchTerms = deriveSearchTermsFromInput(metricSearch);\n        if (!isEqual(oldSearchTerms, newSearchTerms)) {\n          this._debounceRefreshMetricNames();\n        }\n      })\n    );\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.metricNames !== prevState.metricNames) {\n        this.onMetricNamesChanged();\n      }\n    });\n\n    const otelResourcesVar = sceneGraph.lookupVariable(VAR_OTEL_RESOURCES, trail);\n    if (isAdHocFiltersVariable(otelResourcesVar)) {\n      this._subs.add(\n        otelResourcesVar.subscribeToState((newState, oldState) => {\n          // Only refresh if the filters have changed\n          if (!isEqual(newState.filters, oldState.filters)) {\n            this._debounceRefreshMetricNames();\n          }\n        })\n      );\n    }\n\n    this._subs.add(\n      trail.subscribeToState(() => {\n        // users will most likely not switch this off but for now,\n        // update metric names when changing useOtelExperience\n        this._debounceRefreshMetricNames();\n      })\n    );\n\n    this._subs.add(\n      trail.subscribeToState(() => {\n        // build layout when toggled\n        this.buildLayout();\n      })\n    );\n\n    if (config.featureToggles.enableScopesInMetricsExplore) {\n      this._subs.add(\n        trail.subscribeToEvent(RefreshMetricsEvent, () => {\n          this._debounceRefreshMetricNames();\n        })\n      );\n    }\n\n    const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, this);\n    if (isAdHocFiltersVariable(filtersVariable)) {\n      this._subs.add(\n        filtersVariable?.subscribeToState((newState, prevState) => {\n          // if oldState is not equal to newstate, then we need to refresh the metric names\n          // this handles changes in __name__ labels which are filtered out of the expression in DataTrail.tsx\n          if (!isEqual(prevState, newState)) {\n            this._debounceRefreshMetricNames();\n          }\n        })\n      );\n    }\n\n    this._debounceRefreshMetricNames();\n  }\n\n  private async _refreshMetricNames() {\n    const trail = getTrailFor(this);\n    const timeRange: RawTimeRange | undefined = trail.state.$timeRange?.state;\n\n    if (!timeRange) {\n      return;\n    }\n\n    const filters: AdHocVariableFilter[] = [];\n\n    const filtersVar = sceneGraph.lookupVariable(VAR_FILTERS, this);\n    const adhocFilters = isAdHocFiltersVariable(filtersVar) ? filtersVar?.state.filters ?? [] : [];\n    if (adhocFilters.length > 0) {\n      filters.push(...adhocFilters);\n    }\n\n    const metricSearchRegex = createPromRegExp(trail.state.metricSearch);\n    if (metricSearchRegex) {\n      filters.push({\n        key: '__name__',\n        operator: '=~',\n        value: metricSearchRegex,\n      });\n    }\n\n    const datasourceUid = sceneGraph.interpolate(trail, VAR_DATASOURCE_EXPR);\n    this.setState({ metricNamesLoading: true, metricNamesError: undefined, metricNamesWarning: undefined });\n\n    try {\n      let jobsList: string[] = [];\n      let instancesList: string[] = [];\n      if (trail.state.useOtelExperience) {\n        const otelResourcesObject = getOtelResourcesObject(trail);\n        const otelTargets = await totalOtelResources(datasourceUid, timeRange, otelResourcesObject.filters);\n        jobsList = otelTargets?.jobs ?? [];\n        instancesList = otelTargets?.instances ?? [];\n      }\n\n      const response = await getMetricNames(\n        datasourceUid,\n        timeRange,\n        getSelectedScopes(),\n        filters,\n        jobsList,\n        instancesList,\n        MAX_METRIC_NAMES\n      );\n      const searchRegex = createJSRegExpFromSearchTerms(getMetricSearch(this));\n      let metricNames = searchRegex\n        ? response.data.filter((metric: string) => !searchRegex || searchRegex.test(metric))\n        : response.data;\n\n      // use this to generate groups for metric prefix\n      const filteredMetricNames = metricNames;\n\n      // filter the remaining metrics with the metric prefix\n      const metricPrefix = this.state.metricPrefix;\n      if (metricPrefix && metricPrefix !== 'all') {\n        const prefixRegex = new RegExp(`(^${metricPrefix}.*)`, 'igy');\n        metricNames = metricNames.filter((metric: string) => !prefixRegex || prefixRegex.test(metric));\n      }\n\n      let metricNamesWarning = response.limitReached\n        ? `This feature will only return up to ${MAX_METRIC_NAMES} metric names for performance reasons. ` +\n          `This limit is being exceeded for the current data source. ` +\n          `Add search terms or label filters to narrow down the number of metric names returned.`\n        : undefined;\n\n      // if there are no otel targets for otel resources, there will be no labels\n      if (trail.state.useOtelExperience && (jobsList.length === 0 || instancesList.length === 0)) {\n        metricNames = [];\n        metricNamesWarning = undefined;\n      }\n\n      let bodyLayout = this.state.body;\n\n      // generate groups based on the search metrics input\n      let rootGroupNode = await this.generateGroups(filteredMetricNames);\n\n      this.setState({\n        metricNames,\n        rootGroup: rootGroupNode,\n        body: bodyLayout,\n        metricNamesLoading: false,\n        metricNamesWarning,\n        metricNamesError: response.error,\n        missingOtelTargets: response.missingOtelTargets,\n      });\n    } catch (err: unknown) {\n      let error = 'Unknown error';\n      if (isFetchError(err)) {\n        if (err.cancelled) {\n          error = 'Request cancelled';\n        } else if (err.statusText) {\n          error = err.statusText;\n        }\n      }\n\n      this.setState({ metricNames: undefined, metricNamesLoading: false, metricNamesError: error });\n    }\n  }\n\n  private async generateGroups(metricNames: string[] = []) {\n    const groopParser = new Parser();\n    groopParser.config = {\n      ...groopParser.config,\n      maxDepth: 2,\n      minGroupSize: 2,\n      miscGroupKey: 'misc',\n    };\n    const { root: rootGroupNode } = groopParser.parse(metricNames);\n    return rootGroupNode;\n  }\n\n  private onMetricNamesChanged() {\n    const metricNames = this.state.metricNames || [];\n\n    const nameSet = new Set(metricNames);\n\n    Object.values(this.previewCache).forEach((panel) => {\n      if (!nameSet.has(panel.name)) {\n        panel.isEmpty = true;\n      }\n    });\n\n    const trail = getTrailFor(this);\n    const sortedMetricNames =\n      trail.state.metric !== undefined ? sortRelatedMetrics(metricNames, trail.state.metric) : metricNames;\n    const metricsMap: Record<string, MetricPanel> = {};\n    const metricsLimit = 120;\n\n    // Clear absent metrics from cache\n    Object.keys(this.previewCache).forEach((metric) => {\n      if (!nameSet.has(metric)) {\n        delete this.previewCache[metric];\n      }\n    });\n\n    for (let index = 0; index < sortedMetricNames.length; index++) {\n      const metricName = sortedMetricNames[index];\n\n      if (Object.keys(metricsMap).length > metricsLimit) {\n        break;\n      }\n\n      const oldPanel = this.previewCache[metricName];\n\n      metricsMap[metricName] = oldPanel || { name: metricName, index, loaded: false };\n    }\n\n    try {\n      // If there is a current metric, do not present it\n      const currentMetric = sceneGraph.getAncestor(this, MetricScene).state.metric;\n      delete metricsMap[currentMetric];\n    } catch (err) {\n      // There is no current metric\n    }\n\n    this.previewCache = metricsMap;\n    this.buildLayout();\n  }\n\n  private sortedPreviewMetrics() {\n    return Object.values(this.previewCache).sort((a, b) => {\n      if (a.isEmpty && b.isEmpty) {\n        return a.index - b.index;\n      }\n      if (a.isEmpty) {\n        return 1;\n      }\n      if (b.isEmpty) {\n        return -1;\n      }\n      return a.index - b.index;\n    });\n  }\n\n  private async buildLayout() {\n    const trail = getTrailFor(this);\n    // Temp hack when going back to select metric scene and variable updates\n    if (this.ignoreNextUpdate) {\n      this.ignoreNextUpdate = false;\n      return;\n    }\n\n    const children: SceneFlexItem[] = [];\n\n    const metricsList = this.sortedPreviewMetrics();\n\n    for (let index = 0; index < metricsList.length; index++) {\n      const metric = metricsList[index];\n      const metadata = await trail.getMetricMetadata(metric.name);\n      const description = getMetricDescription(metadata);\n\n      if (metric.itemRef && metric.isPanel) {\n        children.push(metric.itemRef.resolve());\n        continue;\n      }\n      // refactor this into the query generator in future\n      const isNative = trail.isNativeHistogram(metric.name);\n      const hasOtelResources = Boolean(trail.state.hasOtelResources);\n      const panel = getPreviewPanelFor(metric.name, index, hasOtelResources, description, isNative, true);\n      metric.itemRef = panel.getRef();\n      metric.isPanel = true;\n      children.push(panel);\n    }\n\n    this.state.body.setState({ children, autoRows: ROW_PREVIEW_HEIGHT });\n  }\n\n  public updateMetricPanel = (metric: string, isLoaded?: boolean, isEmpty?: boolean) => {\n    const metricPanel = this.previewCache[metric];\n    if (metricPanel) {\n      metricPanel.isEmpty = isEmpty;\n      metricPanel.loaded = isLoaded;\n      this.previewCache[metric] = metricPanel;\n      if (this.state.metricPrefix === 'All') {\n        this.buildLayout();\n      }\n    }\n  };\n\n  public onSearchQueryChange = (evt: SyntheticEvent<HTMLInputElement>) => {\n    const metricSearch = evt.currentTarget.value;\n    const trail = getTrailFor(this);\n    // Update the variable\n    trail.setState({ metricSearch });\n  };\n\n  public onPrefixFilterChange = (val: SelectableValue) => {\n    this.setState({ metricPrefix: val.value });\n    this._refreshMetricNames();\n  };\n\n  public reportPrefixFilterInteraction = (isMenuOpen: boolean) => {\n    reportExploreMetrics('prefix_filter_clicked', {\n      // HISTORY: need way to identify selected metrics from related metrics\n      // from: isRelatedMetricSelector ? 'related_metrics' : 'metric_list',\n      from: 'metric_list',\n      action: isMenuOpen ? 'open' : 'close',\n    });\n  };\n\n  public onToggleOtelExperience = () => {\n    const trail = getTrailFor(this);\n    const useOtelExperience = trail.state.useOtelExperience;\n    // set the startButtonClicked to null as we have gone past the owrkflow this is needed for\n    let startButtonClicked = false;\n    let resettingOtel = true;\n    if (useOtelExperience) {\n      reportExploreMetrics('otel_experience_toggled', { value: 'off' });\n      // if turning off OTel\n      resettingOtel = false;\n      trail.resetOtelExperience();\n    } else {\n      reportExploreMetrics('otel_experience_toggled', { value: 'on' });\n      trail.checkDataSourceForOTelResources();\n    }\n    setOtelExperienceToggleState(!useOtelExperience);\n    trail.setState({ useOtelExperience: !useOtelExperience, resettingOtel, startButtonClicked });\n  };\n\n  public static Component = ({ model }: SceneComponentProps<MetricSelectScene>) => {\n    const {\n      body,\n      metricNames,\n      metricNamesError,\n      metricNamesLoading,\n      metricNamesWarning,\n      rootGroup,\n      metricPrefix,\n      missingOtelTargets,\n    } = model.useState();\n    const { children } = body.useState();\n    const trail = getTrailFor(model);\n    const styles = useStyles2(getStyles);\n\n    const [warningDismissed, dismissWarning] = useReducer(() => true, false);\n\n    const { metricSearch, useOtelExperience, hasOtelResources, isStandardOtel, metric } = trail.useState();\n\n    const tooStrict = children.length === 0 && metricSearch;\n    const noMetrics = !metricNamesLoading && metricNames && metricNames.length === 0;\n\n    const isLoading = metricNamesLoading && children.length === 0;\n\n    const blockingMessage = isLoading\n      ? undefined\n      : missingOtelTargets\n      ? 'There are no metrics found. Please adjust your filters based on your OTel resource attributes.'\n      : (noMetrics && 'There are no results found. Try a different time range or a different data source.') ||\n        (tooStrict && 'There are no results found. Try adjusting your search or filters.') ||\n        undefined;\n\n    const metricNamesWarningIcon = metricNamesWarning ? (\n      <Tooltip\n        content={\n          <>\n            <h4>Unable to retrieve metric names</h4>\n            <p>{metricNamesWarning}</p>\n          </>\n        }\n      >\n        <Icon className={styles.warningIcon} name=\"exclamation-triangle\" />\n      </Tooltip>\n    ) : undefined;\n\n    return (\n      <div className={styles.container} data-testid=\"scene\">\n        <div className={styles.header} data-testid=\"scene-header\">\n          <Field label={UI_TEXT.SEARCH.TITLE} className={styles.searchField}>\n            <Input\n              placeholder={UI_TEXT.SEARCH.TITLE}\n              prefix={<Icon name={'search'} />}\n              value={metricSearch}\n              onChange={model.onSearchQueryChange}\n              suffix={metricNamesWarningIcon}\n            />\n          </Field>\n          <Field\n            label={\n              <div className={styles.displayOptionTooltip}>\n                View by\n                <IconButton name={'info-circle'} size=\"sm\" variant={'secondary'} tooltip={viewByTooltip} />\n              </div>\n            }\n            className={styles.displayOption}\n          >\n            <Combobox\n              value={metricPrefix}\n              onChange={(selected) => model.onPrefixFilterChange(selected)}\n              options={[\n                {\n                  label: 'All metric names',\n                  value: METRIC_PREFIX_ALL,\n                },\n                ...Array.from(rootGroup?.groups.keys() ?? []).map((g) => ({ label: `${g}_`, value: g })),\n              ]}\n              width={16}\n            />\n          </Field>\n          {!metric && hasOtelResources && (\n            <Field\n              label={\n                <>\n                  <div className={styles.displayOptionTooltip}>\n                    Filter by\n                    <Tooltip\n                      content={\n                        <div>\n                          <p>The OTel experience is deprecated in Grafana Metrics Drilldown.</p>\n                          <p>\n                            Please use the following docs to promote your OTel resource attributes as metric labels with{' '}\n                            <a\n                              href=\"https://grafana.com/docs/mimir/latest/configure/configure-otel-collector/#work-with-default-opentelemetry-labels\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              style={{ textDecoration: 'underline' }}\n                            >\n                              Mimir\n                            </a>{' '}\n                            and{' '}\n                            <a\n                              href=\"https://prometheus.io/docs/guides/opentelemetry/#promoting-resource-attributes\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              style={{ textDecoration: 'underline' }}\n                            >\n                              Prometheus\n                            </a>\n                            .\n                          </p>\n                        </div>\n                      }\n                      placement=\"bottom\"\n                      interactive={true}\n                    >\n                      <IconButton\n                        name={'info-circle'}\n                        size=\"sm\"\n                        variant={'secondary'}\n                        aria-label=\"Information about OTel experience\"\n                      />\n                    </Tooltip>\n                    <div>\n                      {/* badge color does not align with theme warning color so we explicitly set it here */}\n                      <Badge text=\"Deprecated\" color={'orange'} className={styles.badgeStyle}></Badge>\n                    </div>\n                  </div>\n                </>\n              }\n              className={styles.displayOption}\n            >\n              <div\n                title={\n                  !isStandardOtel ? 'This setting is disabled because this is not an OTel native data source.' : ''\n                }\n              >\n                <InlineSwitch\n                  disabled={!isStandardOtel}\n                  showLabel={true}\n                  label={UI_TEXT.METRIC_SELECT_SCENE.OTEL_LABEL}\n                  value={useOtelExperience}\n                  onChange={model.onToggleOtelExperience}\n                />\n              </div>\n            </Field>\n          )}\n        </div>\n        {metricNamesError && (\n          <Alert title=\"Unable to retrieve metric names\" severity=\"error\">\n            <div>We are unable to connect to your data source. Double check your data source URL and credentials.</div>\n            <div>({metricNamesError})</div>\n          </Alert>\n        )}\n        {metricNamesWarning && !warningDismissed && (\n          <Alert\n            title=\"Unable to retrieve all metric names\"\n            severity=\"warning\"\n            onSubmit={dismissWarning}\n            onRemove={dismissWarning}\n          >\n            <div>{metricNamesWarning}</div>\n          </Alert>\n        )}\n        <StatusWrapper {...{ isLoading, blockingMessage }}>\n          <div data-testid=\"scene-body\">\n            {isSceneFlexLayout(body) && <body.Component model={body} />}\n            {isSceneCSSGridLayout(body) && <body.Component model={body} />}\n          </div>\n        </StatusWrapper>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    headingWrapper: css({\n      marginBottom: theme.spacing(0.5),\n    }),\n    header: css({\n      flexGrow: 0,\n      display: 'flex',\n      gap: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      alignItems: 'flex-end',\n    }),\n    searchField: css({\n      flexGrow: 1,\n      marginBottom: 0,\n    }),\n    metricTabGroup: css({\n      marginBottom: theme.spacing(2),\n    }),\n    displayOption: css({\n      flexGrow: 0,\n      marginBottom: 0,\n      minWidth: '184px',\n    }),\n    displayOptionTooltip: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n    }),\n    warningIcon: css({\n      color: theme.colors.warning.main,\n    }),\n    badgeStyle: css({\n      display: 'flex',\n      height: '1rem',\n      padding: '0rem 0.25rem 0 0.30rem',\n      alignItems: 'center',\n      borderRadius: theme.shape.radius.pill,\n      border: `1px solid ${theme.colors.warning.text}`,\n      // badge color does not align with theme warning color so we explicitly set it here\n      color: `${theme.colors.warning.text}`,\n      background: theme.colors.info.transparent,\n      marginTop: '4px',\n      marginLeft: '-3px',\n    }),\n  };\n}\n\nfunction getMetricSearch(scene: SceneObject) {\n  const trail = getTrailFor(scene);\n  return trail.state.metricSearch || '';\n}\n","import { type SceneCSSGridLayout, type SceneFlexLayout, type SceneLayout } from '@grafana/scenes';\n\ntype MaybeLayout = SceneLayout | null | undefined;\n\nexport function isSceneCSSGridLayout(input: MaybeLayout): input is SceneCSSGridLayout {\n  return typeof input !== 'undefined' && input !== null && 'isDraggable' in input && 'templateColumns' in input.state;\n}\n\nexport function isSceneFlexLayout(input: MaybeLayout): input is SceneFlexLayout {\n  return typeof input !== 'undefined' && input !== null && 'toggleDirection' in input && 'children' in input.state;\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport React, { type ReactNode } from 'react';\n\ntype Props = {\n  blockingMessage?: string;\n  isLoading?: boolean;\n  children?: ReactNode;\n};\n\nexport function StatusWrapper({ blockingMessage, isLoading, children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  if (isLoading && !blockingMessage) {\n    blockingMessage = 'Loading...';\n  }\n\n  if (isLoading) {\n    return <LoadingPlaceholder className={styles.statusMessage} text={blockingMessage} />;\n  }\n\n  if (!blockingMessage) {\n    return children;\n  }\n\n  return <div className={styles.statusMessage}>{blockingMessage}</div>;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    statusMessage: css({\n      fontStyle: 'italic',\n      marginTop: theme.spacing(7),\n      textAlign: 'center',\n      width: '100%',\n    }),\n  };\n}\n","import { urlUtil } from '@grafana/data';\nimport { sceneUtils, type SceneObject, type SceneObjectRef, type SceneObjectUrlValues } from '@grafana/scenes';\nimport { debounce, isEqual } from 'lodash';\n\nimport { createBookmarkSavedNotification } from './utils';\nimport { DataTrail } from '../DataTrail';\n// import { type TrailStepType } from '../DataTrailsHistory';\nimport { RECENT_TRAILS_KEY, TRAIL_BOOKMARKS_KEY } from '../shared';\nimport { newMetricsTrail } from '../utils';\n\nconst MAX_RECENT_TRAILS = 20;\n\n// Added when removing history to replace serialized trail history with only URL values\nexport interface UrlSerializedTrail {\n  urlValues: SceneObjectUrlValues;\n}\n\n// used in the migration for old history format\nexport interface SerializedTrail {\n  history: SerializedTrailHistory[];\n  currentStep?: number; // Assume last step in history if not specified\n  createdAt?: number;\n}\n\n// used in the migration for old history format\nexport interface SerializedTrailHistory {\n  urlValues: SceneObjectUrlValues;\n  description: string;\n}\n\nexport interface DataTrailBookmark {\n  urlValues: SceneObjectUrlValues;\n  createdAt: number;\n}\n\nexport class TrailStore {\n  private _recent: Array<SceneObjectRef<DataTrail>> = [];\n  private _bookmarks: DataTrailBookmark[] = [];\n  private _save: () => void;\n  private _lastModified: number;\n\n  constructor() {\n    this.load();\n    this._lastModified = Date.now();\n    const doSave = () => {\n      const serializedRecent = this._recent\n        .slice(0, MAX_RECENT_TRAILS)\n        .map((trail) => this._serializeTrail(trail.resolve()));\n      localStorage.setItem(RECENT_TRAILS_KEY, JSON.stringify(serializedRecent));\n      localStorage.setItem(TRAIL_BOOKMARKS_KEY, JSON.stringify(this._bookmarks));\n      this._lastModified = Date.now();\n    };\n\n    this._save = debounce(doSave, 1000);\n\n    window.addEventListener('beforeunload', () => {\n      // Before closing or reloading the page, we want to remove the debounce from `_save` so that\n      // any calls to is on event `unload` are actualized. Debouncing would cause a delay until after the page has been unloaded.\n      this._save = doSave;\n    });\n  }\n\n  private _loadRecentTrailsFromStorage() {\n    const list: Array<SceneObjectRef<DataTrail>> = [];\n    const storageItem = localStorage.getItem(RECENT_TRAILS_KEY);\n    if (storageItem) {\n      const serializedTrails: SerializedTrail[] = JSON.parse(storageItem);\n      for (const t of serializedTrails) {\n        const trail = this._deserializeTrail(t);\n        list.push(trail.getRef());\n      }\n    }\n    return list;\n  }\n\n  private _loadBookmarksFromStorage() {\n    const storageItem = localStorage.getItem(TRAIL_BOOKMARKS_KEY);\n\n    const list: Array<DataTrailBookmark | SerializedTrail> = storageItem ? JSON.parse(storageItem) : [];\n\n    return list.map((item) => {\n      if (isSerializedTrail(item)) {\n        // Take the legacy SerializedTrail implementation of bookmark storage, and extract a DataTrailBookmark\n        const step = item.currentStep != null ? item.currentStep : item.history.length - 1;\n        const bookmark: DataTrailBookmark = {\n          urlValues: item.history[step].urlValues,\n          createdAt: item.createdAt || Date.now(),\n        };\n        return bookmark;\n      }\n      return item;\n    });\n  }\n\n  private _deserializeTrail(t: SerializedTrail | UrlSerializedTrail): DataTrail {\n    // reconstruct the trail based on the serialized history\n    const trail = new DataTrail({});\n\n    const isSerializedTrail = 'history' in t;\n    const urlSerializedTrail = 'urlValues' in t;\n    if (isSerializedTrail) {\n      t.history.map((step) => {\n        // will go through all steps until the last one and load the most recent one\n        this._loadFromUrl(trail, step.urlValues);\n      });\n    } else if (urlSerializedTrail) {\n      this._loadFromUrl(trail, t.urlValues);\n    }\n    trail.setState(sceneUtils.cloneSceneObjectState(trail.state, {}));\n\n    return trail;\n  }\n\n  private _serializeTrail(trail: DataTrail): UrlSerializedTrail {\n    const urlValues = sceneUtils.getUrlState(trail);\n    return { urlValues };\n  }\n\n  public getTrailForBookmarkIndex(index: number) {\n    const bookmark = this._bookmarks[index];\n    if (!bookmark) {\n      // Create a blank trail\n      return newMetricsTrail();\n    }\n    return this.getTrailForBookmark(bookmark);\n  }\n\n  public getTrailForBookmark(bookmark: DataTrailBookmark) {\n    const key = getBookmarkKey(bookmark);\n    // Match for recent trails that have the exact same state as the current step\n    for (const recent of this._recent) {\n      const trail = recent.resolve();\n      if (getBookmarkKey(trail) === key) {\n        return trail;\n      }\n    }\n    // Just create a new trail with that state\n    const trail = new DataTrail({});\n    this._loadFromUrl(trail, bookmark.urlValues);\n    return trail;\n  }\n\n  private _loadFromUrl(node: SceneObject, urlValues: SceneObjectUrlValues) {\n    const urlState = urlUtil.renderUrl('', urlValues);\n    sceneUtils.syncStateFromSearchParams(node, new URLSearchParams(urlState));\n  }\n\n  // Recent Trails\n  get recent() {\n    return this._recent;\n  }\n\n  // Last updated metric\n  get lastModified() {\n    return this._lastModified;\n  }\n\n  load() {\n    this._recent = this._loadRecentTrailsFromStorage();\n    this._bookmarks = this._loadBookmarksFromStorage();\n    this._refreshBookmarkIndexMap();\n    this._lastModified = Date.now();\n  }\n\n  setRecentTrail(recentTrail: DataTrail, fromHome?: boolean) {\n    const notActivated = !recentTrail.state.trailActivated;\n\n    if (notActivated || fromHome) {\n      // We do not set an uninitialized trail, or a RECENT single node \"start\" trail\n      return;\n    }\n\n    // Remove the `recentTrail` from the list if it already exists there\n    this._recent = this._recent.filter((t) => t !== recentTrail.getRef());\n\n    // Check if any existing \"recent\" entries have equivalent urlState to the new recentTrail\n    const recentUrlState = getUrlStateForComparison(recentTrail);\n\n    this._recent = this._recent.filter((t) => {\n      // Use the current step urlValues to filter out equivalent states\n      const urlState = getUrlStateForComparison(t.resolve());\n      // Only keep trails with sufficiently unique urlValues on their current step\n      return !isEqual(recentUrlState, urlState);\n    });\n\n    this._recent.unshift(recentTrail.getRef());\n    this._save();\n  }\n\n  // Bookmarked Trails\n  get bookmarks() {\n    return this._bookmarks;\n  }\n\n  addBookmark(trail: DataTrail) {\n    const urlState = sceneUtils.getUrlState(trail);\n\n    const bookmarkState: DataTrailBookmark = {\n      urlValues: urlState,\n      createdAt: Date.now(),\n    };\n\n    this._bookmarks.unshift(bookmarkState);\n    this._refreshBookmarkIndexMap();\n    this._save();\n    createBookmarkSavedNotification();\n  }\n\n  removeBookmark(index: number) {\n    if (index < this._bookmarks.length) {\n      this._bookmarks.splice(index, 1);\n      this._refreshBookmarkIndexMap();\n      this._save();\n    }\n  }\n\n  getBookmarkIndex(trail: DataTrail) {\n    const bookmarkKey = getBookmarkKey(trail);\n    const bookmarkIndex = this._bookmarkIndexMap.get(bookmarkKey);\n    return bookmarkIndex;\n  }\n\n  private _bookmarkIndexMap = new Map<string, number>();\n\n  private _refreshBookmarkIndexMap() {\n    this._bookmarkIndexMap.clear();\n    this._bookmarks.forEach((bookmarked, index) => {\n      const key = getBookmarkKey(bookmarked);\n      // If there are duplicate bookmarks, the latest index will be kept\n      this._bookmarkIndexMap.set(key, index);\n    });\n  }\n}\n\nfunction getUrlStateForComparison(trail: DataTrail) {\n  const urlState = sceneUtils.getUrlState(trail);\n  // Make a few corrections\n  correctUrlStateForComparison(urlState);\n\n  return urlState;\n}\n\nfunction correctUrlStateForComparison(urlState: SceneObjectUrlValues) {\n  // Omit some URL parameters that are not useful for state comparison,\n  // as they can change in the URL without creating new steps\n  delete urlState.actionView;\n  delete urlState.layout;\n  delete urlState.metricSearch;\n  delete urlState.refresh;\n\n  // Populate defaults\n  if (urlState['var-groupby'] === '' || urlState['var-groupby'] === undefined) {\n    urlState['var-groupby'] = '$__all';\n  }\n\n  if (typeof urlState['var-filters'] !== 'string') {\n    urlState['var-filters'] = urlState['var-filters']?.filter((filter) => filter !== '');\n  }\n\n  return urlState;\n}\n\nexport function getBookmarkKey(trail: DataTrail | DataTrailBookmark) {\n  if (trail instanceof DataTrail) {\n    return JSON.stringify(getUrlStateForComparison(trail));\n  }\n  return JSON.stringify(correctUrlStateForComparison({ ...trail.urlValues }));\n}\n\nlet store: TrailStore | undefined;\nexport function getTrailStore(): TrailStore {\n  if (!store) {\n    store = new TrailStore();\n  }\n\n  return store;\n}\n\nfunction isSerializedTrail(serialized: unknown): serialized is SerializedTrail {\n  return serialized != null && typeof serialized === 'object' && 'history' in serialized;\n}\n","import { AppEvents } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\nimport { LinkButton, Stack } from '@grafana/ui';\nimport React from 'react';\n\nimport { ROUTES } from '../constants';\nimport { HOME_ROUTE } from '../shared';\nimport { currentPathIncludes } from '../utils';\n\nexport function createBookmarkSavedNotification() {\n  const appEvents = getAppEvents();\n  const isSidebarView = currentPathIncludes(ROUTES.Drilldown);\n\n  const infoText = !isSidebarView ? <i>Drilldown &gt; Metrics</i> : <i>the Metrics Reducer sidebar</i>;\n\n  appEvents.publish({\n    type: AppEvents.alertSuccess.name,\n    payload: [\n      'Bookmark created',\n      <Stack gap={2} direction=\"row\" key=\"bookmark-notification\">\n        <div>You can view bookmarks under {infoText}</div>\n        {!isSidebarView && (\n          <LinkButton fill=\"solid\" variant=\"secondary\" href={HOME_ROUTE}>\n            View bookmarks\n          </LinkButton>\n        )}\n      </Stack>,\n    ],\n  });\n}\n","import { css } from '@emotion/css';\nimport { dateTimeFormat, type GrafanaTheme2 } from '@grafana/data';\nimport { sceneGraph } from '@grafana/scenes';\nimport { Card, IconButton, useStyles2 } from '@grafana/ui';\nimport React, { useMemo } from 'react';\n\nimport { type DataTrail } from './DataTrail';\nimport { VAR_FILTERS } from './shared';\nimport { getTrailStore, type DataTrailBookmark } from './TrailStore/TrailStore';\nimport { getMetricName } from './utils';\nimport { isAdHocFiltersVariable } from './utils/utils.variables';\n\nexport type Props = {\n  trail?: DataTrail;\n  bookmark?: DataTrailBookmark;\n  onSelect: () => void;\n  onDelete?: () => void;\n  wide?: boolean;\n  compactHeight?: boolean;\n};\n\n// Helper function to truncate the value for a single key:value pair\nconst truncateValue = (key: string, value: string, maxLength: number) => {\n  const combinedLength = key.length + 2 + value.length; // 2 for \": \"\n  if (combinedLength > maxLength) {\n    return value.substring(0, maxLength - key.length - 5) + '...'; // 5 for \": \" and \"...\"\n  }\n  return value;\n};\n\nexport function DataTrailCard(props: Props) {\n  const { onSelect, onDelete, bookmark } = props;\n  const styles = useStyles2(getStyles);\n\n  const values = useMemo(() => {\n    let trail = props.trail || (bookmark && getTrailStore().getTrailForBookmark(bookmark));\n\n    if (!trail) {\n      return null;\n    }\n\n    const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, trail)!;\n    if (!isAdHocFiltersVariable(filtersVariable)) {\n      return null;\n    }\n\n    const createdAt = bookmark?.createdAt || trail.state.createdAt;\n\n    return {\n      filters: filtersVariable.state.filters,\n      metric: trail.state.metric,\n      createdAt,\n    };\n  }, [props.trail, bookmark]);\n\n  if (!values) {\n    return null;\n  }\n\n  const { filters, metric, createdAt } = values;\n\n  const heading = truncateValue('', getMetricName(metric), 27);\n  const cardHeightClassName = `${props.compactHeight && filters.length > 0 ? styles.cardTall : ''}`;\n  const cardClassName = `${styles.card} ${props.wide ? styles.cardWide : ''} ${cardHeightClassName}`;\n  return (\n    <article data-testid={`data-trail-card ${heading}`}>\n      <Card onClick={onSelect} className={cardClassName}>\n        <Card.Heading>\n          <div className={styles.metricValue}>{heading}</div>\n        </Card.Heading>\n        <Card.Meta className={styles.meta}>\n          {filters.map((f) => (\n            <span key={f.key}>\n              <div className={styles.secondaryFont}>{f.key}: </div>\n              <div className={styles.primaryFont}>{truncateValue(f.key, f.value, 44)}</div>\n            </span>\n          ))}\n        </Card.Meta>\n        <div className={styles.deleteButton}>\n          {onDelete && (\n            <Card.SecondaryActions>\n              <IconButton\n                key=\"delete\"\n                name=\"trash-alt\"\n                className={styles.secondary}\n                tooltip=\"Remove bookmark\"\n                onClick={onDelete}\n                data-testid=\"deleteButton\"\n              />\n            </Card.SecondaryActions>\n          )}\n        </div>\n      </Card>\n      <div className={styles.date}>\n        <div className={styles.secondaryFont}>Date created: </div>\n        <div className={styles.primaryFont}>{createdAt && dateTimeFormat(createdAt, { format: 'YYYY-MM-DD' })}</div>\n      </div>\n    </article>\n  );\n}\n\nexport function getStyles(theme: GrafanaTheme2) {\n  return {\n    metricValue: css({\n      display: 'inline',\n      color: theme.colors.text.primary,\n      fontWeight: 500,\n      wordBreak: 'break-all',\n    }),\n    card: css({\n      position: 'relative',\n      width: '318px',\n      padding: `12px ${theme.spacing(2)} ${theme.spacing(1)} ${theme.spacing(2)}`,\n      alignItems: 'start',\n      marginBottom: 0,\n      borderTop: `1px solid ${theme.colors.border.weak}`,\n      borderRight: `1px solid ${theme.colors.border.weak}`,\n      borderLeft: `1px solid ${theme.colors.border.weak}`,\n      borderBottom: 'none', // Remove the bottom border\n      borderRadius: '2px 2px 0 0', // Top-left and top-right corners are 2px, bottom-left and bottom-right are 0; cannot use theme.shape.radius.default because need bottom corners to be 0\n    }),\n    cardWide: css({\n      width: '100%',\n    }),\n    cardTall: css({\n      height: '110px',\n    }),\n    secondary: css({\n      color: theme.colors.text.secondary,\n      fontSize: '12px',\n    }),\n    date: css({\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderRadius: '0 0 2px 2px',\n      padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n      backgroundColor: theme.colors.background.primary,\n    }),\n    meta: css({\n      flexWrap: 'wrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      maxHeight: '36px', // 2 lines * 18px line-height\n      margin: 0,\n      gridArea: 'Meta',\n      color: theme.colors.text.secondary,\n      whiteSpace: 'nowrap',\n    }),\n    primaryFont: css({\n      display: 'inline',\n      color: theme.colors.text.primary,\n      fontSize: '12px',\n      fontWeight: '500',\n      letterSpacing: '0.018px',\n    }),\n    secondaryFont: css({\n      display: 'inline',\n      color: theme.colors.text.secondary,\n      fontSize: '12px',\n      fontWeight: '400',\n      lineHeight: '18px' /* 150% */,\n      letterSpacing: '0.018px',\n    }),\n    deleteButton: css({\n      position: 'absolute',\n      bottom: theme.spacing(1),\n      right: theme.spacing(1),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase, type SceneComponentProps } from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { useState } from 'react';\n\nimport { SectionTitle } from './SectionTitle';\nimport { type SideBarSectionState } from './types';\nimport { DataTrailCard } from '../../../DataTrailCard';\nimport { reportExploreMetrics } from '../../../interactions';\nimport { getBookmarkKey, getTrailStore } from '../../../TrailStore/TrailStore';\n\n// Create a simple event-based system to avoid circular dependencies\nexport const navigationEvents = {\n  listeners: new Set<(trail: any) => void>(),\n  emit: function (trail: any) {\n    this.listeners.forEach((listener) => listener(trail));\n  },\n  subscribe: function (listener: (trail: any) => void) {\n    this.listeners.add(listener);\n    return () => {\n      this.listeners.delete(listener);\n      return undefined; // Explicitly return void\n    };\n  },\n};\n\n// Simple function to navigate to a trail without using MetricsContext\nfunction goToUrlForTrail(trail: any) {\n  navigationEvents.emit(trail);\n}\n\nexport interface BookmarksListState extends SideBarSectionState {}\n\nexport class BookmarksList extends SceneObjectBase<BookmarksListState> {\n  constructor({\n    key,\n    title,\n    description,\n    icon,\n    disabled,\n  }: {\n    key: BookmarksListState['key'];\n    title: BookmarksListState['title'];\n    description: BookmarksListState['description'];\n    icon: BookmarksListState['icon'];\n    disabled?: BookmarksListState['disabled'];\n  }) {\n    super({\n      key,\n      title,\n      description,\n      icon,\n      disabled: disabled ?? false,\n      active: false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {}\n\n  public static Component = ({ model }: SceneComponentProps<BookmarksList>) => {\n    const styles = useStyles2(getStyles);\n    const { title, description } = model.useState();\n    const { bookmarks } = getTrailStore();\n    const [_, setLastDelete] = useState(Date.now());\n\n    const onSelect = (index: number) => {\n      reportExploreMetrics('exploration_started', { cause: 'bookmark_clicked' });\n      const trail = getTrailStore().getTrailForBookmarkIndex(index);\n      getTrailStore().setRecentTrail(trail);\n      goToUrlForTrail(trail);\n    };\n\n    const onDelete = (index: number) => {\n      getTrailStore().removeBookmark(index);\n      reportExploreMetrics('bookmark_changed', { action: 'deleted' });\n      setLastDelete(Date.now()); // trigger re-render\n    };\n\n    return (\n      <div className={styles.container}>\n        <SectionTitle title={title} description={description} data-testid=\"bookmarks-list-sidebar\" />\n        {bookmarks.length > 0 ? (\n          <div className={styles.bookmarksList}>\n            {bookmarks.map((bookmark, index) => (\n              <DataTrailCard\n                key={getBookmarkKey(bookmark)}\n                bookmark={bookmark}\n                onSelect={() => onSelect(index)}\n                onDelete={() => onDelete(index)}\n                wide={true}\n                compactHeight={true}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className={styles.emptyState}>No bookmarks yet</div>\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n      height: '100%',\n    }),\n    bookmarksList: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1.5),\n      overflowY: 'auto',\n      paddingRight: theme.spacing(1),\n    }),\n    emptyState: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '100px',\n      color: theme.colors.text.secondary,\n      fontStyle: 'italic',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\ntype SectionTitleProps = {\n  title: string;\n  description: string;\n};\n\nexport function SectionTitle({ title, description }: SectionTitleProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <h6 className={styles.title}>\n      <span>{title}</span>\n      <Tooltip content={description} placement=\"top\">\n        <Icon name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n      </Tooltip>\n    </h6>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    title: css({\n      fontSize: '15px',\n      fontWeight: theme.typography.fontWeightLight,\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n      paddingBottom: theme.spacing(0.5),\n    }),\n    infoIcon: css({\n      marginLeft: theme.spacing(1),\n      cursor: 'pointer',\n      color: theme.colors.text.secondary,\n      position: 'relative',\n      top: '-4px',\n    }),\n  };\n}\n","import { AppEvents } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nconst logger = console;\n\nexport function displayError(error: Error, msgs: string[]) {\n  const context = msgs.reduce((acc, msg, i) => ({ ...acc, [`info${i + 1}`]: msg }), { handheldBy: 'displayError' });\n\n  logger.error(error, context);\n\n  getAppEvents().publish({\n    type: AppEvents.alertError.name,\n    payload: msgs,\n  });\n}\n\nexport function displayWarning(msgs: string[]) {\n  logger.warn(msgs);\n\n  getAppEvents().publish({\n    type: AppEvents.alertWarning.name,\n    payload: msgs,\n  });\n}\n\nexport function displaySuccess(msgs: string[]) {\n  getAppEvents().publish({\n    type: AppEvents.alertSuccess.name,\n    payload: msgs,\n  });\n}\n","import { type AdHocVariableFilter } from '@grafana/data';\nimport { isValidLegacyName, utf8Support } from '@grafana/prometheus';\nimport { Expression, MatchingOperator, promql } from 'tsqtsq';\n\nimport { VAR_OTEL_JOIN_QUERY_EXPR } from 'shared';\nexport type NonRateQueryFunction = 'avg' | 'min' | 'max';\nexport const DEFAULT_NON_RATE_QUERY_FUNCTION: NonRateQueryFunction = 'avg';\n\nexport interface BuildPrometheusQueryParams {\n  metric: string;\n  filters: AdHocVariableFilter[];\n  isRateQuery: boolean;\n  useOtelJoin: boolean;\n  groupings?: string[];\n  ignoreUsage?: boolean;\n  nonRateQueryFunction?: NonRateQueryFunction;\n}\n\nexport function getPromqlFunction(\n  isRateQuery: boolean,\n  nonRateQueryFunction: NonRateQueryFunction = DEFAULT_NON_RATE_QUERY_FUNCTION\n): NonRateQueryFunction | 'sum' {\n  return isRateQuery ? 'sum' : nonRateQueryFunction;\n}\n\nexport function buildPrometheusQuery({\n  metric,\n  filters,\n  isRateQuery,\n  useOtelJoin,\n  groupings,\n  ignoreUsage = false,\n  nonRateQueryFunction = DEFAULT_NON_RATE_QUERY_FUNCTION,\n}: BuildPrometheusQueryParams): string {\n  // Check if metric name contains UTF-8 characters\n  const isUtf8Metric = !isValidLegacyName(metric);\n\n  const expr = new Expression({\n    metric: isUtf8Metric ? '' : metric,\n    values: {},\n    defaultOperator: MatchingOperator.equal,\n    defaultSelectors: [\n      ...(isUtf8Metric ? [{ label: utf8Support(metric), operator: MatchingOperator.equal, value: '__REMOVE__' }] : []),\n      ...(ignoreUsage ? [{ label: '__ignore_usage__', operator: MatchingOperator.equal, value: '' }] : []),\n      ...filters.map(({ key, value, operator }) => ({\n        label: utf8Support(key),\n        operator: operator as MatchingOperator,\n        value,\n      })),\n    ],\n  });\n\n  let metricPartString = expr.toString();\n\n  // Hack to have the UTF-8 metric name in braces alongside labels,\n  // but without extra quotes associated with an empty label value\n  if (isUtf8Metric) {\n    metricPartString = metricPartString.replace('=\"__REMOVE__\"', '');\n  }\n\n  // Add rate if needed\n  if (isRateQuery) {\n    metricPartString = promql.rate({ expr: metricPartString, interval: '$__rate_interval' });\n  }\n\n  // Combine with OTel join string if requested\n  const innerQueryString = useOtelJoin ? `${metricPartString} ${VAR_OTEL_JOIN_QUERY_EXPR}` : metricPartString;\n\n  // Build final query using tsqtsq\n  // native histograms will not get `sum by (le)` here because they are not identified as rate queries in `determineProperties` function because they don't have the suffix bucket. The `rate` function is defined much earlier for them in `MetricVizPanel.buildQueryRunner` and is passed here as the `nonRateQueryFunction`.\n  return promql[getPromqlFunction(isRateQuery, nonRateQueryFunction)]({\n    expr: innerQueryString,\n    ...(groupings?.length ? { by: groupings } : {}),\n  });\n}\n","import { PanelBuilders } from '@grafana/scenes';\nimport { SortOrder, TooltipDisplayMode } from '@grafana/schema';\nimport { HeatmapColorMode } from '@grafana/schema/dist/esm/raw/composable/heatmap/panelcfg/x/HeatmapPanelCfg_types.gen';\n\nexport type CommonVizParams = {\n  title: string;\n  unit: string;\n};\n\nexport function simpleGraphBuilder({ title, unit }: CommonVizParams) {\n  return PanelBuilders.timeseries() //\n    .setTitle(title)\n    .setUnit(unit)\n    .setOption('legend', { showLegend: false })\n    .setOption('tooltip', { mode: TooltipDisplayMode.Multi, sort: SortOrder.Descending })\n    .setCustomFieldConfig('fillOpacity', 9);\n}\n\nexport function heatmapGraphBuilder({ title, unit }: CommonVizParams) {\n  return PanelBuilders.heatmap() //\n    .setTitle(title)\n    .setUnit(unit)\n    .setOption('calculate', false)\n    .setOption('color', {\n      mode: HeatmapColorMode.Scheme,\n      exponent: 0.5,\n      scheme: 'Spectral',\n      steps: 32,\n      reverse: false,\n    });\n}\n\nexport function percentilesGraphBuilder({ title, unit }: CommonVizParams) {\n  return PanelBuilders.timeseries()\n    .setTitle(title)\n    .setUnit(unit)\n    .setCustomFieldConfig('fillOpacity', 9)\n    .setOption('tooltip', { mode: TooltipDisplayMode.Multi, sort: SortOrder.Descending })\n    .setOption('legend', { showLegend: false });\n}\n","export const DEFAULT_UNIT = 'short';\nexport const DEFAULT_RATE_UNIT = 'cps'; // Count per second\n\n// Unit constants\nexport const UNIT_BYTES = 'bytes';\nexport const UNIT_SECONDS = 'seconds';\nexport const UNIT_PERCENT = 'percent';\nexport const UNIT_COUNT = 'count';\n\n// Rate unit constants\nexport const RATE_BYTES_PER_SECOND = 'Bps';\nexport const RATE_BITS_PER_SECOND = 'bps';\n\nconst UNIT_MAP: Record<string, string> = {\n  [UNIT_BYTES]: UNIT_BYTES,\n  [UNIT_SECONDS]: 's',\n  [UNIT_PERCENT]: UNIT_PERCENT,\n  [UNIT_COUNT]: DEFAULT_UNIT,\n};\n\nconst UNIT_LIST = Object.keys(UNIT_MAP); // used to check if a metric name contains any of the supported units\n\nconst RATE_UNIT_MAP: Record<string, string> = {\n  [UNIT_BYTES]: RATE_BYTES_PER_SECOND,\n  // seconds per second is unitless\n  [UNIT_SECONDS]: DEFAULT_UNIT,\n  [UNIT_COUNT]: DEFAULT_RATE_UNIT,\n  [UNIT_PERCENT]: UNIT_PERCENT,\n};\n\n// Get unit from metric name (e.g. \"go_gc_duration_seconds\" -> \"seconds\")\nexport function getUnitFromMetric(metric: string) {\n  if (!metric) {\n    return null;\n  }\n\n  // Get last two parts of the metric name and check if they are valid units\n  const metricParts = metric.toLowerCase().split('_').slice(-2);\n  for (let i = metricParts.length - 1; i >= Math.max(0, metricParts.length - 2); i--) {\n    const part = metricParts[i];\n    if (UNIT_LIST.includes(part)) {\n      return part;\n    }\n  }\n\n  return null;\n}\n\n// Get Grafana unit for a panel (e.g. \"go_gc_duration_seconds\" -> \"s\")\nexport function getUnit(metricName: string | undefined) {\n  if (!metricName) {\n    return DEFAULT_UNIT;\n  }\n\n  const metricPart = getUnitFromMetric(metricName);\n  return (metricPart && UNIT_MAP[metricPart.toLowerCase()]) || DEFAULT_UNIT;\n}\n\nexport function getPerSecondRateUnit(metricName: string | undefined) {\n  if (!metricName) {\n    return DEFAULT_RATE_UNIT;\n  }\n\n  const metricPart = getUnitFromMetric(metricName);\n\n  return (metricPart && RATE_UNIT_MAP[metricPart]) || DEFAULT_RATE_UNIT;\n}\n","export const UI_TEXT = {\n  HOME: {\n    TITLE: 'Start your metrics exploration!',\n    SUBTITLE: 'Explore your Prometheus-compatible metrics without writing a query.',\n    START_BUTTON: \"Let's start!\",\n    RECENT_HEADER: 'Or view a recent exploration',\n    BOOKMARKS_HEADER: 'Or view bookmarks',\n  },\n  SEARCH: {\n    TITLE: 'Search metrics',\n  },\n  METRIC_SELECT_SCENE: {\n    OTEL_LABEL: 'OTel experience',\n    OPEN_EXPLORE_LABEL: 'Open in explore',\n    COPY_URL_LABEL: 'Copy url',\n    BOOKMARK_LABEL: 'Bookmark',\n    SELECT_NEW_METRIC_TOOLTIP: 'Remove existing metric and choose a new metric',\n  },\n};\n","import {\n  type DataSourceGetTagKeysOptions,\n  type DataSourceGetTagValuesOptions,\n  type MetricFindValue,\n} from '@grafana/data';\nimport {\n  type PrometheusDatasource,\n  type PromMetricsMetadata,\n  type PromMetricsMetadataItem,\n  type PromQuery,\n} from '@grafana/prometheus';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { type DataTrail } from '../DataTrail';\nimport { VAR_DATASOURCE_EXPR } from '../shared';\nimport { isPrometheusDataSource } from '../utils/utils.datasource';\n\nexport class MetricDatasourceHelper {\n  constructor(trail: DataTrail) {\n    this._trail = trail;\n  }\n\n  public reset() {\n    this._datasource = undefined;\n    this._metricsMetadata = undefined;\n    this._classicHistograms = {};\n    this._nativeHistograms = [];\n  }\n\n  private _trail: DataTrail;\n\n  private _datasource?: PrometheusDatasource;\n\n  private async getDatasource() {\n    if (this._datasource) {\n      return this._datasource;\n    }\n\n    const ds = await getDataSourceSrv().get(VAR_DATASOURCE_EXPR, { __sceneObject: { value: this._trail } });\n\n    if (isPrometheusDataSource(ds)) {\n      this._datasource = ds;\n    }\n\n    return this._datasource;\n  }\n\n  // store metadata in a more easily accessible form\n  _metricsMetadata?: PromMetricsMetadata | undefined;\n\n  private async _getMetricsMetadata() {\n    const ds = await this.getDatasource();\n\n    if (!ds) {\n      return undefined;\n    }\n\n    if (!ds.languageProvider.metricsMetadata) {\n      await ds.languageProvider.loadMetricsMetadata();\n    }\n\n    return ds.languageProvider.metricsMetadata!;\n  }\n\n  public async getMetricMetadata(metric?: string) {\n    if (!metric) {\n      return undefined;\n    }\n    if (!this._metricsMetadata) {\n      this._metricsMetadata = await this._getMetricsMetadata();\n    }\n\n    const metadata = await this._metricsMetadata;\n    return metadata?.[metric];\n  }\n\n  private _classicHistograms: Record<string, number> = {};\n  private _nativeHistograms: string[] = [];\n\n  public listNativeHistograms() {\n    return this._nativeHistograms;\n  }\n\n  /**\n   * Identify native histograms by 2 strategies.\n   * 1. querying classic histograms and all metrics,\n   * then comparing the results and build the collection of native histograms.\n   * 2. querying all metrics and checking if the metric is a histogram type and dies not have the bucket suffix.\n   *\n   * classic histogram = test_metric_bucket\n   * native histogram = test_metric\n   */\n  public async initializeHistograms() {\n    const ds = await this.getDatasource();\n    if (ds && Object.keys(this._classicHistograms).length === 0) {\n      const classicHistogramsCall = ds.metricFindQuery('metrics(.*_bucket)');\n      const allMetricsCall = ds.metricFindQuery('metrics(.*)');\n\n      const [classicHistograms, allMetrics] = await Promise.all([classicHistogramsCall, allMetricsCall]);\n\n      classicHistograms.forEach((m) => {\n        this._classicHistograms[m.text] = 1;\n      });\n\n      if (!this._metricsMetadata) {\n        if (!ds.languageProvider.metricsMetadata) {\n          await ds.languageProvider.loadMetricsMetadata();\n        }\n        this._metricsMetadata = ds.languageProvider.metricsMetadata;\n      }\n\n      allMetrics.forEach((m) => {\n        if (this.isNativeHistogram(m.text)) {\n          // Build the collection of native histograms.\n          this.addNativeHistogram(m.text);\n        }\n      });\n    }\n  }\n\n  /**\n   * Identify native histograms by 2 strategies.\n   * 1. querying classic histograms and all metrics,\n   * then comparing the results and build the collection of native histograms.\n   * 2. querying all metrics and checking if the metric is a histogram type and dies not have the bucket suffix.\n   *\n   * classic histogram = test_metric_bucket\n   * native histogram = test_metric\n   *\n   * @param metric\n   * @returns boolean\n   */\n  public isNativeHistogram(metric: string): boolean {\n    if (!metric) {\n      return false;\n    }\n\n    // check when fully migrated, we only have metadata, and there are no more classic histograms\n    const metadata = this._metricsMetadata;\n    // suffix is not 'bucket' and type is histogram\n    const suffix: string = metric.split('_').pop() ?? '';\n    // the string is not equal to bucket\n    const notClassic = suffix !== 'bucket';\n    if (metadata?.[metric]?.type === 'histogram' && notClassic) {\n      return true;\n    }\n\n    // check for comparison when there is overlap between native and classic histograms\n    if (this._classicHistograms[`${metric}_bucket`]) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private addNativeHistogram(metric: string) {\n    if (!this._nativeHistograms.includes(metric)) {\n      this._nativeHistograms.push(metric);\n    }\n  }\n\n  /**\n   * Used for additional filtering for adhoc vars labels in Metrics Drilldown.\n   * @param options\n   * @returns\n   */\n  public async getTagKeys(options: DataSourceGetTagKeysOptions<PromQuery>): Promise<MetricFindValue[]> {\n    const ds = await this.getDatasource();\n\n    if (!ds) {\n      return [];\n    }\n\n    const keys = await ds.getTagKeys(options);\n    return keys;\n  }\n\n  /**\n   * Used for additional filtering for adhoc vars label values in Metrics Drilldown.\n   * @param options\n   * @returns\n   */\n  public async getTagValues(options: DataSourceGetTagValuesOptions<PromQuery>) {\n    const ds = await this.getDatasource();\n\n    if (!ds) {\n      return [];\n    }\n\n    options.key = unwrapQuotes(options.key);\n    const keys = await ds.getTagValues(options);\n    return keys;\n  }\n\n  /**\n   * Check if the datasource uses time range in language provider methods.\n   * @param ds\n   * @returns boolean\n   * @remarks\n   * This is a temporary hack to check if the datasource uses time range in language provider methods.\n   * It will be removed when a better way of handling recent breaking changes in `@grafana/prometheus`\n   * is provided to us in that package. For more details, see https://github.com/grafana/metrics-drilldown/issues/370.\n   */\n  public static datasourceUsesTimeRangeInLanguageProviderMethods(ds: PrometheusDatasource): boolean {\n    // This works because the `fetchLabelValues` method happens to have changed in a way that\n    // can be used as a heuristic to check if the runtime datasource uses the G12-style\n    // language provider methods introduced in https://github.com/grafana/grafana/pull/101889.\n    return ds.languageProvider.fetchLabelValues.length > 1;\n  }\n}\n\nexport function getMetricDescription(metadata?: PromMetricsMetadataItem) {\n  if (!metadata) {\n    return undefined;\n  }\n\n  const { type, help, unit } = metadata;\n\n  const lines = [\n    help, //\n    type && `**Type:** *${type}*`,\n    unit && `**Unit:** ${unit}`,\n  ];\n\n  return lines.join('\\n\\n');\n}\n\nfunction unwrapQuotes(value: string): string {\n  if (value === '' || !isWrappedInQuotes(value)) {\n    return value;\n  }\n  return value.slice(1, -1);\n}\n\nfunction isWrappedInQuotes(value: string): boolean {\n  const wrappedInQuotes = /^\".*\"$/;\n  return wrappedInQuotes.test(value);\n}\n","import { type AdHocVariableFilter } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { type LabelBreakdownSortingOption as BreakdownSortByOption } from 'Breakdown/SortByScene';\nimport { type SortingOption as MetricsReducerSortByOption } from 'WingmanDataTrail/ListControls/MetricsSorter/MetricsSorter';\n\nimport { type BreakdownLayoutType } from './Breakdown/types';\nimport { type ActionViewType } from './MetricScene';\n\n// prettier-ignore\nexport type Interactions = {\n  // User selected a label to view its breakdown.\n  label_selected: {\n    label: string;\n    cause: (\n      // By clicking the \"select\" button on that label's breakdown panel\n      | 'breakdown_panel'\n      // By clicking on the label selector at the top of the breakdown\n      | 'selector'\n    );\n    otel_resource_attribute?: boolean;\n  };\n  // User changed a label filter\n  label_filter_changed: {\n    label: string;\n    action: 'added' | 'removed' | 'changed';\n    cause: 'breakdown' | 'adhoc_filter';\n    otel_resource_attribute?: boolean;\n  };\n  // User changed the breakdown layout\n  breakdown_layout_changed: { layout: BreakdownLayoutType };\n  // A metric exploration has started due to one of the following causes\n  exploration_started: {\n    cause: (\n      // a bookmark was clicked from the home page\n      | 'bookmark_clicked'\n      // a recent exploration was clicked from the home page\n      | 'recent_clicked'\n      // \"new exploration\" was clicked from the home page\n      | 'new_clicked'\n      // the page was loaded (or reloaded) from a URL which matches one of the recent explorations\n      | 'loaded_local_recent_url'\n      // the page was loaded from a URL which did not match one of the recent explorations, and is assumed shared\n      | 'loaded_shared_url'\n      // the exploration was opened from the dashboard panel menu and is embedded in a drawer\n      | 'dashboard_panel'\n    );\n  };\n  // A user has changed a bookmark\n  bookmark_changed: {\n    action: (\n      // Toggled on or off from the bookmark icon\n      | 'toggled_on'\n      | 'toggled_off'\n      // Deleted from the homepage bookmarks list\n      | 'deleted'\n    );\n  };\n  // User changes metric explore settings\n  settings_changed: { stickyMainGraph?: boolean };\n  // User clicks on tab to change the action view\n  metric_action_view_changed: { \n    view: ActionViewType \n\n    // The number of related logs\n    related_logs_count?: number\n  };\n  // User clicks on one of the action buttons associated with a selected metric\n  selected_metric_action_clicked: {\n    action: (\n      // Opens the metric queries in Explore\n      | 'open_in_explore'\n      // Clicks on the share URL button\n      | 'share_url'\n      // Deselects the current selected metrics by clicking the \"Select new metric\" button\n      | 'unselect'\n      // When in embedded mode, clicked to open the exploration from the embedded view\n      | 'open_from_embedded'\n    );\n  };\n  // User clicks on one of the action buttons associated with related logs\n  related_logs_action_clicked: {\n    action: (\n      // Opens Logs Drilldown\n      | 'open_logs_drilldown'\n      // Logs data source changed\n      | 'logs_data_source_changed'\n    );\n  };\n  // User selects a metric\n  metric_selected: {\n    from: (\n      // By clicking \"Select\" on a metric panel when on the no-metric-selected metrics list view\n      | 'metric_list'\n      // By clicking \"Select\" on a metric panel when on the related metrics tab\n      | 'related_metrics'\n    );\n    // The number of search terms activated when the selection was made\n    searchTermCount: number | null;\n  };\n  // User opens/closes the prefix filter dropdown\n  prefix_filter_clicked: {\n    from: (\n      // By clicking \"Select\" on a metric panel when on the no-metric-selected metrics list view\n      | 'metric_list'\n      // By clicking \"Select\" on a metric panel when on the related metrics tab\n      | 'related_metrics'\n    )\n    action: (\n      // Opens the dropdown\n      | 'open'\n      // Closes the dropdown\n      | 'close'\n    )\n  };\n  // User types in the quick search bar\n  quick_search_used: {};\n  sorting_changed: {\n    // By clicking on the sort by variable in the metrics reducer\n    from: 'metrics-reducer',\n    // The sort by option selected\n    sortBy: MetricsReducerSortByOption\n  } | {\n    // By clicking on the sort by component in the label breakdown\n    from: 'label-breakdown',\n    // The sort by option selected\n    sortBy: BreakdownSortByOption\n  };\n  wasm_not_supported: {},\n  missing_otel_labels_by_truncating_job_and_instance: {\n    metric?: string;\n  },\n  deployment_environment_migrated: {},\n  otel_experience_used: {},\n  otel_experience_toggled: {\n    value: ('on'| 'off')\n  },\n  native_histogram_examples_closed: {},\n  native_histogram_example_clicked: {\n    metric: string;\n  },\n  // User toggles the Wingman sidebar\n  metrics_sidebar_toggled: {\n    action: (\n      // Opens the sidebar section\n      | 'opened'\n      // Closes the sidebar section\n      | 'closed'\n    ),\n    section?: string\n  },\n  // User clicks into the prefix filter section of the sidebar\n  sidebar_prefix_filter_section_clicked: {},\n  // User applies any prefix filter from the sidebar\n  sidebar_prefix_filter_applied: {\n    // Number of prefix filters applied (optional)\n    filter_count?: number;\n  },\n  // User clicks into the suffix filter section of the sidebar\n  sidebar_suffix_filter_section_clicked: {},\n  // User applies any suffix filter from the sidebar\n  sidebar_suffix_filter_applied: {\n    // Number of suffix filters applied (optional)\n    filter_count?: number;\n  },\n  // User selects a rules filter from the Wingman sidebar\n  sidebar_rules_filter_selected: {\n    filter_type: (\n      | 'non_rules_metrics'\n      | 'recording_rules'\n    )\n  },\n  // User applies a label filter from the sidebar\n  sidebar_group_by_label_filter_applied: {\n    // The label that was applied (optional)\n    label?: string;\n  }\n};\n\nconst PREFIX = 'grafana_explore_metrics_';\n\nexport function reportExploreMetrics<E extends keyof Interactions, P extends Interactions[E]>(event: E, payload: P) {\n  reportInteraction(`${PREFIX}${event}`, payload);\n}\n\n/** Detect the single change in filters and report the event, assuming it came from manipulating the adhoc filter */\nexport function reportChangeInLabelFilters(\n  newFilters: AdHocVariableFilter[],\n  oldFilters: AdHocVariableFilter[],\n  otel?: boolean\n) {\n  if (newFilters.length === oldFilters.length) {\n    for (const oldFilter of oldFilters) {\n      for (const newFilter of newFilters) {\n        if (oldFilter.key === newFilter.key) {\n          if (oldFilter.value !== newFilter.value) {\n            reportExploreMetrics('label_filter_changed', {\n              label: oldFilter.key,\n              action: 'changed',\n              cause: 'adhoc_filter',\n              otel_resource_attribute: otel ?? false,\n            });\n          }\n        }\n      }\n    }\n  } else if (newFilters.length < oldFilters.length) {\n    for (const oldFilter of oldFilters) {\n      let foundOldLabel = false;\n      for (const newFilter of newFilters) {\n        if (oldFilter.key === newFilter.key) {\n          foundOldLabel = true;\n          break;\n        }\n      }\n      if (!foundOldLabel) {\n        reportExploreMetrics('label_filter_changed', {\n          label: oldFilter.key,\n          action: 'removed',\n          cause: 'adhoc_filter',\n        });\n      }\n    }\n  } else {\n    for (const newFilter of newFilters) {\n      let foundNewLabel = false;\n      for (const oldFilter of oldFilters) {\n        if (oldFilter.key === newFilter.key) {\n          foundNewLabel = true;\n          break;\n        }\n      }\n      if (!foundNewLabel) {\n        reportExploreMetrics('label_filter_changed', { label: newFilter.key, action: 'added', cause: 'adhoc_filter' });\n      }\n    }\n  }\n}\n","import { type RawTimeRange, type Scope } from '@grafana/data';\nimport { getPrometheusTime, isValidLegacyName } from '@grafana/prometheus';\nimport { config, getBackendSrv } from '@grafana/runtime';\n\nimport { displayWarning } from 'WingmanDataTrail/helpers/displayStatus';\n\nimport { callSuggestionsApi } from '../utils';\nimport { type LabelResponse, type OtelResponse, type OtelTargetType } from './types';\nimport { limitOtelMatchTerms, sortResources } from './util';\n\nconst OTEL_RESOURCE_EXCLUDED_FILTERS = ['__name__']; // name is handled by metric search metrics bar\n/**\n * Function used to test for OTEL\n * When filters are added, we can also get a list of otel targets used to reduce the metric list\n * */\nconst otelTargetInfoQuery = (filters?: string) => `count(target_info{${filters ?? ''}}) by (job, instance)`;\nconst metricOtelJobInstanceQuery = (metric: string) => `count(${metric}) by (job, instance)`;\n\nexport const TARGET_INFO_FILTER = { key: '__name__', value: 'target_info', operator: '=' };\n\n/**\n * Get the total amount of job/instance for target_info or for a metric.\n *\n * If used for target_info, this is the metric preview scene with many panels and\n * the job/instance pairs will be used to filter the metric list.\n *\n * If used for a metric, this is the metric preview scene with a single panel and\n * the job/instance pairs will be used to identify otel resource attributes for the metric\n * and distinguish between resource attributes and promoted attributes.\n *\n * @param dataSourceUid\n * @param timeRange\n * @param filters\n * @returns\n */\nexport async function totalOtelResources(\n  dataSourceUid: string,\n  timeRange: RawTimeRange,\n  filters?: string,\n  metric?: string\n): Promise<OtelTargetType> {\n  const start = getPrometheusTime(timeRange.from, false);\n  const end = getPrometheusTime(timeRange.to, true);\n  // check that the metric is utf8 before doing a resource query\n  if (metric && !isValidLegacyName(metric)) {\n    metric = `{\"${metric}\"}`;\n  }\n  const query = metric ? metricOtelJobInstanceQuery(metric) : otelTargetInfoQuery(filters);\n\n  const url = `/api/datasources/uid/${dataSourceUid}/resources/api/v1/query`;\n  const paramsTotalTargets: Record<string, string | number> = {\n    start,\n    end,\n    query,\n  };\n\n  const responseTotal = await getBackendSrv()\n    .get<OtelResponse>(url, paramsTotalTargets, `metrics-drilldown-otel-check-total-${query}`)\n    .catch((error) => {\n      const { type, statusText, status } = error;\n\n      if (type !== 'cancelled') {\n        displayWarning([\n          'Error while fetching OTel resources! Defaulting to an empty array.',\n          `${statusText} (${status})`,\n        ]);\n      }\n\n      return { data: { result: [] } };\n    });\n\n  let jobs: string[] = [];\n  let instances: string[] = [];\n\n  responseTotal.data.result.forEach((result) => {\n    // NOTE: sometimes there are target_info series with\n    // - both job and instance labels\n    // - only job label\n    // - only instance label\n    // Here we make sure both of them are present\n    // because we use this collection to filter metric names\n    if (result.metric.job && result.metric.instance) {\n      jobs.push(result.metric.job);\n      instances.push(result.metric.instance);\n    }\n  });\n\n  return {\n    jobs,\n    instances,\n  };\n}\n\n/**\n * Query the DS for deployment environment label values.\n * The deployment environment can be either on target_info or promoted to metrics.\n *\n * @param dataSourceUid\n * @param timeRange\n * @param scopes\n * @returns string[], values for the deployment_environment label\n */\nexport async function getDeploymentEnvironments(\n  dataSourceUid: string,\n  timeRange: RawTimeRange,\n  scopes: Scope[]\n): Promise<string[]> {\n  if (!config.featureToggles.enableScopesInMetricsExplore) {\n    return getDeploymentEnvironmentsWithoutScopes(dataSourceUid, timeRange);\n  }\n\n  return getDeploymentEnvironmentsWithScopes(dataSourceUid, timeRange, scopes);\n}\n\n/**\n * Query the DS for deployment environment label values.\n *\n * @param dataSourceUid\n * @param timeRange\n * @returns string[], values for the deployment_environment label\n */\nexport async function getDeploymentEnvironmentsWithoutScopes(\n  dataSourceUid: string,\n  timeRange: RawTimeRange\n): Promise<string[]> {\n  const start = getPrometheusTime(timeRange.from, false);\n  const end = getPrometheusTime(timeRange.to, true);\n\n  const url = `/api/datasources/uid/${dataSourceUid}/resources/api/v1/label/deployment_environment/values`;\n  const params: Record<string, string | number> = {\n    start,\n    end,\n    // we are ok if deployment_environment has been promoted to metrics so we don't need the match\n    // 'match[]': '{__name__=\"target_info\"}',\n  };\n\n  const response = await getBackendSrv().get<LabelResponse>(\n    url,\n    params,\n    'metrics-drilldown-otel-resources-deployment-env'\n  );\n\n  // exclude __name__ or previously chosen filters\n  return response.data;\n}\n\n/**\n * Query the DS for deployment environment label values.\n *\n * @param dataSourceUid\n * @param timeRange\n * @param scopes\n * @returns string[], values for the deployment_environment label\n */\nexport async function getDeploymentEnvironmentsWithScopes(\n  dataSourceUid: string,\n  timeRange: RawTimeRange,\n  scopes: Scope[]\n): Promise<string[]> {\n  const response = await callSuggestionsApi(\n    dataSourceUid,\n    timeRange,\n    scopes,\n    [\n      // we are ok if deployment_environment has been promoted to metrics so we don't need the match\n      // 'match[]': '{__name__=\"target_info\"}',\n      // {\n      //   key: '__name__',\n      //   operator: '=',\n      //   value: 'target_info',\n      // },\n    ],\n    'deployment_environment',\n    undefined,\n    'metrics-drilldown-otel-resources-deployment-env'\n  );\n  // exclude __name__ or previously chosen filters\n  return response.data.data;\n}\n\n/**\n * For OTel, get the resource attributes for a metric.\n * Handle filtering on both OTel resources as well as metric labels.\n *\n * 1. Does not include resources promoted to metrics\n * 2. Does not include __name__ or previously chosen filters\n * 3. Sorts the resources, surfacing the blessedlist on top\n * 4. Identifies if missing targets if the job/instance list is too long for the label values endpoint request\n *\n * @param datasourceUid\n * @param timeRange\n * @param metric\n * @param excludedFilters\n * @returns attributes: string[], missingOtelTargets: boolean\n */\nexport async function getFilteredResourceAttributes(\n  datasourceUid: string,\n  timeRange: RawTimeRange,\n  metric: string,\n  excludedFilters?: string[]\n) {\n  // These filters should not be included in the resource attributes for users to choose from\n  const allExcludedFilters = (excludedFilters ?? []).concat(OTEL_RESOURCE_EXCLUDED_FILTERS);\n\n  // The jobs and instances for the metric\n  const metricResources = await totalOtelResources(datasourceUid, timeRange, undefined, metric);\n\n  // OTel metrics require unique identifies for the resource. Job+instance is the unique identifier.\n  // If there are none, we cannot join on a target_info resource\n  if (metricResources.jobs.length === 0 || metricResources.instances.length === 0) {\n    return { attributes: [], missingOtelTargets: false };\n  }\n\n  // The URL for the labels endpoint\n  const url = `/api/datasources/uid/${datasourceUid}/resources/api/v1/labels`;\n\n  // The match param for the metric to get all possible labels for this metric\n  const metricMatchTerms = limitOtelMatchTerms([], metricResources.jobs, metricResources.instances);\n\n  let metricMatchParam = '';\n  // check metric is utf8 to give corrrect syntax\n  if (!isValidLegacyName(metric)) {\n    metricMatchParam = `{'${metric}',${metricMatchTerms.jobsRegex},${metricMatchTerms.instancesRegex}}`;\n  } else {\n    metricMatchParam = `${metric}{${metricMatchTerms.jobsRegex},${metricMatchTerms.instancesRegex}}`;\n  }\n\n  const start = getPrometheusTime(timeRange.from, false);\n  const end = getPrometheusTime(timeRange.to, true);\n\n  const metricParams: Record<string, string | number> = {\n    start,\n    end,\n    'match[]': metricMatchParam,\n  };\n\n  // We prioritize metric attributes over resource attributes.\n  // If a label is present in both metric and target_info, we exclude it from the resource attributes.\n  // This prevents errors in the join query.\n  const metricResponse = await getBackendSrv().get<LabelResponse>(\n    url,\n    metricParams,\n    `metrics-drilldown-otel-resources-metric-job-instance-${metricMatchParam}`\n  );\n  // the metric labels here\n  const metricLabels = metricResponse.data ?? [];\n\n  // only get the resource attributes filtered by job and instance values present on the metric\n  let targetInfoMatchParam = `target_info{${metricMatchTerms.jobsRegex},${metricMatchTerms.instancesRegex}}`;\n\n  const targetInfoParams: Record<string, string | number> = {\n    start,\n    end,\n    'match[]': targetInfoMatchParam,\n  };\n\n  // these are the resource attributes that come from target_info,\n  // filtered by the metric job and instance\n  const targetInfoResponse = await getBackendSrv().get<LabelResponse>(\n    url,\n    targetInfoParams,\n    `metrics-drilldown-otel-resources-metric-job-instance-${targetInfoMatchParam}`\n  );\n\n  const targetInfoAttributes = targetInfoResponse.data ?? [];\n\n  // first filters out metric labels from the resource attributes\n  const firstFilter = targetInfoAttributes.filter((resource) => !metricLabels.includes(resource));\n\n  // exclude __name__ or previously chosen filters\n  const secondFilter = firstFilter\n    .filter((resource) => !allExcludedFilters.includes(resource))\n    .map((el) => ({ text: el }));\n\n  // sort the resources, surfacing the blessedlist on top\n  let sortedResourceAttributes = sortResources(secondFilter, ['job']);\n  // return a string array\n  const resourceAttributes = sortedResourceAttributes.map((el) => el.text);\n\n  return { attributes: resourceAttributes, missingOtelTargets: metricMatchTerms.missingOtelTargets };\n}\n\n/**\n * This function gets otel resources that only exist in target_info and\n * do not exist on metrics as promoted labels.\n *\n * This is used when selecting a label from the list that includes both otel resources and metric labels.\n * This list helps identify that a selected lbel/resource must be stored in VAR_OTEL_RESOURCES or VAR_FILTERS to be interpolated correctly in the queries.\n */\nexport async function getNonPromotedOtelResources(datasourceUid: string, timeRange: RawTimeRange) {\n  const start = getPrometheusTime(timeRange.from, false);\n  const end = getPrometheusTime(timeRange.to, true);\n  // The URL for the labels endpoint\n  const url = `/api/datasources/uid/${datasourceUid}/resources/api/v1/labels`;\n  // GET TARGET_INFO LABELS\n  const targetInfoParams: Record<string, string | number> = {\n    start,\n    end,\n    'match[]': `{__name__=\"target_info\"}`,\n  };\n\n  // these are the resource attributes that come from target_info,\n  // filtered by the metric job and instance\n  const targetInfoResponse = getBackendSrv().get<LabelResponse>(\n    url,\n    targetInfoParams,\n    `metrics-drilldown-all-otel-resources-on-target_info`\n  );\n\n  // all labels in all metrics\n  const metricParams: Record<string, string | number> = {\n    start,\n    end,\n    'match[]': `{name!=\"\",__name__!~\"target_info\"}`,\n  };\n\n  // Get the metric labels but exclude any labels found on target_info.\n  // We prioritize metric attributes over resource attributes.\n  // If a label is present in both metric and target_info, we exclude it from the resource attributes.\n  // This prevents errors in the join query.\n  const metricResponse = await getBackendSrv().get<LabelResponse>(\n    url,\n    metricParams,\n    `metrics-drilldown-all-metric-labels-not-otel-resource-attributes`\n  );\n  const promResponses = await Promise.all([targetInfoResponse, metricResponse]);\n  // otel resource attributes\n  const targetInfoLabels = promResponses[0].data ?? [];\n  // the metric labels here\n  const metricLabels = new Set(promResponses[1].data ?? []);\n\n  // get all the resource attributes that are not present on metrics (have been promoted to metrics)\n  const nonPromotedResources = targetInfoLabels.filter((item) => !metricLabels.has(item));\n\n  return nonPromotedResources;\n}\n","import { VariableHide, type AdHocVariableFilter, type MetricFindValue, type RawTimeRange } from '@grafana/data';\nimport { isValidLegacyName } from '@grafana/prometheus';\nimport { config } from '@grafana/runtime';\nimport { sceneGraph, type AdHocFiltersVariable, type SceneObject } from '@grafana/scenes';\n\nimport { type DataTrail } from '../DataTrail';\nimport { reportChangeInLabelFilters } from '../interactions';\nimport { getFilteredResourceAttributes } from './api';\nimport { type OtelResourcesObject } from './types';\nimport {\n  VAR_DATASOURCE_EXPR,\n  VAR_FILTERS,\n  VAR_MISSING_OTEL_TARGETS,\n  VAR_OTEL_AND_METRIC_FILTERS,\n  VAR_OTEL_GROUP_LEFT,\n  VAR_OTEL_JOIN_QUERY,\n  VAR_OTEL_RESOURCES,\n} from '../shared';\nimport { isAdHocFiltersVariable, isConstantVariable } from '../utils/utils.variables';\n\nexport const blessedList = (): Record<string, number> => {\n  return {\n    cloud_availability_zone: 0,\n    cloud_region: 0,\n    container_name: 0,\n    k8s_cluster_name: 0,\n    k8s_container_name: 0,\n    k8s_cronjob_name: 0,\n    k8s_daemonset_name: 0,\n    k8s_deployment_name: 0,\n    k8s_job_name: 0,\n    k8s_namespace_name: 0,\n    k8s_pod_name: 0,\n    k8s_replicaset_name: 0,\n    k8s_statefulset_name: 0,\n    service_instance_id: 0,\n    service_name: 0,\n    service_namespace: 0,\n  };\n};\n\nexport function sortResources(resources: MetricFindValue[], excluded: string[]) {\n  // these may be filtered\n  const promotedList = blessedList();\n\n  const blessed = Object.keys(promotedList);\n\n  resources = resources.filter((resource) => {\n    // if not in the list keep it\n    const val = (resource.value ?? '').toString();\n\n    if (!blessed.includes(val)) {\n      return true;\n    }\n    // remove blessed filters\n    // but indicate which are available\n    promotedList[val] = 1;\n    return false;\n  });\n\n  const promotedResources = Object.keys(promotedList)\n    .filter((resource) => promotedList[resource] && !excluded.includes(resource))\n    .map((v) => ({ text: v }));\n\n  // put the filters first\n  return promotedResources.concat(resources);\n}\n\n/**\n * Return a collection of labels and labels filters.\n * This data is used to build the join query to filter with otel resources\n *\n * @param otelResourcesObject\n * @returns a string that is used to add a join query to filter otel resources\n */\nexport function getOtelJoinQuery(otelResourcesObject: OtelResourcesObject, scene?: SceneObject): string {\n  // the group left is for when a user wants to breakdown by a resource attribute\n  let groupLeft = '';\n\n  if (scene) {\n    const value = sceneGraph.lookupVariable(VAR_OTEL_GROUP_LEFT, scene)?.getValue();\n    groupLeft = typeof value === 'string' ? value : '';\n  }\n\n  let otelResourcesJoinQuery = '';\n  // add support for otel data sources that are not standardized, i.e., have non unique target_info series by job, instance\n  // target_info does not have to be filtered by deployment environment\n  otelResourcesJoinQuery = `* on (job, instance) group_left(${groupLeft}) topk by (job, instance) (1, target_info{${otelResourcesObject.filters}})`;\n\n  return otelResourcesJoinQuery;\n}\n\n/**\n * Returns an object containing all the filters for otel resources as well as a list of labels\n *\n * @param scene\n * @param firstQueryVal\n * @returns\n */\nexport function getOtelResourcesObject(scene: SceneObject, firstQueryVal?: string): OtelResourcesObject {\n  const otelResources = sceneGraph.lookupVariable(VAR_OTEL_RESOURCES, scene);\n  let otelResourcesObject = { labels: '', filters: '' };\n\n  if (isAdHocFiltersVariable(otelResources)) {\n    // get the collection of adhoc filters\n    const otelFilters = otelResources.state.filters;\n\n    let allFilters = '';\n    let allLabels = '';\n\n    // add the other OTEL resource filters\n    for (let i = 0; i < otelFilters?.length; i++) {\n      let labelName = otelFilters[i].key;\n\n      // when adding an otel resource filter with utfb\n      if (!isValidLegacyName(labelName)) {\n        labelName = `'${labelName}'`;\n      }\n\n      const op = otelFilters[i].operator;\n      const labelValue = otelFilters[i].value;\n\n      if (i > 0) {\n        allFilters += ',';\n      }\n\n      if (config.featureToggles.prometheusSpecialCharsInLabelValues) {\n        allFilters += `${labelName}${op}'${labelValue}'`;\n      } else {\n        allFilters += `${labelName}${op}\"${labelValue}\"`;\n      }\n\n      const addLabelToGroupLeft = labelName !== 'job' && labelName !== 'instance';\n\n      if (addLabelToGroupLeft) {\n        allLabels += `${labelName}`;\n      }\n    }\n\n    otelResourcesObject.labels = allLabels;\n    otelResourcesObject.filters = allFilters;\n\n    return otelResourcesObject;\n  }\n  return otelResourcesObject;\n}\n\n/**\n * This function checks that when adding OTel job and instance filters\n * to the label values request for a list of metrics,\n * the total character count of the request does not exceed 2000 characters\n *\n * @param matchTerms __name__ and other Prom filters\n * @param jobsList list of jobs in target_info\n * @param instancesList list of instances in target_info\n * @returns\n */\nexport function limitOtelMatchTerms(\n  matchTerms: string[],\n  jobsList: string[],\n  instancesList: string[]\n): { missingOtelTargets: boolean; jobsRegex: string; instancesRegex: string } {\n  let missingOtelTargets = false;\n  const charLimit = 2000;\n\n  let initialCharAmount = matchTerms.join(',').length;\n\n  // start to add values to the regex and start quote\n  let jobsRegex = `job=~'`;\n  let instancesRegex = `instance=~'`;\n\n  // iterate through the jobs and instances,\n  // count the chars as they are added,\n  // stop before the total count reaches 2000\n  // show a warning that there are missing OTel targets and\n  // the user must select more OTel resource attributes\n  const jobCheck: { [key: string]: boolean } = {};\n  const instanceCheck: { [key: string]: boolean } = {};\n  for (let i = 0; i < jobsList.length; i++) {\n    // use or character for the count\n    const orChars = i === 0 ? 0 : 2;\n    // count all the characters that will go into the match terms\n    const checkCharAmount =\n      initialCharAmount +\n      jobsRegex.length +\n      jobsList[i].length +\n      instancesRegex.length +\n      instancesList[i].length +\n      orChars;\n\n    if (checkCharAmount <= charLimit) {\n      if (i === 0) {\n        jobsRegex += `${jobsList[i]}`;\n        instancesRegex += `${instancesList[i]}`;\n      } else {\n        // check to make sure we aren't duplicating job or instance\n        jobsRegex += jobCheck[jobsList[i]] ? '' : `|${jobsList[i]}`;\n        instancesRegex += instanceCheck[instancesList[i]] ? '' : `|${instancesList[i]}`;\n      }\n      jobCheck[jobsList[i]] = true;\n      instanceCheck[instancesList[i]] = true;\n    } else {\n      missingOtelTargets = true;\n      break;\n    }\n  }\n  // complete the quote after values have been added\n  jobsRegex += `'`;\n  instancesRegex += `'`;\n\n  return {\n    missingOtelTargets,\n    jobsRegex,\n    instancesRegex,\n  };\n}\n\n/**\n * This updates the OTel join query variable that is interpolated into all queries.\n * When a user is in the breakdown tab, they may want to breakdown a metric by a resource attribute.\n * The only way to do this is by enriching the metric with the target_info resource.\n * This is done by joining on a unique identifier for the resource, job and instance.\n * The we can get the resource attributes for the metric, enrich the metric with the join query and\n * show panels by aggregate functions over attributes.\n * E.g. sum(metric * on (job, instance) group_left(cloud_region) topk by (job, instance) (1, target_info{})) by cloud_region\n * where cloud_region is a resource attribute but not on the metric.\n * BUT if the attribute is on the metric already, we shouldn't add it to the group left.\n *\n * @param trail\n * @param metric\n * @returns\n */\nexport async function updateOtelJoinWithGroupLeft(trail: DataTrail, metric: string) {\n  // When to remove or add the group left\n  // REMOVE\n  // - selecting a new metric and returning to metric select scene\n  // ADD\n  // - the metric is selected from previews\n  // - the metric is loaded from refresh in metric scene\n  // - the metric is loaded from bookmark\n  const timeRange = trail.state.$timeRange?.state;\n  if (!timeRange) {\n    return;\n  }\n  const otelGroupLeft = sceneGraph.lookupVariable(VAR_OTEL_GROUP_LEFT, trail);\n  const otelJoinQueryVariable = sceneGraph.lookupVariable(VAR_OTEL_JOIN_QUERY, trail);\n  const missingOtelTargetsVariable = sceneGraph.lookupVariable(VAR_MISSING_OTEL_TARGETS, trail);\n  if (\n    !isConstantVariable(otelGroupLeft) ||\n    !isConstantVariable(otelJoinQueryVariable) ||\n    !isConstantVariable(missingOtelTargetsVariable)\n  ) {\n    return;\n  }\n  // Remove the group left\n  // if the metric is target_info, it already has all resource attributes\n  if (!metric || metric === 'target_info') {\n    // if the metric is not present, that means we are in the metric select scene\n    // and that should have no group left because it may interfere with queries.\n    otelGroupLeft.setState({ value: '' });\n    const resourceObject = getOtelResourcesObject(trail);\n    const otelJoinQuery = getOtelJoinQuery(resourceObject, trail);\n    otelJoinQueryVariable.setState({ value: otelJoinQuery });\n    return;\n  }\n\n  // Add the group left\n  const otelResourcesVariable = sceneGraph.lookupVariable(VAR_OTEL_RESOURCES, trail);\n  const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, trail);\n  let excludeFilterKeys: string[] = [];\n  if (isAdHocFiltersVariable(filtersVariable) && isAdHocFiltersVariable(otelResourcesVariable)) {\n    // do not include the following\n    // 1. pre selected label filters\n    // 2. pre selected otel resource attribute filters\n    // 3. job and instance labels (will break the join)\n    const filterKeys = filtersVariable.state.filters.map((f) => f.key);\n    const otelKeys = otelResourcesVariable.state.filters.map((f) => f.key);\n    excludeFilterKeys = filterKeys.concat(otelKeys);\n    excludeFilterKeys = excludeFilterKeys.concat(['job', 'instance']);\n  }\n  const datasourceUid = sceneGraph.interpolate(trail, VAR_DATASOURCE_EXPR);\n  const { attributes, missingOtelTargets } = await getFilteredResourceAttributes(\n    datasourceUid,\n    timeRange,\n    metric,\n    excludeFilterKeys\n  );\n  // here we start to add the attributes to the group left\n  if (attributes.length > 0) {\n    // loop through attributes to check for utf8\n    const utf8Attributes = attributes.map((a) => {\n      if (!isValidLegacyName(a)) {\n        return `'${a}'`;\n      }\n      return a;\n    });\n    // update the group left variable that contains all the filtered resource attributes\n    otelGroupLeft.setState({ value: utf8Attributes.join(',') });\n    // get the new otel join query that includes the group left attributes\n    const resourceObject = getOtelResourcesObject(trail);\n    const otelJoinQuery = getOtelJoinQuery(resourceObject, trail);\n    // update the join query that is interpolated in all queries\n    otelJoinQueryVariable.setState({ value: otelJoinQuery });\n  }\n  // used to show a warning in label breakdown that the user must select more OTel resource attributes\n  missingOtelTargetsVariable.setState({ value: missingOtelTargets });\n}\n\n/**\n * Returns the environment that is like 'prod'.\n * If there are no options, returns null.\n *\n * @param options\n * @returns\n */\nexport function getProdOrDefaultEnv(envs: string[]): string | null {\n  if (envs.length === 0) {\n    return null;\n  }\n\n  return envs.find((env) => env.toLowerCase().indexOf('prod') > -1) ?? envs[0];\n}\n\n/**\n * Sets up OTel filter variables during initialization or reset.\n * Handles deployment environment setup, URL parameters, and variable state management.\n */\nexport function setupOtelFilterVariables(\n  trail: DataTrail,\n  deploymentEnvironments: string[] = [],\n  nonPromotedOtelResources: string[] = [],\n  initialOtelCheckComplete: boolean,\n  resettingOtel: boolean\n): OtelResourcesObject | undefined {\n  const otelResourcesVariable = sceneGraph.lookupVariable(VAR_OTEL_RESOURCES, trail);\n  const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, trail);\n  const otelAndMetricsFiltersVariable = sceneGraph.lookupVariable(VAR_OTEL_AND_METRIC_FILTERS, trail);\n  const otelJoinQueryVariable = sceneGraph.lookupVariable(VAR_OTEL_JOIN_QUERY, trail);\n\n  if (\n    !(\n      isAdHocFiltersVariable(otelResourcesVariable) &&\n      isAdHocFiltersVariable(filtersVariable) &&\n      isAdHocFiltersVariable(otelAndMetricsFiltersVariable) &&\n      isConstantVariable(otelJoinQueryVariable)\n    )\n  ) {\n    return undefined;\n  }\n\n  // Set deployment environment variable as a new otel & metric filter.\n  // We choose one default value at the beginning of the OTel experience.\n  // This is because the work flow for OTel begins with users selecting a deployment environment\n  // default to production.\n  let defaultDepEnv = getProdOrDefaultEnv(deploymentEnvironments) ?? '';\n\n  // 1. Cases of how to add filters to the otelmetricsvar\n  //  -- when we set these on instantiation, we need to check that we are not double setting them\n  // 1.0. legacy, check url values for dep env and otel resources and migrate to otelmetricvar\n  //  -- do not duplicate\n  // 1.1. NONE If the otel metrics var has no filters, set the default value\n  // 1.2. VAR_FILTERS If the var filters has filters, add to otemetricsvar\n  //  -- do not duplicate when adding to otelmtricsvar\n  // 1.3. OTEL_FILTERS If the otel resources var has filters, add to otelmetricsvar\n  //  -- do not duplicate when adding to otelmtricsvar\n\n  // 1. switching data source\n  // the previous var filters are not reset so even if they don't apply to the new data source we want to keep them\n  // 2. on load with url values, check isInitial CheckComplete\n  // Set otelmetrics var, distinguish if these are var filters or otel resources, then place in correct filter\n  let prevVarFilters = resettingOtel ? filtersVariable.state.filters : [];\n  // only look at url values for otelmetricsvar if the initial check is NOT YET complete\n  const urlOtelAndMetricsFilters =\n    initialOtelCheckComplete && !resettingOtel ? [] : otelAndMetricsFiltersVariable.state.filters;\n  // url vars should override the deployment environment variable\n  const urlVarsObject = checkLabelPromotion(urlOtelAndMetricsFilters, nonPromotedOtelResources);\n  const urlOtelResources = initialOtelCheckComplete ? [] : urlVarsObject.nonPromoted;\n  const urlVarFilters = initialOtelCheckComplete ? [] : urlVarsObject.promoted;\n\n  // set the vars if the following conditions\n  if (!initialOtelCheckComplete || resettingOtel) {\n    // if the default dep env value like 'prod' is missing OR\n    // if we are loading from the url and the default dep env is missing\n    // there are no prev deployment environments from url\n    const hasPreviousDepEnv = urlOtelAndMetricsFilters.filter((f) => f.key === 'deployment_environment').length > 0;\n    const doNotSetDepEvValue = defaultDepEnv === '' || hasPreviousDepEnv;\n    // we do not have to set the dep env value if the default is missing\n    const defaultDepEnvFilter = doNotSetDepEvValue\n      ? []\n      : [\n          {\n            key: 'deployment_environment',\n            value: defaultDepEnv,\n            operator: defaultDepEnv.includes(',') ? '=~' : '=',\n          },\n        ];\n\n    const notPromoted = nonPromotedOtelResources?.includes('deployment_environment');\n    // Next, the previous data source filters may include the default dep env but in the wrong filter\n    // i.e., dep env is not promoted to metrics but in the previous DS, it was, so it will exist in the VAR FILTERS\n    // and we will see a duplication in the OTELMETRICSVAR\n    // remove the duplication\n    prevVarFilters = notPromoted ? prevVarFilters.filter((f) => f.key !== 'deployment_environment') : prevVarFilters;\n\n    // previous var filters are handled but what about previous otel resources filters?\n    // need to add the prev otel resources to the otelmetricsvar filters\n    otelAndMetricsFiltersVariable?.setState({\n      filters: [...defaultDepEnvFilter, ...prevVarFilters, ...urlOtelAndMetricsFilters],\n      hide: VariableHide.hideLabel,\n    });\n\n    // update the otel resources if the dep env has not been promoted\n    const otelDepEnvFilters = notPromoted ? defaultDepEnvFilter : [];\n    const otelFilters = [...otelDepEnvFilters, ...urlOtelResources];\n    otelResourcesVariable.setState({\n      filters: otelFilters,\n      hide: VariableHide.hideVariable,\n    });\n\n    const isPromoted = !notPromoted;\n    // if the dep env IS PROMOTED\n    // we need to ask, does var filters already contain it?\n    // keep previous filters if they are there\n    // add the dep env to var filters if not present and isPromoted\n    const depEnvFromVarFilters = prevVarFilters.filter((f) => f.key === 'deployment_environment');\n\n    // if promoted and no dep env has been chosen yet, set the default\n    if (isPromoted && depEnvFromVarFilters.length === 0) {\n      prevVarFilters = [...prevVarFilters, ...defaultDepEnvFilter];\n    }\n\n    prevVarFilters = [...prevVarFilters, ...urlVarFilters];\n\n    filtersVariable.setState({\n      filters: prevVarFilters,\n      hide: VariableHide.hideVariable,\n    });\n  }\n\n  // 1. Get the otel join query for state and variable\n  // Because we need to define the deployment environment variable\n  // we also need to update the otel join query state and variable\n  const resourcesObject: OtelResourcesObject = getOtelResourcesObject(trail);\n  // THIS ASSUMES THAT WE ALWAYS HAVE DEPLOYMENT ENVIRONMENT!\n  // FIX THIS SO THAT WE HAVE SOME QUERY EVEN IF THERE ARE NO OTEL FILTERS\n  const otelJoinQuery = getOtelJoinQuery(resourcesObject);\n\n  // update the otel join query variable too\n  otelJoinQueryVariable.setState({ value: otelJoinQuery });\n\n  return resourcesObject;\n}\n\n/**\n *  This function is used to update state and otel variables.\n *\n *  1. Set the otelResources adhoc tagKey and tagValues filter functions\n *  2. Get the otel join query for state and variable\n *  3. Update state with the following\n *    - otel join query\n *    - otelTargets used to filter metrics\n *  For initialization we also update the following\n *    - has otel resources flag\n *    - isStandardOtel flag (for enabliing the otel experience toggle)\n *    - and useOtelExperience\n *\n * This function is called on start and when variables change.\n * On start will provide the deploymentEnvironments and hasOtelResources parameters.\n * In the variable change case, we will not provide these parameters. It is assumed that the\n * data source has been checked for otel resources and standardization and the otel variables are enabled at this point.\n * @param datasourceUid\n * @param timeRange\n * @param deploymentEnvironments\n * @param hasOtelResources\n * @param nonPromotedOtelResources\n * @param fromDataSourceChanged\n */\nexport async function updateOtelData(\n  trail: DataTrail,\n  datasourceUid: string,\n  timeRange: RawTimeRange,\n  deploymentEnvironments?: string[],\n  hasOtelResources?: boolean,\n  nonPromotedOtelResources?: string[]\n) {\n  const initialOtelCheckComplete = trail.state.initialOtelCheckComplete;\n  const resettingOtel = trail.state.resettingOtel;\n\n  // Setup filter variables and get resources object and join query\n  const result = setupOtelFilterVariables(\n    trail,\n    deploymentEnvironments,\n    nonPromotedOtelResources,\n    initialOtelCheckComplete ?? false,\n    resettingOtel ?? false\n  );\n\n  if (!result) {\n    return;\n  }\n\n  // 2. Update state with the following\n  // - otel join query\n  // - has otel resources flag\n  // - and default to useOtelExperience\n\n  // we pass in deploymentEnvironments and hasOtelResources on start\n  // RETHINK We may be able to get rid of this check\n  // a non standard data source is more missing job and instance matchers\n  if (hasOtelResources && deploymentEnvironments && !initialOtelCheckComplete) {\n    trail.setState({\n      hasOtelResources,\n      // Previously checking standardization for having deployment environments\n      // Now we check that there are target_info labels that are not promoted\n      isStandardOtel: (nonPromotedOtelResources ?? []).length > 0,\n      useOtelExperience: true,\n      nonPromotedOtelResources,\n      initialOtelCheckComplete: true,\n      resettingOtel: false,\n      afterFirstOtelCheck: true,\n    });\n  } else {\n    // we are updating on variable changes\n    trail.setState({\n      resettingOtel: false,\n      nonPromotedOtelResources,\n      afterFirstOtelCheck: true,\n    });\n  }\n}\n\nfunction checkLabelPromotion(filters: AdHocVariableFilter[], nonPromotedOtelResources: string[] = []) {\n  const nonPromotedResources = new Set(nonPromotedOtelResources);\n  const nonPromoted = filters.filter((f) => nonPromotedResources.has(f.key));\n  const promoted = filters.filter((f) => !nonPromotedResources.has(f.key));\n\n  return {\n    nonPromoted,\n    promoted,\n  };\n}\n\n/**\n * When a new filter is chosen from the consolidated filters, VAR_OTEL_AND_METRIC_FILTERS,\n * we need to identify the following:\n *\n * 1. Is the filter a non-promoted otel resource or a metric filter?\n * 2. Is the filter being added or removed?\n *\n * Once we know this, we can add the selected filter to either the\n * VAR_OTEL_RESOURCES or VAR_FILTERS variable.\n *\n * When the correct variable is updated, the rest of the Metrics Drilldown behavior will remain the same.\n *\n * @param newStateFilters\n * @param prevStateFilters\n * @param nonPromotedOtelResources\n * @param otelFiltersVariable\n * @param filtersVariable\n */\nexport function manageOtelAndMetricFilters(\n  newStateFilters: AdHocVariableFilter[],\n  prevStateFilters: AdHocVariableFilter[],\n  nonPromotedOtelResources: string[],\n  otelFiltersVariable: AdHocFiltersVariable,\n  filtersVariable: AdHocFiltersVariable\n) {\n  // add filter\n  if (newStateFilters.length > prevStateFilters.length) {\n    const newFilter = newStateFilters[newStateFilters.length - 1];\n    // check that the filter is a non-promoted otel resource\n    if (nonPromotedOtelResources?.includes(newFilter.key)) {\n      // add to otel filters\n      otelFiltersVariable.setState({\n        filters: [...otelFiltersVariable.state.filters, newFilter],\n      });\n      reportChangeInLabelFilters(newStateFilters, prevStateFilters, true);\n    } else {\n      // add to metric filters\n      filtersVariable.setState({\n        filters: [...filtersVariable.state.filters, newFilter],\n      });\n    }\n    return;\n  }\n  // remove filter\n  if (newStateFilters.length < prevStateFilters.length) {\n    // get the removed filter\n    const removedFilter = prevStateFilters.filter((f) => !newStateFilters.includes(f))[0];\n    if (nonPromotedOtelResources?.includes(removedFilter.key)) {\n      // remove from otel filters\n      otelFiltersVariable.setState({\n        filters: otelFiltersVariable.state.filters.filter((f) => f.key !== removedFilter.key),\n      });\n      reportChangeInLabelFilters(newStateFilters, prevStateFilters, true);\n    } else {\n      // remove from metric filters\n      filtersVariable.setState({\n        filters: filtersVariable.state.filters.filter((f) => f.key !== removedFilter.key),\n      });\n    }\n    return;\n  }\n  // a filter has been changed\n  let updatedFilter: AdHocVariableFilter[] = [];\n  if (\n    newStateFilters.length === prevStateFilters.length &&\n    newStateFilters.some((filter, i) => {\n      const newKey = filter.key;\n      const newValue = filter.value;\n      const isUpdatedFilter = prevStateFilters[i].key === newKey && prevStateFilters[i].value !== newValue;\n      if (isUpdatedFilter) {\n        updatedFilter.push(filter);\n      }\n      return isUpdatedFilter;\n    })\n  ) {\n    // check if the filter is a non-promoted otel resource\n    if (nonPromotedOtelResources?.includes(updatedFilter[0].key)) {\n      // add to otel filters\n      otelFiltersVariable.setState({\n        // replace the updated filter\n        filters: otelFiltersVariable.state.filters.map((f) => {\n          if (f.key === updatedFilter[0].key) {\n            return updatedFilter[0];\n          }\n          return f;\n        }),\n      });\n      reportChangeInLabelFilters(newStateFilters, prevStateFilters, true);\n    } else {\n      // add to metric filters\n      filtersVariable.setState({\n        // replace the updated filter\n        filters: filtersVariable.state.filters.map((f) => {\n          if (f.key === updatedFilter[0].key) {\n            return updatedFilter[0];\n          }\n          return f;\n        }),\n      });\n    }\n  }\n}\n","import { type DataFrame } from '@grafana/data';\n\nexport function getLabelValueFromDataFrame(frame: DataFrame) {\n  const labels = frame.fields[1]?.labels;\n\n  if (!labels) {\n    return null;\n  }\n\n  const keys = Object.keys(labels);\n  if (keys.length === 0) {\n    return null;\n  }\n\n  return labels[keys[0]];\n}\n","import { OutlierDetector, type OutlierOutput } from '@bsull/augurs/outlier';\nimport {\n  doStandardCalcs,\n  fieldReducers,\n  FieldType,\n  outerJoinDataFrames,\n  ReducerID,\n  type DataFrame,\n} from '@grafana/data';\nimport { memoize } from 'lodash';\n\nimport { reportExploreMetrics } from '../interactions';\nimport { getLabelValueFromDataFrame } from './levels';\n\nexport const sortSeries = memoize(\n  (series: DataFrame[], sortBy: string, direction = 'asc') => {\n    if (sortBy === 'alphabetical') {\n      return sortSeriesByName(series, 'asc');\n    }\n\n    if (sortBy === 'alphabetical-reversed') {\n      return sortSeriesByName(series, 'desc');\n    }\n\n    if (sortBy === 'outliers') {\n      initOutlierDetector(series);\n    }\n\n    const reducer = (dataFrame: DataFrame) => {\n      try {\n        if (sortBy === 'outliers') {\n          return calculateOutlierValue(series, dataFrame);\n        }\n      } catch (e) {\n        console.error(e);\n        // ML sorting panicked, fallback to stdDev\n        sortBy = ReducerID.stdDev;\n      }\n      const fieldReducer = fieldReducers.get(sortBy);\n      const value =\n        fieldReducer.reduce?.(dataFrame.fields[1], true, true) ?? doStandardCalcs(dataFrame.fields[1], true, true);\n      return value[sortBy] ?? 0;\n    };\n\n    const seriesCalcs = series.map((dataFrame) => ({\n      value: reducer(dataFrame),\n      dataFrame: dataFrame,\n    }));\n\n    seriesCalcs.sort((a, b) => {\n      if (a.value !== undefined && b.value !== undefined) {\n        return b.value - a.value;\n      }\n      return 0;\n    });\n\n    if (direction === 'asc') {\n      seriesCalcs.reverse();\n    }\n\n    return seriesCalcs.map(({ dataFrame }) => dataFrame);\n  },\n  (series: DataFrame[], sortBy: string, direction = 'asc') => {\n    const firstTimestamp = series.length > 0 ? series[0].fields[0].values[0] : 0;\n    const lastTimestamp =\n      series.length > 0\n        ? series[series.length - 1].fields[0].values[series[series.length - 1].fields[0].values.length - 1]\n        : 0;\n    const firstValue = series.length > 0 ? getLabelValueFromDataFrame(series[0]) : '';\n    const lastValue = series.length > 0 ? getLabelValueFromDataFrame(series[series.length - 1]) : '';\n    const key = `${firstValue}_${lastValue}_${firstTimestamp}_${lastTimestamp}_${series.length}_${sortBy}_${direction}`;\n    return key;\n  }\n);\n\nconst initOutlierDetector = (series: DataFrame[]) => {\n  if (!wasmSupported()) {\n    return;\n  }\n\n  // Combine all frames into one by joining on time.\n  const joined = outerJoinDataFrames({ frames: series });\n  if (!joined) {\n    return;\n  }\n\n  // Get number fields: these are our series.\n  const joinedSeries = joined.fields.filter((f) => f.type === FieldType.number);\n  const points = joinedSeries.map((series) => new Float64Array(series.values));\n\n  try {\n    const detector = OutlierDetector.dbscan({ sensitivity: 0.4 }).preprocess(points);\n    outliers = detector.detect();\n  } catch (e) {\n    console.error(e);\n    outliers = undefined;\n  }\n};\n\nlet outliers: OutlierOutput | undefined = undefined;\n\nexport const calculateOutlierValue = (series: DataFrame[], data: DataFrame): number => {\n  if (!wasmSupported()) {\n    throw new Error('WASM not supported, fall back to stdDev');\n  }\n  if (!outliers) {\n    throw new Error('Initialize outlier detector first');\n  }\n\n  const index = series.indexOf(data);\n  if (outliers.seriesResults[index].isOutlier) {\n    return -outliers.seriesResults[index].outlierIntervals.length;\n  }\n\n  return 0;\n};\n\nexport const sortSeriesByName = (series: DataFrame[], direction: string) => {\n  const sortedSeries = [...series];\n  sortedSeries.sort((a, b) => {\n    const valueA = getLabelValueFromDataFrame(a);\n    const valueB = getLabelValueFromDataFrame(b);\n    if (!valueA || !valueB) {\n      return 0;\n    }\n    return valueA?.localeCompare(valueB) ?? 0;\n  });\n  if (direction === 'desc') {\n    sortedSeries.reverse();\n  }\n  return sortedSeries;\n};\n\nexport const wasmSupported = () => {\n  const support = typeof WebAssembly === 'object';\n\n  if (!support) {\n    reportExploreMetrics('wasm_not_supported', {});\n  }\n\n  return support;\n};\n","import { type LabelBreakdownSortingOption } from 'Breakdown/SortByScene';\n\nimport { OTEL_EXPERIENCE_ENABLED_KEY, TRAIL_BREAKDOWN_SORT_KEY, TRAIL_BREAKDOWN_VIEW_KEY } from '../shared';\n\nexport function getVewByPreference() {\n  return localStorage.getItem(TRAIL_BREAKDOWN_VIEW_KEY) ?? 'grid';\n}\n\nexport function setVewByPreference(value?: string) {\n  return localStorage.setItem(TRAIL_BREAKDOWN_VIEW_KEY, value ?? 'grid');\n}\n\nexport function getSortByPreference(\n  target: string,\n  defaultSortBy: LabelBreakdownSortingOption\n): { sortBy: LabelBreakdownSortingOption; direction?: string } {\n  const preference = localStorage.getItem(`${TRAIL_BREAKDOWN_SORT_KEY}.${target}.by`) ?? '';\n  const parts = preference.split('.');\n  if (!parts[0] || !parts[1]) {\n    return { sortBy: defaultSortBy };\n  }\n  return { sortBy: parts[0] as LabelBreakdownSortingOption, direction: parts[1] };\n}\n\nexport function setSortByPreference(target: string, sortBy: LabelBreakdownSortingOption) {\n  // Prevent storing empty values\n  if (sortBy) {\n    localStorage.setItem(`${TRAIL_BREAKDOWN_SORT_KEY}.${target}.by`, `${sortBy}`);\n  }\n}\n\nexport function getOtelExperienceToggleState(): boolean {\n  const val = localStorage.getItem(OTEL_EXPERIENCE_ENABLED_KEY);\n  return val !== null ? JSON.parse(val) : true;\n}\n\nexport function setOtelExperienceToggleState(value: boolean) {\n  return localStorage.setItem(OTEL_EXPERIENCE_ENABLED_KEY, value.toString());\n}\n","import { BusEventBase, BusEventWithPayload } from '@grafana/data';\nimport { ConstantVariable } from '@grafana/scenes';\nimport { VariableHide } from '@grafana/schema';\n\nexport const TRAILS_ROUTE = '/explore/metrics/trail';\nexport const HOME_ROUTE = '/explore/metrics';\n\nexport const VAR_FILTERS = 'filters';\nexport const VAR_FILTERS_EXPR = '${filters}';\nexport const VAR_METRIC = 'metric';\nexport const VAR_METRIC_EXPR = '${metric}';\nexport const VAR_GROUP_BY = 'groupby';\nexport const VAR_GROUP_BY_EXP = '${groupby}';\nexport const VAR_DATASOURCE = 'ds';\nexport const VAR_DATASOURCE_EXPR = '${ds}';\nexport const VAR_LOGS_DATASOURCE = 'logsDs';\nexport const VAR_LOGS_DATASOURCE_EXPR = '${logsDs}';\nexport const VAR_OTEL_RESOURCES = 'otel_resources';\nexport const VAR_OTEL_RESOURCES_EXPR = '${otel_resources}';\nexport const VAR_OTEL_DEPLOYMENT_ENV = 'deployment_environment';\nexport const VAR_OTEL_DEPLOYMENT_ENV_EXPR = '${deployment_environment}';\nexport const VAR_OTEL_JOIN_QUERY = 'otel_join_query';\nexport const VAR_OTEL_JOIN_QUERY_EXPR = '${otel_join_query}';\nexport const VAR_OTEL_GROUP_BY = 'otel_groupby';\nexport const VAR_OTEL_GROUP_BY_EXPR = '${otel_groupby}';\nexport const VAR_OTEL_GROUP_LEFT = 'otel_group_left';\nexport const VAR_OTEL_GROUP_LEFT_EXPR = '${otel_group_left}';\nexport const VAR_MISSING_OTEL_TARGETS = 'missing_otel_targets';\nexport const VAR_MISSING_OTEL_TARGETS_EXPR = '${missing_otel_targets}';\n// for consolidating otel and metric filters into one adhoc filter set\nexport const VAR_OTEL_AND_METRIC_FILTERS = 'otel_and_metric_filters';\nexport const VAR_OTEL_AND_METRIC_FILTERS_EXPR = '${otel_and_metric_filters}';\nexport const VAR_OTHER_METRIC_FILTERS = 'other_metric_filters';\n\nexport const LOGS_METRIC = '$__logs__';\nexport const KEY_SQR_METRIC_VIZ_QUERY = 'sqr-metric-viz-query';\n\nexport const trailDS = { uid: VAR_DATASOURCE_EXPR };\n\n// Local storage keys\nexport const RECENT_TRAILS_KEY = 'grafana.trails.recent';\nexport const TRAIL_BOOKMARKS_KEY = 'grafana.trails.bookmarks';\nexport const TRAIL_BREAKDOWN_VIEW_KEY = 'grafana.trails.breakdown.view';\nexport const TRAIL_BREAKDOWN_SORT_KEY = 'grafana.trails.breakdown.sort';\nexport const OTEL_EXPERIENCE_ENABLED_KEY = 'grafana.trails.otel.experience.enabled';\n\nexport const MDP_METRIC_PREVIEW = 250;\nexport const MDP_METRIC_OVERVIEW = 500;\n\nexport type MakeOptional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\nexport function getVariablesWithMetricConstant(metric: string) {\n  return [\n    new ConstantVariable({\n      name: VAR_METRIC,\n      value: metric,\n      hide: VariableHide.hideVariable,\n    }),\n  ];\n}\n\nexport function getVariablesWithOtelJoinQueryConstant() {\n  return [\n    new ConstantVariable({\n      name: VAR_OTEL_JOIN_QUERY,\n      value: '',\n      hide: VariableHide.hideVariable,\n    }),\n  ];\n}\n\nexport class MetricSelectedEvent extends BusEventWithPayload<string | undefined> {\n  public static type = 'metric-selected-event';\n}\n\nexport class RefreshMetricsEvent extends BusEventBase {\n  public static type = 'refresh-metrics-event';\n}\n","export const AccessoryButton = {};\nexport const AdvancedHttpSettings = {};\nexport const Auth = {};\nexport const AuthMethod = {};\nexport const ConfigSection = {};\nexport const ConfigSubSection = {};\nexport const ConnectionSettings = {};\nexport const convertLegacyAuthProps = {};\nexport const DataSourceDescription = {};\nexport const EditorField = {};\nexport const EditorFieldGroup = {};\nexport const EditorHeader = {};\nexport const EditorList = {};\nexport const EditorRow = {};\nexport const EditorRows = {};\nexport const EditorSwitch = {};\nexport const FlexItem = {};\nexport const InputGroup = {};\nexport const Plugin = {};\nexport const PluginPage = {};\n","export const tz = {};\n","import {\n  scopeFilterOperatorMap,\n  urlUtil,\n  type AdHocVariableFilter,\n  type GetTagResponse,\n  type MetricFindValue,\n  type RawTimeRange,\n  type Scope,\n  type ScopeSpecFilter,\n} from '@grafana/data';\nimport { getPrometheusTime } from '@grafana/prometheus';\nimport { config, getBackendSrv, getDataSourceSrv, type FetchResponse } from '@grafana/runtime';\nimport {\n  sceneGraph,\n  SceneTimeRange,\n  sceneUtils,\n  type AdHocFiltersVariable,\n  type SceneObject,\n  type SceneObjectState,\n  type SceneVariable,\n  type SceneVariableState,\n} from '@grafana/scenes';\nimport { lastValueFrom } from 'rxjs';\n\nimport { ROUTES } from './constants';\nimport { DataTrail } from './DataTrail';\nimport { type DataTrailSettings } from './DataTrailSettings';\nimport { type MetricDatasourceHelper } from './helpers/MetricDatasourceHelper';\nimport { MetricScene } from './MetricScene';\nimport { sortResources } from './otel/util';\nimport { LOGS_METRIC, VAR_DATASOURCE_EXPR, VAR_OTEL_AND_METRIC_FILTERS } from './shared';\nimport { getTrailStore } from './TrailStore/TrailStore';\nimport { getClosestScopesFacade } from './utils/utils.scopes';\nimport { isAdHocFiltersVariable } from './utils/utils.variables';\n\nexport function getTrailFor(model: SceneObject): DataTrail {\n  return sceneGraph.getAncestor(model, DataTrail);\n}\n\nexport function getTrailSettings(model: SceneObject): DataTrailSettings {\n  return sceneGraph.getAncestor(model, DataTrail).state.settings;\n}\n\nexport function newMetricsTrail(initialDS?: string, startButtonClicked?: boolean): DataTrail {\n  return new DataTrail({\n    initialDS,\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    embedded: false,\n    startButtonClicked,\n  });\n}\n\nexport function getUrlForTrail(trail: DataTrail) {\n  const params = sceneUtils.getUrlState(trail);\n  return urlUtil.renderUrl(ROUTES.Drilldown, params);\n}\n\nexport function getCurrentPath(): Location['pathname'] {\n  return window.location.pathname;\n}\n\nexport function currentPathIncludes(path: string) {\n  return getCurrentPath().includes(path);\n}\n\nexport function getMetricSceneFor(model: SceneObject): MetricScene {\n  if (model instanceof MetricScene) {\n    return model;\n  }\n\n  if (model.parent) {\n    return getMetricSceneFor(model.parent);\n  }\n\n  console.error('Unable to find graph view for', model);\n\n  throw new Error('Unable to find trail');\n}\n\nexport function getDataSource(trail: DataTrail) {\n  return sceneGraph.interpolate(trail, VAR_DATASOURCE_EXPR);\n}\n\nexport function getDataSourceName(dataSourceUid: string) {\n  return getDataSourceSrv().getInstanceSettings(dataSourceUid)?.name || dataSourceUid;\n}\n\nexport function getMetricName(metric?: string) {\n  if (!metric) {\n    return 'All metrics';\n  }\n\n  if (metric === LOGS_METRIC) {\n    return 'Logs';\n  }\n\n  return metric;\n}\n\nexport function getDatasourceForNewTrail(): string | undefined {\n  const prevTrail = getTrailStore().recent[0];\n  if (prevTrail) {\n    const prevDataSource = sceneGraph.interpolate(prevTrail.resolve(), VAR_DATASOURCE_EXPR);\n    if (prevDataSource.length > 0) {\n      return prevDataSource;\n    }\n  }\n  const promDatasources = getDataSourceSrv().getList({ type: 'prometheus' });\n  if (promDatasources.length > 0) {\n    const defaultDatasource = promDatasources.find((mds) => mds.isDefault);\n\n    return defaultDatasource?.uid ?? promDatasources[0].uid;\n  }\n  return undefined;\n}\n\nexport function getColorByIndex(index: number) {\n  const visTheme = config.theme2.visualization;\n  return visTheme.getColorByName(visTheme.palette[index % 8]);\n}\n\nexport type SceneTimeRangeState = SceneObjectState & {\n  from: string;\n  to: string;\n  timeZone?: string;\n};\n\nexport function getFilters(scene: SceneObject) {\n  const filters = sceneGraph.lookupVariable('filters', scene);\n  if (isAdHocFiltersVariable(filters)) {\n    return filters.state.filters;\n  }\n  return null;\n}\n\n// frontend hardening limit\nconst MAX_ADHOC_VARIABLE_OPTIONS = 10000;\n\n/**\n * Add custom providers for the adhoc filters variable that limit the responses for labels keys and label values.\n * Currently hard coded to 10000.\n *\n * The current provider functions for adhoc filter variables are the functions getTagKeys and getTagValues in the data source.\n * This function still uses these functions from inside the data source helper.\n *\n * @param dataTrail\n * @param limitedFilterVariable Depending on otel experience flag, either filtersVar or otelAndMetricsVar\n * @param datasourceHelper\n */\nexport function limitAdhocProviders(\n  dataTrail: DataTrail,\n  limitedFilterVariable: SceneVariable<SceneVariableState> | null,\n  datasourceHelper: MetricDatasourceHelper\n) {\n  if (!isAdHocFiltersVariable(limitedFilterVariable)) {\n    return;\n  }\n\n  limitedFilterVariable.setState({\n    getTagKeysProvider: async (\n      variable: AdHocFiltersVariable,\n      currentKey: string | null\n    ): Promise<{\n      replace?: boolean;\n      values: GetTagResponse | MetricFindValue[];\n    }> => {\n      // For the Prometheus label names endpoint, '/api/v1/labels'\n      // get the previously selected filters from the variable\n      // to use in the query to filter the response\n      // using filters, e.g. {previously_selected_label:\"value\"},\n      // as the series match[] parameter in Prometheus labels endpoint\n      const filters = limitedFilterVariable.state.filters;\n      // call getTagKeys and truncate the response\n      // we're passing the queries so we get the labels that adhere to the queries\n      // we're also passing the scopes so we get the labels that adhere to the scopes filters\n\n      const opts = {\n        filters,\n        scopes: getClosestScopesFacade(variable)?.value,\n        queries: dataTrail.getQueries(),\n      };\n\n      // if there are too many queries it takes to much time to process the requests.\n      // In this case we favour responsiveness over reducing the number of options.\n      if (opts.queries.length > 20) {\n        opts.queries = [];\n      }\n\n      let values = (await datasourceHelper.getTagKeys(opts)).slice(0, MAX_ADHOC_VARIABLE_OPTIONS);\n\n      // sort the values for otel resources at the top\n      if (limitedFilterVariable.state.name === VAR_OTEL_AND_METRIC_FILTERS) {\n        values = sortResources(\n          values,\n          filters.map((f) => f.key)\n        );\n      }\n      // use replace: true to override the default lookup in adhoc filter variable\n      return { replace: true, values };\n    },\n    getTagValuesProvider: async (\n      variable: AdHocFiltersVariable,\n      filter: AdHocVariableFilter\n    ): Promise<{\n      replace?: boolean;\n      values: GetTagResponse | MetricFindValue[];\n    }> => {\n      // For the Prometheus label values endpoint, /api/v1/label/${interpolatedName}/values\n      // get the previously selected filters from the variable\n      // to use in the query to filter the response\n      // using filters, e.g. {previously_selected_label:\"value\"},\n      // as the series match[] parameter in Prometheus label values endpoint\n      const filtersValues = limitedFilterVariable.state.filters;\n      // remove current selected filter if updating a chosen filter\n      const filters = filtersValues.filter((f) => f.key !== filter.key);\n      // call getTagValues and truncate the response\n      // we're passing the queries so we get the label values that adhere to the queries\n      // we're also passing the scopes so we get the label values that adhere to the scopes filters\n\n      const opts = {\n        key: filter.key,\n        filters,\n        scopes: getClosestScopesFacade(variable)?.value,\n        queries: dataTrail.getQueries(),\n      };\n\n      // if there are too many queries it takes to much time to process the requests.\n      // In this case we favour responsiveness over reducing the number of options.\n      if (opts.queries.length > 20) {\n        opts.queries = [];\n      }\n\n      const values = (await datasourceHelper.getTagValues(opts)).slice(0, MAX_ADHOC_VARIABLE_OPTIONS);\n      // use replace: true to override the default lookup in adhoc filter variable\n      return { replace: true, values };\n    },\n  });\n}\n\nexport type SuggestionsResponse = {\n  data: string[];\n  status: 'success' | 'error';\n  error?: 'string';\n  warnings?: string[];\n};\n\n// Suggestions API is an API that receives adhoc filters, scopes and queries and returns the labels or label values that match the provided parameters\n// Under the hood it does exactly what the label and label values API where doing but the processing is done in the BE rather than in the FE\nexport async function callSuggestionsApi(\n  dataSourceUid: string,\n  timeRange: RawTimeRange,\n  scopes: Scope[],\n  adHocVariableFilters: AdHocVariableFilter[],\n  labelName: string | undefined,\n  limit: number | undefined,\n  requestId: string\n): Promise<FetchResponse<SuggestionsResponse>> {\n  return await lastValueFrom(\n    getBackendSrv().fetch<SuggestionsResponse>({\n      url: `/api/datasources/uid/${dataSourceUid}/resources/suggestions`,\n      data: {\n        labelName,\n        queries: [],\n        scopes: scopes.reduce<ScopeSpecFilter[]>((acc, scope) => {\n          acc.push(...scope.spec.filters);\n\n          return acc;\n        }, []),\n        adhocFilters: adHocVariableFilters.map((filter) => ({\n          key: filter.key,\n          operator: scopeFilterOperatorMap[filter.operator],\n          value: filter.value,\n          values: filter.values,\n        })),\n        start: getPrometheusTime(timeRange.from, false).toString(),\n        end: getPrometheusTime(timeRange.to, true).toString(),\n        limit,\n      },\n      requestId,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n  );\n}\n\ninterface SceneType<T> extends Function {\n  new (...args: never[]): T;\n}\n\nexport function findObjectOfType<T extends SceneObject>(\n  scene: SceneObject,\n  check: (obj: SceneObject) => boolean,\n  returnType: SceneType<T>\n) {\n  const obj = sceneGraph.findObject(scene, check);\n  if (obj instanceof returnType) {\n    return obj;\n  } else if (obj !== null) {\n    console.warn(`invalid return type: ${returnType.toString()}`);\n  }\n\n  return null;\n}\n","import { type PrometheusDatasource } from '@grafana/prometheus';\n\n/**\n * Helper function to determine if a datasource is a Prometheus datasource\n */\nexport function isPrometheusDataSource(input: unknown): input is PrometheusDatasource {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    'type' in input &&\n    input.type === 'prometheus' &&\n    'uid' in input &&\n    typeof input.uid === 'string'\n  );\n}\n","import { type SceneDataTransformer, type SceneObject, type SceneQueryRunner } from '@grafana/scenes';\n\nexport function getQueryRunnerFor(sceneObject: SceneObject | undefined): SceneQueryRunner | undefined {\n  if (!sceneObject) {\n    return undefined;\n  }\n\n  const dataProvider = sceneObject.state.$data ?? sceneObject.parent?.state.$data;\n\n  if (isSceneQueryRunner(dataProvider)) {\n    return dataProvider;\n  }\n\n  if (isSceneDataTransformer(dataProvider)) {\n    return getQueryRunnerFor(dataProvider);\n  }\n\n  return undefined;\n}\n\nexport function isSceneQueryRunner(input: SceneObject | null | undefined): input is SceneQueryRunner {\n  return typeof input !== 'undefined' && input !== null && 'state' in input && 'runQueries' in input;\n}\n\nexport function isSceneDataTransformer(input: SceneObject | null | undefined): input is SceneDataTransformer {\n  return typeof input !== 'undefined' && input !== null && 'state' in input && 'transformations' in input.state;\n}\n","import { type Scope } from '@grafana/data';\nimport { SceneObjectBase, type SceneObject, type SceneObjectState } from '@grafana/scenes';\n\nexport function getSelectedScopes(): Scope[] {\n  return [];\n}\n\nexport function getClosestScopesFacade(_scene: SceneObject): ScopesFacade {\n  return new ScopesFacade({});\n}\n\ninterface SelectedScope {\n  scope: Scope;\n  path: string[];\n}\n\ninterface ScopesFacadeState extends SceneObjectState {\n  // A callback that will be executed when new scopes are set\n  handler?: (facade: ScopesFacade) => void;\n  // The render count is a workaround to force the URL sync manager to update the URL with the latest scopes\n  // Basically it starts at 0, and it is increased with every scopes value update\n  renderCount?: number;\n}\n\nexport class ScopesFacade extends SceneObjectBase<ScopesFacadeState> {\n  private selectedScopes: SelectedScope[] = [];\n  private onScopesChangeCallbacks: Array<(scopes: SelectedScope[]) => void> = [];\n\n  constructor(_state: ScopesFacadeState) {\n    super({});\n  }\n\n  public getSelectedScopes(): SelectedScope[] {\n    return this.selectedScopes;\n  }\n\n  public getSelectedScopesNames(): string[] {\n    return this.selectedScopes.map(({ scope }) => scope.metadata.name);\n  }\n\n  public setSelectedScopes(scopes: SelectedScope[]) {\n    this.selectedScopes = scopes;\n    this.notifySubscribers();\n  }\n\n  public onScopesChange(callback: (scopes: SelectedScope[]) => void) {\n    this.onScopesChangeCallbacks.push(callback);\n    return () => {\n      this.onScopesChangeCallbacks = this.onScopesChangeCallbacks.filter((cb) => cb !== callback);\n    };\n  }\n\n  private notifySubscribers() {\n    for (const callback of this.onScopesChangeCallbacks) {\n      callback(this.selectedScopes);\n    }\n  }\n\n  public get value() {\n    return getSelectedScopes();\n  }\n}\n\nexport function ScopesSelector(): null {\n  return null;\n}\n","import {\n  type AdHocFiltersVariable,\n  type ConstantVariable,\n  type CustomVariable,\n  type QueryVariable,\n  type SceneVariable,\n} from '@grafana/scenes';\n\ntype MaybeVariable = SceneVariable | null | undefined;\n\nexport function isConstantVariable(variable: MaybeVariable): variable is ConstantVariable {\n  return variable !== null && variable?.state.type === 'constant';\n}\n\nexport function isAdHocFiltersVariable(variable: MaybeVariable): variable is AdHocFiltersVariable {\n  return variable !== null && variable?.state.type === 'adhoc';\n}\n\nexport function isCustomVariable(variable: MaybeVariable): variable is CustomVariable {\n  return variable !== null && variable?.state.type === 'custom';\n}\n\nexport function isQueryVariable(variable: MaybeVariable): variable is QueryVariable {\n  return variable !== null && variable?.state.type === 'query';\n}\n"],"names":["ErrorView","error","styles","useStyles2","getStyles","navigate","useNavigate","pathname","search","useLocation","onClickReload","useCallback","searchParams","URLSearchParams","newSearchParams","filter","key","has","forEach","set","get","toString","window","location","reload","div","className","container","InlineBanner","severity","title","message","TextLink","href","onClick","errorContext","handheldBy","theme","css","margin","spacing","Wingman","lazy","TrailRedirect","Navigate","to","ROUTES","Drilldown","replace","AppRoutes","trail","useContext","MetricsContext","Routes","Route","path","element","Trail","ensureErrorObject","defaultMessage","Error","PluginPropsContext","createContext","initFaro","newMetricsTrail","undefined","goToUrlForTrail","props","setError","useState","useEffect","onError","errorEvent","onUnHandledRejection","event","reason","type","addEventListener","removeEventListener","useCatchExceptions","setTrail","locationService","push","getUrlForTrail","unsubscribe","navigationEvents","subscribe","appContainer","data-testid","Provider","value","display","flexDirection","height","backgroundColor","colors","background","primary","children","errorObject","logger","cause","bannerTitle","Alert","br","MetricsDrilldownDataSourceVariable","DataSourceVariable","onActivate","this","setState","skipUrlSync","subscribeToState","newState","prevState","localStorage","setItem","LOCAL_STORAGE_KEY","getCurrentDataSource","prometheusDataSources","Object","values","config","datasources","ds","uidFromUrl","URL","VAR_DATASOURCE","uidFromLocalStorage","getItem","currentDataSource","find","uid","isDefault","console","warn","constructor","initialDS","super","name","pluginId","label","description","addActivationHandler","bind","PluginLogo","memo","size","img","cx","logo","src","pluginCommitSha","GIT_COMMIT","pluginCommitURL","buildInfo","grafanaBuildInfo","InfoMenuHeader","meta","info","version","updated","usePluginContext","menuHeader","h5","subTitle","InfoMenu","isDev","shortCommitSha","slice","Menu","header","Item","icon","open","disabled","Divider","edition","env","commit","PluginInfo","Dropdown","overlay","placement","Button","variant","tooltip","tooltipPlacement","button","border","weak","text","secondary","medium","canvas","typography","bodySmall","fontSize","localeCompare","Intl","Collator","sensitivity","compare","NULL_GROUP_BY_VALUE","LabelsDataSource","RuntimeDataSource","query","request","state","LoadingState","Done","data","fields","FieldType","other","length","metricFindQuery","matcher","options","sceneObject","scopedVars","__sceneObject","valueOf","getPrometheusDataSource","labelName","match","fetchLabelValues","map","labelOptions","fetchLabels","displayWarning","dsVariable","sceneGraph","findByKey","getDataSourceSrv","displayError","getLabelsMatchAPISupport","filters","getFiltersFromVariable","response","getTagKeys","processLabelOptions","args","MetricDatasourceHelper","datasourceUsesTimeRangeInLanguageProviderMethods","getTimeRange","languageProvider","fetchLabelsWithMatch","entries","Array","isArray","hasLabelsMatchAPISupport","filtersVariable","lookupVariable","VAR_FILTERS","isAdHocFiltersVariable","startsWith","sort","a","b","testDatasource","status","VAR_LABEL_VALUES","LabelValuesVariable","QueryVariable","datasource","isMulti","allowCustomValue","refresh","VariableRefresh","onTimeRangeChanged","hide","VariableHide","hideVariable","includeAll","Component","SceneByVariableRepeater","SceneObjectBase","performRepeat","_variableDependency","hasDependencyInLoadingState","loadingLayout","getLayoutLoading","errorLayout","emptyLayout","currentBatchSize","variable","variableName","MultiValueVariable","getLayoutError","getMultiVariableValues","getLayoutEmpty","initialPageSize","newChildren","option","index","getLayoutChild","Boolean","body","increaseBatchSize","newBatchSize","pageSizeIncrement","useSizes","increment","current","total","VariableDependencyConfig","variableNames","onVariableUpdateCompleted","hasAllValue","v","i","model","EventSortByChanged","BusEventWithPayload","MetricUsageFetcher","getUsageMetrics","usageType","_usageState","metrics","keys","Promise","resolve","metricsPromise","fetcher","then","getUsageForMetric","metricName","fetchDashboardMetrics","fetchAlertingMetrics","usageRequestOptions","showSuccessAlert","showErrorAlert","dashboardRequestMap","Map","limitedFunction","limitFunction","dashboardUid","dashboardRequestsFailedCount","promise","getBackendSrv","catch","finally","delete","concurrency","dashboards","limit","all","dashboardSearchResponse","counts","d","dashboard","panels","panel","isPrometheusDataSource","targets","target","extractMetricNames","expr","metric","err","alertingRules","metricCounts","rule","datasourceUid","promqlExpression","tree","parser","parse","metricNames","Set","cursor","is","firstChild","from","add","nextSibling","parent","next","RECENT_METRICS_STORAGE_KEY","getRecentMetrics","stored","recentMetrics","JSON","thirtyDaysAgo","Date","now","RECENT_METRICS_EXPIRY_DAYS","validMetrics","timestamp","stringify","sortByOptions","VAR_WINGMAN_SORT_BY","MetricsSorter","activationHandler","sortByVar","getVariables","getByName","supportedSortByOptions","getValue","changeValueTo","_subs","publishEvent","sortBy","usageFetcher","$variables","SceneVariableSet","variables","CustomVariable","join","inputControls","VariableValueSelectors","layout","initialized","sortMetricsWithRecentFirst","allRecentMetrics","m","allRecentMetricsSet","recent","nonRecent","reduce","sortedNonRecent","sortMetricsAlphabetically","includes","VAR_METRICS_VARIABLE","MetricsVariable","trailDS","VariableSort","alphabeticalAsc","EventMetricsVariableActivated","EventMetricsVariableDeactivated","EventMetricsVariableLoaded","withLifecycleEvents","TypeError","loading","VAR_FILTERED_METRICS_VARIABLE","FilteredMetricsVariable","updateGroupByQuery","groupByValue","refreshOptions","SelectAction","fill","MetricSelectedEvent","NativeHistogramBadge","badge","borderRadius","shape","radius","pill","transparent","width","padding","Badge","color","METRICS_VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW","METRICS_VIZ_PANEL_HEIGHT","METRICS_VIZ_PANEL_HEIGHT_SMALL","rateQueryMetricSuffixes","MetricVizPanel","prometheusFunction","$data","series","fieldConfig","defaults","overrides","id","FieldMatcherID","byFrameRefID","refId","properties","buildVizPanel","highlight","hideLegend","matchers","headerActions","isNativeHistogram","panelTitle","unit","getUnit","isHistogram","endsWith","queryRunner","maxDataPoints","PanelBuilders","statushistory","setTitle","setHeaderActions","action","clone","setData","setColor","mode","setMappings","MappingType","ValueToText","setThresholds","ThresholdsMode","Absolute","steps","setOption","showLegend","VisibilityMode","Never","buildStatusHistoryPanel","buildQueryRunner","setUnit","build","heatmap","HeatmapColorMode","Scheme","exponent","scheme","reverse","show","buildHeatmapPanel","queryOptions","format","timeseries","fixedColor","setCustomFieldConfig","buildTimeseriesPanel","split","operator","isRateQuery","groupings","determineQueryProperties","buildPrometheusQuery","useOtelJoin","ignoreUsage","nonRateQueryFunction","SceneQueryRunner","MAX_DATA_POINTS","queries","fromExploreMetrics","suffix","at","stateWithDefaults","getPromqlFunction","main","WithUsageDataPreviewPanel","_onActivate","getAncestor","MetricsReducer","enginesMap","metricsSorter","findByKeyAndType","isCustomVariable","updateSortBy","gridLayout","SceneCSSGridLayout","currentGridLayoutHeight","autoRows","usage","UsageData","usageCount","singularUsageType","pluralUsageType","usageContainer","Tooltip","content","span","usageItem","Icon","panelContainer","justifyContent","gap","borderTopWidth","alignItems","opacity","vizPanelInGridItem","metricUsedInAlertingRulesCount","metricUsedInDashboardsCount","usageDetails","VAR_WINGMAN_GROUP_BY","LabelsVariable","filteredMetricsVariable","filterExpression","interpolate","VAR_FILTERS_EXPR","placeholder","Label","default","LayoutType","LayoutSwitcher","getUrlState","updateFromUrl","stateUpdate","DEFAULT_LAYOUT","_urlSync","SceneObjectUrlSyncConfig","onChange","OPTIONS","RadioButtonGroup","aria-label","fullWidth","GRID_TEMPLATE_COLUMNS","SimpleMetricsList","subscribeToLayoutChange","layoutSwitcher","onChangeState","templateColumns","ROWS","isLazy","$behaviors","behaviors","sync","DashboardCursorSync","Crosshair","SceneReactObject","reactNode","Spinner","inline","colorIndex","getTrailFor","SceneCSSGridItem","getColorByIndex","footer","marginTop","GroupsIcon","svg","stroke","viewBox","circle","cy","r","strokeWidth","batchSizes","shouldDisplayShowMoreButton","MetricsWithLabelValueDataSource","timeRange","metricsList","removeRules","fetchSeriesValuesWithMatch","isPrometheusRule","VAR_METRIC_WITH_LABEL_VALUE","MetricsWithLabelValueVariable","labelValue","adHocFiltersVariable","buildQuery","MetricsGroupByRow","labelCardinality","boxShadow","containerHeader","marginBottom","paddingBottom","borderBottom","headerButtons","position","top","marginLeft","marginRight","zIndex","selectButton","collapsableSectionBody","groupName","lineHeight","isCollapsed","setIsCollapsed","CollapsableSection","isOpen","onToggle","MetricsGroupByList","rowGap","EventQuickSearchChanged","QuickSearch","URL_SEARCH_PARAM_NAME","newValue","updateDisableRatioDisplay","disableRatioDisplay","updateValue","notifyValueChange","getHumanFriendlyCountsMessage","tagName","tooltipContent","onAnyVariableChanged","newCount","debounce","searchText","e","currentTarget","clear","onKeyDown","preventDefault","Input","prefix","Tag","IconButton","ListControls","EmbeddedScene","SceneFlexLayout","direction","maxHeight","SceneFlexItem","headerWrapper","MetricsVariableFilterEngine","setInitOptions","initOptions","cloneDeep","getFilteredOptions","filteredOptions","categories","applyCategoryFilters","prefixes","applyPrefixFilters","suffixes","applySuffixFilters","names","applyNameFilters","applyFilters","settings","forceUpdate","notify","updatedFilters","isEqual","notifyUpdate","category","categoryRegex","buildRegex","concat","test","pattern","p","prefixesRegex","s","suffixesRegex","namePatterns","regexes","trim","RegExp","some","regex","flags","SceneVariableValueChangedEvent","MetricsVariableSortEngine","array1","array2","lastMetrics","sortedMetrics","sortByUsage","usageMetrics","scoreA","scoreB","sortMetricsByCount","EventApplyFunction","ApplyAction","EventConfigureFunction","ConfigureAction","PROMETHEUS_FN_OPTIONS","SceneDrawer","close","Drawer","subtitle","closeOnMaskClick","onClose","EventFiltersChanged","ruleGroupLabels","EventSectionValueChanged","CheckboxWithCount","count","checked","checkboxWrapper","Checkbox","whiteSpace","overflow","textOverflow","CheckBoxList","groups","selectedGroups","onSelectionChange","checkboxListHeader","noResults","ul","checkboxList","group","li","checkboxItem","g","newGroups","overflowY","shade","fontStyle","MetricsFilterSection","metricsVariable","updateLists","updateCounts","active","computeGroups","metricsReducer","originalOptions","filterEngine","filtersWithoutCurrentType","getFilters","optionsForCounting","newGroupsWithCount","showHideEmpty","showSearch","onReferencedVariableValueChanged","reportExploreMetrics","filter_count","filterType","filter_type","switchContainer","switchLabel","searchInput","flexBasis","flexShrink","hideEmpty","setHideEmpty","searchValue","setSearchValue","filteredGroups","useMemo","item","toLowerCase","every","SectionTitle","Switch","computeMetricPrefixGroups","rawPrefixesMap","parts","prefixesMap","computeMetricSuffixGroups","rawSuffixesMap","suffixesMap","computeRulesGroups","rulesMap","LabelsList","labels","selectedLabel","onClickLabel","onClickClearSelection","listHeader","selected","list","RadioButtonList","flex","LabelsBrowser","selectLabel","useLabelsBrowser","labelsVariable","labelsList","onInputChange","onInputKeyDown","onInputClear","Settings","CustomIcons","rect","x","y","rx","SideBarButton","ariaLabel","visible","iconOrText","buttonIcon","ButtonChild","availableIconsIndex","maxContrast","metricFiltersVariables","SideBar","cleanupOtherMetricsVar","initOtherMetricsVar","subscribeToEvent","payload","sectionValues","newSectionValues","setOtherMetricFilters","otherMetricFiltersVar","VAR_OTHER_METRIC_FILTERS","varToTextMap","newFilters","acc","keyLabel","hideLabel","currentVariableSet","AdHocFiltersVariable","readOnly","applyMode","getSectionValuesFromUrl","urlSearchParams","filterKey","filterValueFromUrl","setActiveSection","sectionKey","visibleSection","sections","section","BookmarksList","buttonsBar","boxSizing","borderTopLeftRadius","borderBottomLeftRadius","buttonContainer","transition","left","borderLeft","selectedBorder","visibility","right","closeButton","updateBodyBasedOnGroupBy","subscribeToEvents","initVariablesFilteringAndSorting","openDrawer","drawer","filteredMetrics","unshift","updatedMetrics","String","addRecentMetric","sortEngine","quickSearch","filterSections","findAllObjects","o","sortByVariable","filterSection","_debounceReportQuickSearchChange","listControls","sidebar","dataSources","dataSource","registerRuntimeDataSource","registerRuntimeDataSources","useChromeHeaderHeight","chromeHeaderHeight","APP_HEADER_HEIGHT","DataTrailSettings","stickyMainGraph","onToggleStickyMainGraph","onToggleOpen","popover","shadows","z3","heading","fontWeight","fontWeightMedium","gridTemplateColumns","columnGap","topScene","MetricSelectScene","MetricScene","evt","stopPropagation","onVisibleChange","ToolbarButton","DataTrail","trailActivated","getTopSceneFor","_handleMetricSelectedEvent","_addingFilterWithoutReportingInteraction","reportChangeInLabelFilters","VAR_DATASOURCE_EXPR","checkDataSourceForOTelResources","otelAndMetricsFiltersVariable","VAR_OTEL_AND_METRIC_FILTERS","otelFiltersVariable","VAR_OTEL_RESOURCES","otelJoinQueryVariable","VAR_OTEL_JOIN_QUERY","isConstantVariable","useOtelExperience","initialOtelCheckComplete","addingLabelFromBreakdown","nonPromotedOtelResources","manageOtelAndMetricFilters","otelResourcesObject","getOtelResourcesObject","getOtelJoinQuery","saveRecentTrail","hasFilters","getTrailStore","setRecentTrail","embedded","getMetricMetadata","datasourceHelper","initializeHistograms","histogramsLoaded","nativeHistograms","listNativeHistograms","resetNativeHistograms","getCurrentMetricMetadata","updateOtelJoinWithGroupLeft","nativeHistogramMetric","performBrowserHistoryAction","getSceneUpdatesForNewMetricValue","filterVar","baseFilters","getBaseFiltersForMetric","metricSearch","assign","getFreshTopScene","$timeRange","otelResources","fetchOtelResources","isEnabledInLocalStorage","getOtelExperienceToggleState","shouldEnableOtelExperience","updateOtelData","deploymentEnvironments","hasOtelResources","resetOtelExperience","otelTargets","totalOtelResources","jobs","instances","previouslyUsedOtelResources","getDeploymentEnvironments","getSelectedScopes","getNonPromotedOtelResources","startButtonClicked","resettingOtel","nonPromotedResources","otelResourcesVariable","addFilterButtonText","defaultKeys","isStandardOtel","afterFirstOtelCheck","getQueries","isSceneQueryRunner","sqr","q","initialFilters","SceneTimeRange","expressionBuilder","filtersWithoutMetricName","utf8Support","getVariablesWithOtelJoinQueryConstant","ConstantVariable","VAR_OTEL_GROUP_LEFT","VAR_MISSING_OTEL_TARGETS","VAR_OTEL_DEPLOYMENT_ENV","controls","SceneControlsSpacer","SceneTimePicker","SceneRefreshPicker","pluginInfo","component","createdAt","getTime","dashboardMetrics","alertingMetrics","reset","currentPathIncludes","nativeHistogram","flexGrow","isLight","flexWrap","isDark","navbarFixed","settingsInfo","limitedFilterVariable","limitAdhocProviders","reportOtelExperience","useRef","control","UrlSyncContextProvider","scene","createBrowserHistorySteps","updateUrlOnInit","extensionPointId","pluginJson","AddToExplorationButton","getContext","dsUid","getData","findObject","frame","getFilter","legendFormat","getFieldConfig","findObjectOfType","VizPanel","frames","field","existingOverride","displayNameFromDS","displayName","fieldName","ctx","origin","url","logoPath","MimirLogo","drillDownLabel","context","links","usePluginLinks","limitPerPlugin","link","filterNameAndValueObj","ADD_TO_INVESTIGATION_MENU_TEXT","ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT","ADD_TO_INVESTIGATION_MENU_GROUP_TEXT","PanelMenu","addItem","setItems","items","addExplorationsLink","exploreUrl","viz","panelData","getQueryRunnerFor","getExploreURL","iconClassName","shortcut","VizPanelMenu","addToExplorationsButton","menu","subscribeToAddToExploration","explorationsButton","activate","getInvestigationLink","addToExplorations","getPluginLinkExtensions","extensions","getObservablePluginLinks","firstValueFrom","addToExplorationButton","existingMenuItems","existingAddToExplorationLink","AutoVizPanelQuerySelector","autoQuery","getMetricSceneFor","variants","onChangeQuery","queryDef","AutoVizPanel","getVizPanelFor","def","metadata","getMetricDescription","vizBuilder","MDP_METRIC_OVERVIEW","setDescription","setShowMenuAlways","setMenu","metricScene","BASE_QUERY_TEMPLATE","VAR_METRIC_EXPR","RATE_BASE_QUERY_TEMPLATE","BASE_QUERY_UTF8_METRIC_TEMPLATE","RATE_BASE_QUERY_UTF8_METRIC_TEMPLATE","generateBaseQuery","isUtf8Metric","baseQuery","VAR_OTEL_JOIN_QUERY_EXPR","generateCommonAutoQueryInfo","mainQueryExpr","breakdownQueryExpr","common","mainQuery","simpleGraphBuilder","preview","breakdown","VAR_GROUP_BY_EXP","RATE_SUFFIXES","SPECIFIC_AGGREGATIONS_FOR_SUFFIX","aggLabels","avg","sum","createDefaultMetricQueryDefs","metricParts","unitSuffix","aggregation","getPerSecondRateUnit","aggregationDescription","agg","percentileQuery","percentile","percent","createMeanExpr","subMetric","getAutoQueriesForMetric","isValidLegacyName","createSummaryMetricQueryDefs","p50","percentiles","percentilesGraphBuilder","heatmapGraphBuilder","createHistogramMetricQueryDefs","BreakdownLabelSelector","select","Combobox","opt","maxWidth","AddToFiltersGraphAction","resourceAttributes","allAttributes","otelResourcesVar","otelAndMetricsResourcesVar","addFilterWithoutReportingInteraction","findSceneObjectsByType","sceneType","isSceneType","uf","uFuzzy","intraMode","intraIns","intraSub","intraTrn","intraDel","fuzzySearch","haystack","callback","idxs","order","haystackOrder","matchesSet","mark","part","matched","infoIdx","idx","ranges","debounceLodash","ByFrameRepeater","sortedSeries","sortSeries","seriesIndex","layoutChild","unfilteredChildren","filterByString","iterateFrames","getLabelValue","filterFrames","filterFn","clearFilter","alertContainer","noResultsAlert","clearButton","BreakdownSearchReset","oldState","newData","SceneDataNode","dataNode","minWidth","getLabelValueFromDataFrame","SearchInput","onClear","rest","clearIcon","BusEventBase","recentFilters","BreakdownSearchScene","filterValues","LabelBreakdownScene","cacheKey","forEachChild","child","isActive","onValueFilterChange","clearValueFilter","BREAKDOWN_LAYOUT_TYPES","isBreakdownLayoutType","breakdownLayoutType","breakdownLayout","activeBreakdownLayout","newBreakdownLayout","Selector","breakdownLayoutOptions","onLayoutChange","storedBreakdownLayout","getVewByPreference","setVewByPreference","onBreakdownLayoutChange","breakdownLayouts","findIndex","SortCriteriaChanged","sortingOptions","SortByScene","getSortByPreference","onCriteriaChange","criteria","setSortByPreference","sortByTooltip","Field","htmlFor","isClearable","BreakdownAxisChangeEvent","yAxisSyncBehavior","breakdownScene","registerDataProvider","dataProvider","reportBreakdownPanelData","_","vizPanel","axisChangeSubscription","FieldConfigBuilders","min","max","update","onFieldConfigChange","ALL_VARIABLE_VALUE","init","debug","getVariable","featureToggles","enableScopesInMetricsExplore","RefreshMetricsEvent","updateBody","handleSortByChange","_query","clearBreakdownPanelAxisValues","newMin","breakdownPanelMinValue","newMax","breakdownPanelMaxValue","dataFrame","breakdownData","number","isNumber","maxValue","minValue","Number","isFinite","_triggerAxisChangedEvent","VAR_GROUP_BY","isQueryVariable","scenObject","labelFilters","getOptionsForSelect","filterExists","f","getLabelOptions","allLabelOptions","updateLabelOptions","blockingMessage","replaceAll","TooltipDisplayMode","Multi","SortOrder","Descending","MDP_METRIC_PREVIEW","SelectLabelAction","setBehaviors","fixLegendForUnspecifiedLabelValueBehavior","c","buildAllLayout","searchScene","frameIndex","isHidden","minHeight","LoadingPlaceholder","buildNormalLayout","updateOtelGroupLeft","attributeArray","el","firstGroup","throttle","paddingTop","searchField","truncatedOTelResources","dismissOtelWarning","updateDismissOtelWarning","missingOtelTargets","StatusWrapper","isLoading","onRemove","otel_resource_attribute","getBreakdownSceneFor","hasLegendFormat","METRIC_AUTOVIZPANEL_KEY","MetricGraphScene","topView","ySizing","MetricActionBar","sticky","nonSticky","selectedTab","getTrailSettings","knownLabelNameDiscrepancies","job","instance","replaceKnownLabelNames","hasMatchingLabels","labelKeys","availableLabels","results","lokiLabelName","getTagValues","createLabelsCrossReferenceConnector","conditionsMetForRelatedLogs","checkConditionsMetForRelatedLogs","getDataSources","lokiDataSources","findHealthyLokiDataSources","hasLabels","getLokiQueryExpr","fetchRecordingRuleGroups","datasourceSettings","recordingRules","res","lastValueFrom","fetch","ok","getLokiQueryForRelatedMetric","dataSourceUid","extractedRecordingRules","targetRule","hasMetricExpr","iterate","enter","MetricExpr","isLogsQuery","selectorNode","getNodeFromQuery","selector","substring","pipelineExprNode","PipelineExpr","pipelineExpr","getLogQueryFromMetricsQuery","fetchAndExtractLokiRecordingRules","ruleGroups","extractedRules","rg","rules","existingRule","hasMultipleOccurrences","extractRecordingRulesFromRuleGroups","lokiRecordingRulesConnector","lokiRecordingRules","selectedMetric","foundLokiDataSources","recRules","rr","getDataSourcesWithRecordingRulesContainingMetric","createLokiRecordingRulesConnector","nodeType","foundNode","node","RelatedLogsOrchestrator","_internalState","currentDataSourcesSignature","newDataSourcesSignature","_changeHandlers","handler","relatedLogsCount","addLokiDataSourcesChangeHandler","addRelatedLogsCountChangeHandler","findAndCheckAllDatasources","allLokiDatasources","checkLogsInDataSources","maxLines","_metricScene","queriesByConnector","_logsConnectors","connector","lokiExpr","connectorName","supportingQueryType","datasourcesWithLogs","totalLogsCount","totalChecked","getLokiQueries","rowCount","getList","logs","healthyLokiDataSources","unhealthyLokiDataSources","health","NoRelatedLogs","Stack","Text","external","paddingLeft","LOGS_PANEL_CONTAINER_KEY","RelatedLogsScene","orchestrator","setupLogsPanel","showNoLogsFound","_queryRunner","VAR_LOGS_DATASOURCE_EXPR","logsDataSourceVariable","VAR_LOGS_DATASOURCE","updateLokiQuery","selectedDatasourceVar","selectedDatasourceUid","handleFiltersChange","grow","LinkButton","appSubUrl","COPY_LABEL","UI_TEXT","METRIC_SELECT_SCENE","COPY_URL_LABEL","ShareTrailButton","setTooltip","navigator","clipboard","appUrl","PLUGIN_BASE_URL","writeText","setTimeout","actionViews","actionView","setActionView","relatedLogsOrchestrator","actionViewDef","actionViewsDefinitions","getScene","createRelatedLogsScene","getVariablesWithMetricConstant","defaultToAll","getLinkToExplore","autoVizPanel","openExploreLink","actions","breakpoints","up","md","customTabsBar","isBookmarked","toggleBookmark","getBookmarkIndex","indexOnRender","bookmarkIndex","setBookmarkIndex","sub","SceneObjectStateChangedEvent","indexToRemove","removeBookmark","addBookmark","useBookmarkState","Box","paddingY","SELECT_NEW_METRIC_TOOLTIP","OPEN_EXPLORE_LABEL","BOOKMARK_LABEL","TabsBar","tab","counter","tabRender","Tab","onChangeTab","actionViewChangedPayload","view","related_logs_count","Parser","maxDepth","minGroupSize","idealMaxGroupSize","miscGroupKey","root","parseStrings","level","descendants","prefixDelimited","miscGroupValues","delimiterCount","char","charCodeAt","LIMIT_REACHED","queryModeller","PromQueryModeller","getMetricNames","scopes","getMetricNamesWithScopes","adhocFilters","getMetricNamesWithoutScopes","matchTerms","prometheusSpecialCharsInLabelValues","input","removeBrackets","renderLabels","op","otelMatches","limitOtelMatchTerms","jobsRegex","instancesRegex","params","start","getPrometheusTime","end","warnings","limitReached","callSuggestionsApi","hideEmptyPreviews","gridItem","Loading","updateMetricPanel","hasValue","isNaN","SelectMetricAction","PreviewPanel","updateQuery","filtersVar","queryExpr","getPreviewPanelFor","hideMenu","vizPanelBuilder","metricToTargetLevenDistances","getLevenDistances","targetMetric","targetToDistances","distances","metricSplit","metricHalf","halfLeven","leven","wholeLeven","splitSeparator","deriveSearchTermsFromInput","whiteSpaceSeparatedTerms","term","createPromRegExp","searchQuery","searchParts","terms","getUniqueTerms","isSceneTimeRangeState","ROW_PREVIEW_HEIGHT","metricPrefix","buildLayout","ignoreNextUpdate","searchTermCount","getMetricSearch","changedObject","oldSearchTerms","newSearchTerms","_debounceRefreshMetricNames","onMetricNamesChanged","_refreshMetricNames","metricSearchRegex","metricNamesLoading","metricNamesError","metricNamesWarning","jobsList","instancesList","searchRegex","createJSRegExpFromSearchTerms","filteredMetricNames","prefixRegex","bodyLayout","rootGroupNode","generateGroups","rootGroup","isFetchError","cancelled","statusText","groopParser","nameSet","previewCache","isEmpty","sortedMetricNames","metricList","aValue","bValue","metricsMap","oldPanel","loaded","sortedPreviewMetrics","itemRef","isPanel","isNative","getRef","isLoaded","metricPanel","onSearchQueryChange","onPrefixFilterChange","val","reportPrefixFilterInteraction","isMenuOpen","onToggleOtelExperience","setOtelExperienceToggleState","headingWrapper","metricTabGroup","displayOption","displayOptionTooltip","warningIcon","warning","badgeStyle","warningDismissed","dismissWarning","useReducer","tooStrict","noMetrics","metricNamesWarningIcon","h4","SEARCH","TITLE","rel","style","textDecoration","interactive","InlineSwitch","showLabel","OTEL_LABEL","onSubmit","isSceneCSSGridLayout","statusMessage","textAlign","TrailStore","_loadRecentTrailsFromStorage","storageItem","RECENT_TRAILS_KEY","serializedTrails","t","_deserializeTrail","_loadBookmarksFromStorage","TRAIL_BOOKMARKS_KEY","serialized","step","currentStep","history","urlValues","urlSerializedTrail","_loadFromUrl","sceneUtils","cloneSceneObjectState","_serializeTrail","getTrailForBookmarkIndex","bookmark","_bookmarks","getTrailForBookmark","getBookmarkKey","_recent","urlState","urlUtil","renderUrl","syncStateFromSearchParams","lastModified","_lastModified","load","_refreshBookmarkIndexMap","recentTrail","fromHome","recentUrlState","getUrlStateForComparison","_save","bookmarks","bookmarkState","appEvents","getAppEvents","isSidebarView","infoText","publish","AppEvents","alertSuccess","HOME_ROUTE","createBookmarkSavedNotification","splice","bookmarkKey","_bookmarkIndexMap","bookmarked","doSave","serializedRecent","correctUrlStateForComparison","store","truncateValue","maxLength","DataTrailCard","onSelect","onDelete","getMetricName","cardHeightClassName","compactHeight","cardTall","cardClassName","card","wide","cardWide","article","Card","Heading","metricValue","Meta","secondaryFont","primaryFont","deleteButton","SecondaryActions","date","dateTimeFormat","wordBreak","borderTop","borderRight","gridArea","letterSpacing","bottom","listeners","emit","listener","bookmarksList","paddingRight","emptyState","setLastDelete","h6","infoIcon","fontWeightLight","msgs","msg","alertError","alertWarning","DEFAULT_NON_RATE_QUERY_FUNCTION","metricPartString","Expression","defaultOperator","MatchingOperator","equal","defaultSelectors","promql","rate","interval","innerQueryString","by","DEFAULT_UNIT","DEFAULT_RATE_UNIT","UNIT_BYTES","UNIT_SECONDS","UNIT_PERCENT","UNIT_COUNT","UNIT_MAP","UNIT_LIST","RATE_UNIT_MAP","getUnitFromMetric","Math","metricPart","HOME","SUBTITLE","START_BUTTON","RECENT_HEADER","BOOKMARKS_HEADER","_datasource","_metricsMetadata","_classicHistograms","_nativeHistograms","getDatasource","_trail","_getMetricsMetadata","metricsMetadata","loadMetricsMetadata","classicHistogramsCall","allMetricsCall","classicHistograms","allMetrics","addNativeHistogram","notClassic","pop","isWrappedInQuotes","unwrapQuotes","help","PREFIX","reportInteraction","oldFilters","otel","oldFilter","newFilter","foundOldLabel","foundNewLabel","OTEL_RESOURCE_EXCLUDED_FILTERS","metricOtelJobInstanceQuery","otelTargetInfoQuery","paramsTotalTargets","responseTotal","result","getDeploymentEnvironmentsWithScopes","getDeploymentEnvironmentsWithoutScopes","getFilteredResourceAttributes","excludedFilters","allExcludedFilters","metricResources","attributes","metricMatchTerms","metricMatchParam","metricParams","metricResponse","metricLabels","targetInfoMatchParam","targetInfoParams","targetInfoResponse","secondFilter","resource","sortResources","promResponses","targetInfoLabels","blessedList","cloud_availability_zone","cloud_region","container_name","k8s_cluster_name","k8s_container_name","k8s_cronjob_name","k8s_daemonset_name","k8s_deployment_name","k8s_job_name","k8s_namespace_name","k8s_pod_name","k8s_replicaset_name","k8s_statefulset_name","service_instance_id","service_name","service_namespace","resources","excluded","promotedList","blessed","groupLeft","otelResourcesJoinQuery","firstQueryVal","otelFilters","allFilters","allLabels","initialCharAmount","jobCheck","instanceCheck","orChars","otelGroupLeft","missingOtelTargetsVariable","otelJoinQuery","excludeFilterKeys","filterKeys","otelKeys","utf8Attributes","setupOtelFilterVariables","getProdOrDefaultEnv","defaultDepEnv","envs","indexOf","prevVarFilters","urlOtelAndMetricsFilters","urlVarsObject","nonPromoted","promoted","checkLabelPromotion","urlOtelResources","urlVarFilters","hasPreviousDepEnv","defaultDepEnvFilter","notPromoted","isPromoted","depEnvFromVarFilters","resourcesObject","newStateFilters","prevStateFilters","removedFilter","updatedFilter","newKey","isUpdatedFilter","memoize","sortSeriesByName","initOutlierDetector","reducer","fieldReducer","calculateOutlierValue","ReducerID","stdDev","fieldReducers","doStandardCalcs","seriesCalcs","firstTimestamp","lastTimestamp","wasmSupported","joined","outerJoinDataFrames","points","Float64Array","detector","OutlierDetector","dbscan","preprocess","outliers","detect","seriesResults","isOutlier","outlierIntervals","valueA","valueB","support","WebAssembly","TRAIL_BREAKDOWN_VIEW_KEY","defaultSortBy","TRAIL_BREAKDOWN_SORT_KEY","OTEL_EXPERIENCE_ENABLED_KEY","VAR_METRIC","LOGS_METRIC","AccessoryButton","EditorField","EditorFieldGroup","EditorList","EditorRow","EditorRows","EditorSwitch","InputGroup","tz","visTheme","theme2","visualization","getColorByName","palette","MAX_ADHOC_VARIABLE_OPTIONS","dataTrail","getTagKeysProvider","currentKey","getClosestScopesFacade","opts","getTagValuesProvider","adHocVariableFilters","requestId","scope","spec","scopeFilterOperatorMap","method","headers","check","returnType","obj","_scene","ScopesFacade","selectedScopes","getSelectedScopesNames","setSelectedScopes","notifySubscribers","onScopesChange","onScopesChangeCallbacks","cb","_state"],"sourceRoot":""}